

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri May 08 14:10:31 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  00101E                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _whiteLineThreshold
    45  00101E  7D                 	db	125
    46  0000                     _ADCON0	set	4034
    47  0000                     _ADCON2	set	4032
    48  0000                     _ADRESL	set	4035
    49  0000                     _ANSELA	set	3896
    50  0000                     _ANSELB	set	3897
    51  0000                     _ANSELCbits	set	3898
    52  0000                     _ANSELD	set	3899
    53  0000                     _ANSELDbits	set	3899
    54  0000                     _ANSELE	set	3900
    55  0000                     _CCP2CON	set	3942
    56  0000                     _CCP3CON	set	3933
    57  0000                     _CCPR2H	set	3944
    58  0000                     _CCPR2L	set	3943
    59  0000                     _CCPR3H	set	3935
    60  0000                     _CCPR3L	set	3934
    61  0000                     _CCPTMRS0bits	set	3913
    62  0000                     _ECCP2AS	set	3940
    63  0000                     _ECCP3AS	set	3931
    64  0000                     _INTCON2bits	set	4081
    65  0000                     _LATA	set	3977
    66  0000                     _LATAbits	set	3977
    67  0000                     _LATB	set	3978
    68  0000                     _LATC	set	3979
    69  0000                     _LATCbits	set	3979
    70  0000                     _LATD	set	3980
    71  0000                     _LATDbits	set	3980
    72  0000                     _LATE	set	3981
    73  0000                     _PIR1bits	set	3998
    74  0000                     _PIR5bits	set	3966
    75  0000                     _PORTAbits	set	3968
    76  0000                     _PORTC	set	3970
    77  0000                     _PORTCbits	set	3970
    78  0000                     _PR2	set	4027
    79  0000                     _PR4	set	3922
    80  0000                     _PSTR2CON	set	3939
    81  0000                     _PSTR3CON	set	3930
    82  0000                     _PWM2CON	set	3941
    83  0000                     _PWM3CON	set	3932
    84  0000                     _SSP2ADD	set	3950
    85  0000                     _SSP2BUF	set	3951
    86  0000                     _SSP2CON1	set	3948
    87  0000                     _SSP2CON1bits	set	3948
    88  0000                     _SSP2CON2	set	3947
    89  0000                     _SSP2CON2bits	set	3947
    90  0000                     _SSP2STAT	set	3949
    91  0000                     _T1CON	set	4045
    92  0000                     _T1CONbits	set	4045
    93  0000                     _T2CON	set	4026
    94  0000                     _T2CONbits	set	4026
    95  0000                     _T4CON	set	3921
    96  0000                     _T4CONbits	set	3921
    97  0000                     _TMR1H	set	4047
    98  0000                     _TMR1L	set	4046
    99  0000                     _TMR2	set	4028
   100  0000                     _TMR4	set	3923
   101  0000                     _TRISA	set	3986
   102  0000                     _TRISAbits	set	3986
   103  0000                     _TRISB	set	3987
   104  0000                     _TRISCbits	set	3988
   105  0000                     _TRISD	set	3989
   106  0000                     _TRISDbits	set	3989
   107  0000                     _TRISE	set	3990
   108  0000                     _WPUB	set	3937
   109  0000                     _ADON	set	32272
   110  0000                     _GODONE	set	32273
   111                           
   112                           	psect	smallconst
   113  000600                     __psmallconst:
   114                           	opt stack 0
   115  000600  00                 	db	0
   116  000601                     __stringdata:
   117                           	opt stack 0
   118  000601                     STR_1:
   119                           
   120                           ; BSR set to: 15
   121  000601  53                 	db	83	;'S'
   122  000602  74                 	db	116	;'t'
   123  000603  61                 	db	97	;'a'
   124  000604  72                 	db	114	;'r'
   125  000605  74                 	db	116	;'t'
   126  000606  00                 	db	0
   127  000607                     __end_of__stringdata:
   128                           	opt stack 0
   129                           
   130                           ; #config settings
   131  000607  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  000F58                     __pcinit:
   135                           	opt stack 0
   136  000F58                     start_initialization:
   137                           	opt stack 0
   138  000F58                     __initialization:
   139                           	opt stack 0
   140                           
   141                           ; Clear objects allocated to COMRAM (2 bytes)
   142  000F58  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143  000F5A  6A35               	clrf	__pbssCOMRAM& (0+255),c
   144                           
   145                           ; Initialize objects allocated to COMRAM (1 bytes)
   146                           ; load TBLPTR registers with __pidataCOMRAM
   147  000F5C  0E1E               	movlw	low __pidataCOMRAM
   148  000F5E  6EF6               	movwf	tblptrl,c
   149  000F60  0E10               	movlw	high __pidataCOMRAM
   150  000F62  6EF7               	movwf	tblptrh,c
   151  000F64  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   152  000F66  6EF8               	movwf	tblptru,c
   153  000F68  0009               	tblrd		*+	;fetch initializer
   154  000F6A  CFF5 F037          	movff	tablat,__pdataCOMRAM
   155  000F6E                     end_of_initialization:
   156                           	opt stack 0
   157  000F6E                     __end_of__initialization:
   158                           	opt stack 0
   159  000F6E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   160  000F70  6EF8               	movwf	tblptru,c
   161  000F72  0E06               	movlw	high __Lsmallconst
   162  000F74  6EF7               	movwf	tblptrh,c
   163  000F76  0100               	movlb	0
   164  000F78  EF37  F005         	goto	_main	;jump to C main() function
   165                           tblptru	equ	0xFF8
   166                           tblptrh	equ	0xFF7
   167                           tblptrl	equ	0xFF6
   168                           tablat	equ	0xFF5
   169                           
   170                           	psect	bssCOMRAM
   171  000035                     __pbssCOMRAM:
   172                           	opt stack 0
   173  000035                     _yPos:
   174                           	opt stack 0
   175  000035                     	ds	2
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           
   181                           	psect	dataCOMRAM
   182  000037                     __pdataCOMRAM:
   183                           	opt stack 0
   184  000037                     _whiteLineThreshold:
   185                           	opt stack 0
   186  000037                     	ds	1
   187                           tblptru	equ	0xFF8
   188                           tblptrh	equ	0xFF7
   189                           tblptrl	equ	0xFF6
   190                           tablat	equ	0xFF5
   191                           
   192                           	psect	cstackCOMRAM
   193  000001                     __pcstackCOMRAM:
   194                           	opt stack 0
   195  000001                     ??_Delay100ms:
   196  000001                     ??_LCD_writeChar:
   197  000001                     ?___awmod:
   198                           	opt stack 0
   199  000001                     ?___ftpack:
   200                           	opt stack 0
   201  000001                     place_lcd_cursor@y:
   202                           	opt stack 0
   203  000001                     ___awmod@dividend:
   204                           	opt stack 0
   205  000001                     ___ftpack@arg:
   206                           	opt stack 0
   207                           
   208                           ; 3 bytes @ 0x0
   209  000001                     	ds	1
   210  000002                     ??_place_lcd_cursor:
   211  000002                     LCD_writeChar@upper:
   212                           	opt stack 0
   213  000002                     Delay100ms@i:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x1
   217  000002                     	ds	1
   218  000003                     LCD_writeChar@lower:
   219                           	opt stack 0
   220  000003                     place_lcd_cursor@x:
   221                           	opt stack 0
   222  000003                     ___awmod@divisor:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x2
   226  000003                     	ds	1
   227  000004                     LCD_writeChar@data:
   228                           	opt stack 0
   229  000004                     place_lcd_cursor@position:
   230                           	opt stack 0
   231  000004                     ___ftpack@exp:
   232                           	opt stack 0
   233                           
   234                           ; 1 bytes @ 0x3
   235  000004                     	ds	1
   236  000005                     ??_LCD_init:
   237  000005                     ___awmod@counter:
   238                           	opt stack 0
   239  000005                     ___ftpack@sign:
   240                           	opt stack 0
   241  000005                     LCD_write@data:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x4
   245  000005                     	ds	1
   246  000006                     ??___ftpack:
   247  000006                     ___awmod@sign:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x5
   251  000006                     	ds	1
   252  000007                     ??_LCD_write:
   253  000007                     ?___awdiv:
   254                           	opt stack 0
   255  000007                     ___awdiv@dividend:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x6
   259  000007                     	ds	2
   260  000009                     ?___awtoft:
   261                           	opt stack 0
   262  000009                     LCD_write@i:
   263                           	opt stack 0
   264  000009                     ___awdiv@divisor:
   265                           	opt stack 0
   266  000009                     ___awtoft@c:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x8
   270  000009                     	ds	2
   271  00000B                     ___awdiv@counter:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0xA
   275  00000B                     	ds	1
   276  00000C                     ___awdiv@sign:
   277                           	opt stack 0
   278  00000C                     ___awtoft@sign:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0xB
   282  00000C                     	ds	1
   283  00000D                     ?___ftmul:
   284                           	opt stack 0
   285  00000D                     ___awdiv@quotient:
   286                           	opt stack 0
   287  00000D                     ___ftmul@f1:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0xC
   291  00000D                     	ds	2
   292  00000F                     _LCD_convertWrite$2143:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0xE
   296  00000F                     	ds	1
   297  000010                     ___ftmul@f2:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0xF
   301  000010                     	ds	1
   302  000011                     LCD_convertWrite@data:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x10
   306  000011                     	ds	2
   307  000013                     ??___ftmul:
   308                           
   309                           ; 0 bytes @ 0x12
   310  000013                     	ds	3
   311  000016                     ___ftmul@f3_as_product:
   312                           	opt stack 0
   313                           
   314                           ; 3 bytes @ 0x15
   315  000016                     	ds	3
   316  000019                     ___ftmul@exp:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x18
   320  000019                     	ds	1
   321  00001A                     ___ftmul@cntr:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x19
   325  00001A                     	ds	1
   326  00001B                     ___ftmul@sign:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x1A
   330  00001B                     	ds	1
   331  00001C                     ?___fttol:
   332                           	opt stack 0
   333  00001C                     ___fttol@f1:
   334                           	opt stack 0
   335                           
   336                           ; 3 bytes @ 0x1B
   337  00001C                     	ds	4
   338  000020                     ??___fttol:
   339                           
   340                           ; 0 bytes @ 0x1F
   341  000020                     	ds	5
   342  000025                     ___fttol@sign1:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x24
   346  000025                     	ds	1
   347  000026                     ___fttol@lval:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x25
   351  000026                     	ds	4
   352  00002A                     ___fttol@exp1:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x29
   356  00002A                     	ds	1
   357  00002B                     EPWM1_LoadDutyValue@dutyValue:
   358                           	opt stack 0
   359  00002B                     EPWM2_LoadDutyValue@dutyValue:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x2A
   363  00002B                     	ds	2
   364  00002D                     ??_EPWM1_LoadDutyValue:
   365  00002D                     ??_EPWM2_LoadDutyValue:
   366                           
   367                           ; 0 bytes @ 0x2C
   368  00002D                     	ds	4
   369  000031                     ??_main:
   370                           
   371                           ; 0 bytes @ 0x30
   372  000031                     	ds	2
   373  000033                     main@range:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x32
   377  000033                     	ds	2
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           
   383 ;;
   384 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   385 ;;
   386 ;; *************** function _main *****************
   387 ;; Defined at:
   388 ;;		line 18 in file "../Driver.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;		None
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  range           2   50[COMRAM] int 
   393 ;; Return value:  Size  Location     Type
   394 ;;		None               void
   395 ;; Registers used:
   396 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   402 ;;      Params:         0       0       0       0       0       0       0
   403 ;;      Locals:         2       0       0       0       0       0       0
   404 ;;      Temps:          2       0       0       0       0       0       0
   405 ;;      Totals:         4       0       0       0       0       0       0
   406 ;;Total ram usage:        4 bytes
   407 ;; Hardware stack levels required when called:    4
   408 ;; This function calls:
   409 ;;		_EPWM1_Initialize
   410 ;;		_EPWM2_Initialize
   411 ;;		_EPWM_Port_Init
   412 ;;		_LCD_convertWrite
   413 ;;		_LCD_init
   414 ;;		_LCD_write
   415 ;;		_Measure_Pulse
   416 ;;		_Send_Pulse
   417 ;;		_Stop
   418 ;;		_TMR2_Initialize
   419 ;;		_TMR4_Initialize
   420 ;;		___awdiv
   421 ;;		_i2c_Init
   422 ;;		_i2c_Port_Init
   423 ;;		_lineSensor_init
   424 ;;		_place_lcd_cursor
   425 ;; This function is called by:
   426 ;;		Startup code after reset
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text0
   431  000A6E                     __ptext0:
   432                           	opt stack 0
   433  000A6E                     _main:
   434                           	opt stack 27
   435                           
   436                           ;Driver.c: 21: EPWM_Port_Init();
   437                           
   438                           ; BSR set to: 15
   439                           ;incstack = 0
   440  000A6E  ECD1  F006         	call	_EPWM_Port_Init	;wreg free
   441                           
   442                           ;Driver.c: 24: EPWM1_Initialize();
   443  000A72  EC68  F007         	call	_EPWM1_Initialize	;wreg free
   444                           
   445                           ;Driver.c: 25: TMR2_Initialize();
   446  000A76  EC00  F008         	call	_TMR2_Initialize	;wreg free
   447                           
   448                           ;Driver.c: 28: EPWM2_Initialize();
   449  000A7A  EC97  F007         	call	_EPWM2_Initialize	;wreg free
   450                           
   451                           ;Driver.c: 29: TMR4_Initialize();
   452  000A7E  ECEB  F007         	call	_TMR4_Initialize	;wreg free
   453                           
   454                           ;Driver.c: 31: Stop();
   455  000A82  ECBE  F007         	call	_Stop	;wreg free
   456                           
   457                           ;Driver.c: 34: LCD_init();
   458  000A86  EC04  F003         	call	_LCD_init	;wreg free
   459                           
   460                           ;Driver.c: 35: place_lcd_cursor(0,0);
   461  000A8A  0E00               	movlw	0
   462  000A8C  6E01               	movwf	place_lcd_cursor@y,c
   463  000A8E  0E00               	movlw	0
   464  000A90  EC00  F007         	call	_place_lcd_cursor
   465                           
   466                           ;Driver.c: 38: i2c_Port_Init();
   467  000A94  ECF7  F007         	call	_i2c_Port_Init	;wreg free
   468                           
   469                           ;Driver.c: 39: i2c_Init();
   470  000A98  ECDF  F007         	call	_i2c_Init	;wreg free
   471                           
   472                           ;Driver.c: 42: lineSensor_init();
   473  000A9C  EC0C  F008         	call	_lineSensor_init	;wreg free
   474                           
   475                           ;Driver.c: 45: LCD_write("Start");
   476  000AA0  0E06               	movlw	high STR_1
   477  000AA2  6E06               	movwf	LCD_write@data+1,c
   478  000AA4  0E01               	movlw	low STR_1
   479  000AA6  6E05               	movwf	LCD_write@data,c
   480  000AA8  EC0E  F006         	call	_LCD_write	;wreg free
   481                           
   482                           ;Driver.c: 48: int range =0;
   483  000AAC  0E00               	movlw	0
   484  000AAE  6E34               	movwf	main@range+1,c
   485  000AB0  0E00               	movlw	0
   486  000AB2  6E33               	movwf	main@range,c
   487  000AB4                     l1765:
   488                           
   489                           ;Driver.c: 50: {
   490                           ;Driver.c: 51: Send_Pulse();
   491  000AB4  ECD0  F007         	call	_Send_Pulse	;wreg free
   492                           
   493                           ;Driver.c: 52: while(PORTAbits.RA3 = 0);
   494  000AB8  9680               	bcf	3968,3,c	;volatile
   495                           
   496                           ;Driver.c: 53: Measure_Pulse();
   497  000ABA  EC08  F008         	call	_Measure_Pulse	;wreg free
   498                           
   499                           ;Driver.c: 55: range =((TMR1H << 8) + TMR1L) / 58;
   500  000ABE  50CF               	movf	4047,w,c	;volatile
   501  000AC0  6E32               	movwf	(??_main+1)& (0+255),c
   502  000AC2  6A31               	clrf	??_main& (0+255),c
   503  000AC4  50CE               	movf	4046,w,c	;volatile
   504  000AC6  2431               	addwf	??_main,w,c
   505  000AC8  6E07               	movwf	___awdiv@dividend,c
   506  000ACA  0E00               	movlw	0
   507  000ACC  2032               	addwfc	??_main+1,w,c
   508  000ACE  6E08               	movwf	___awdiv@dividend+1,c
   509  000AD0  0E00               	movlw	0
   510  000AD2  6E0A               	movwf	___awdiv@divisor+1,c
   511  000AD4  0E3A               	movlw	58
   512  000AD6  6E09               	movwf	___awdiv@divisor,c
   513  000AD8  ECE5  F004         	call	___awdiv	;wreg free
   514  000ADC  C007  F033         	movff	?___awdiv,main@range
   515  000AE0  C008  F034         	movff	?___awdiv+1,main@range+1
   516                           
   517                           ;Driver.c: 57: place_lcd_cursor(0,1);
   518  000AE4  0E01               	movlw	1
   519  000AE6  6E01               	movwf	place_lcd_cursor@y,c
   520  000AE8  0E00               	movlw	0
   521  000AEA  EC00  F007         	call	_place_lcd_cursor
   522                           
   523                           ;Driver.c: 58: LCD_convertWrite(range);
   524  000AEE  5033               	movf	main@range,w,c
   525  000AF0  EC50  F006         	call	_LCD_convertWrite
   526                           
   527                           ;Driver.c: 60: _delay((unsigned long)((50)*(10000000/4000.0)));
   528  000AF4  0EA3               	movlw	163
   529  000AF6  6E31               	movwf	??_main& (0+255),c
   530  000AF8  0E55               	movlw	85
   531  000AFA                     u687:
   532  000AFA  2EE8               	decfsz	wreg,f,c
   533  000AFC  D7FE               	goto	u687
   534  000AFE  2E31               	decfsz	??_main& (0+255),f,c
   535  000B00  D7FC               	goto	u687
   536  000B02  F000               	nop	
   537  000B04  D7D7               	goto	l1765
   538  000B06                     __end_of_main:
   539                           	opt stack 0
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           wreg	equ	0xFE8
   545                           
   546 ;; *************** function _lineSensor_init *****************
   547 ;; Defined at:
   548 ;;		line 7 in file "../LineSensor.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;		None               void
   555 ;; Registers used:
   556 ;;		wreg, status,2
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   562 ;;      Params:         0       0       0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0       0       0
   565 ;;      Totals:         0       0       0       0       0       0       0
   566 ;;Total ram usage:        0 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text1
   576  001018                     __ptext1:
   577                           	opt stack 0
   578  001018                     _lineSensor_init:
   579                           	opt stack 30
   580                           
   581                           ;LineSensor.c: 9: ADCON2=0b10001010;
   582                           
   583                           ;incstack = 0
   584  001018  0E8A               	movlw	138
   585  00101A  6EC0               	movwf	4032,c	;volatile
   586  00101C  0012               	return	
   587  00101E                     __end_of_lineSensor_init:
   588                           	opt stack 0
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           wreg	equ	0xFE8
   594                           
   595 ;; *************** function _i2c_Port_Init *****************
   596 ;; Defined at:
   597 ;;		line 17 in file "../i2c.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;		None               void
   604 ;; Registers used:
   605 ;;		None
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   611 ;;      Params:         0       0       0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text2
   625  000FEE                     __ptext2:
   626                           	opt stack 0
   627  000FEE                     _i2c_Port_Init:
   628                           	opt stack 30
   629                           
   630                           ;i2c.c: 33: LATDbits.LD0 = 0;
   631                           
   632                           ;incstack = 0
   633  000FEE  908C               	bcf	3980,0,c	;volatile
   634                           
   635                           ;i2c.c: 34: LATDbits.LD1 = 0;
   636  000FF0  928C               	bcf	3980,1,c	;volatile
   637                           
   638                           ;i2c.c: 35: TRISDbits.RD0 = 0;
   639  000FF2  9095               	bcf	3989,0,c	;volatile
   640                           
   641                           ;i2c.c: 36: TRISDbits.RD1 = 0;
   642  000FF4  9295               	bcf	3989,1,c	;volatile
   643                           
   644                           ;i2c.c: 37: ANSELDbits.ANSD0 = 0;
   645  000FF6  010F               	movlb	15	; () banked
   646  000FF8  913B               	bcf	59,0,b	;volatile
   647                           
   648                           ;i2c.c: 38: ANSELDbits.ANSD1 = 0;
   649  000FFA  010F               	movlb	15	; () banked
   650  000FFC  933B               	bcf	59,1,b	;volatile
   651                           
   652                           ; BSR set to: 15
   653  000FFE  0012               	return	
   654  001000                     __end_of_i2c_Port_Init:
   655                           	opt stack 0
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           wreg	equ	0xFE8
   661                           
   662 ;; *************** function _i2c_Init *****************
   663 ;; Defined at:
   664 ;;		line 51 in file "../i2c.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;		None               void
   671 ;; Registers used:
   672 ;;		wreg, status,2
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   678 ;;      Params:         0       0       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0
   681 ;;      Totals:         0       0       0       0       0       0       0
   682 ;;Total ram usage:        0 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; This function calls:
   685 ;;		Nothing
   686 ;; This function is called by:
   687 ;;		_main
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           	psect	text3
   692  000FBE                     __ptext3:
   693                           	opt stack 0
   694  000FBE                     _i2c_Init:
   695                           	opt stack 30
   696                           
   697                           ;i2c.c: 55: TRISDbits.TRISD0=1;
   698                           
   699                           ; BSR set to: 15
   700                           ;incstack = 0
   701  000FBE  8095               	bsf	3989,0,c	;volatile
   702                           
   703                           ;i2c.c: 56: TRISDbits.TRISD1=1;
   704  000FC0  8295               	bsf	3989,1,c	;volatile
   705                           
   706                           ;i2c.c: 57: SSP2CON1bits.SSPEN = 1;
   707  000FC2  8A6C               	bsf	3948,5,c	;volatile
   708                           
   709                           ;i2c.c: 58: SSP2CON1 = 0b00101000;
   710  000FC4  0E28               	movlw	40
   711  000FC6  6E6C               	movwf	3948,c	;volatile
   712                           
   713                           ;i2c.c: 59: SSP2CON2 = 0;
   714  000FC8  0E00               	movlw	0
   715  000FCA  6E6B               	movwf	3947,c	;volatile
   716                           
   717                           ;i2c.c: 62: SSP2ADD = 39;
   718  000FCC  0E27               	movlw	39
   719  000FCE  6E6E               	movwf	3950,c	;volatile
   720                           
   721                           ;i2c.c: 64: SSP2STAT = 0b10000000;
   722  000FD0  0E80               	movlw	128
   723  000FD2  6E6D               	movwf	3949,c	;volatile
   724  000FD4  0012               	return	
   725  000FD6                     __end_of_i2c_Init:
   726                           	opt stack 0
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           wreg	equ	0xFE8
   732                           
   733 ;; *************** function _TMR4_Initialize *****************
   734 ;; Defined at:
   735 ;;		line 144 in file "../DCMotor.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;		None
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, status,2
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   749 ;;      Params:         0       0       0       0       0       0       0
   750 ;;      Locals:         0       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0
   752 ;;      Totals:         0       0       0       0       0       0       0
   753 ;;Total ram usage:        0 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text4
   763  000FD6                     __ptext4:
   764                           	opt stack 0
   765  000FD6                     _TMR4_Initialize:
   766                           	opt stack 30
   767                           
   768                           ;DCMotor.c: 149: T4CON = 0x00;
   769                           
   770                           ;incstack = 0
   771  000FD6  0E00               	movlw	0
   772  000FD8  010F               	movlb	15	; () banked
   773  000FDA  6F51               	movwf	81,b	;volatile
   774                           
   775                           ;DCMotor.c: 152: PR4 = 0xA0;
   776  000FDC  0EA0               	movlw	160
   777  000FDE  010F               	movlb	15	; () banked
   778  000FE0  6F52               	movwf	82,b	;volatile
   779                           
   780                           ; BSR set to: 15
   781                           ;DCMotor.c: 155: TMR4 = 0xFF;
   782  000FE2  010F               	movlb	15	; () banked
   783  000FE4  6953               	setf	83,b	;volatile
   784                           
   785                           ; BSR set to: 15
   786                           ;DCMotor.c: 158: PIR5bits.TMR4IF = 0;
   787  000FE6  907E               	bcf	3966,0,c	;volatile
   788                           
   789                           ; BSR set to: 15
   790                           ;DCMotor.c: 161: T4CONbits.TMR4ON = 1;
   791  000FE8  010F               	movlb	15	; () banked
   792  000FEA  8551               	bsf	81,2,b	;volatile
   793                           
   794                           ; BSR set to: 15
   795  000FEC  0012               	return	
   796  000FEE                     __end_of_TMR4_Initialize:
   797                           	opt stack 0
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           wreg	equ	0xFE8
   803                           
   804 ;; *************** function _TMR2_Initialize *****************
   805 ;; Defined at:
   806 ;;		line 74 in file "../DCMotor.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, status,2
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0
   823 ;;      Totals:         0       0       0       0       0       0       0
   824 ;;Total ram usage:        0 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text5
   834  001000                     __ptext5:
   835                           	opt stack 0
   836  001000                     _TMR2_Initialize:
   837                           	opt stack 30
   838                           
   839                           ;DCMotor.c: 79: T2CON = 0x00;
   840                           
   841                           ; BSR set to: 15
   842                           ;incstack = 0
   843  001000  0E00               	movlw	0
   844  001002  6EBA               	movwf	4026,c	;volatile
   845                           
   846                           ;DCMotor.c: 82: PR2 = 0xA0;
   847  001004  0EA0               	movlw	160
   848  001006  6EBB               	movwf	4027,c	;volatile
   849                           
   850                           ;DCMotor.c: 85: TMR2 = 0xFF;
   851  001008  68BC               	setf	4028,c	;volatile
   852                           
   853                           ;DCMotor.c: 88: PIR1bits.TMR2IF = 0;
   854  00100A  929E               	bcf	3998,1,c	;volatile
   855                           
   856                           ;DCMotor.c: 91: T2CONbits.TMR2ON = 1;
   857  00100C  84BA               	bsf	4026,2,c	;volatile
   858  00100E  0012               	return	
   859  001010                     __end_of_TMR2_Initialize:
   860                           	opt stack 0
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           wreg	equ	0xFE8
   866                           
   867 ;; *************** function _Stop *****************
   868 ;; Defined at:
   869 ;;		line 238 in file "../DCMotor.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;		None               void
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, prodl, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   883 ;;      Params:         0       0       0       0       0       0       0
   884 ;;      Locals:         0       0       0       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0       0       0
   886 ;;      Totals:         0       0       0       0       0       0       0
   887 ;;Total ram usage:        0 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    3
   890 ;; This function calls:
   891 ;;		_EPWM1_LoadDutyValue
   892 ;;		_EPWM2_LoadDutyValue
   893 ;; This function is called by:
   894 ;;		_main
   895 ;;		_Turn_Right
   896 ;;		_Turn_Left
   897 ;;		_Drive_Forward
   898 ;;		_Drive_Reverse
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text6
   903  000F7C                     __ptext6:
   904                           	opt stack 0
   905  000F7C                     _Stop:
   906                           	opt stack 27
   907                           
   908                           ;DCMotor.c: 242: CCP2CON = 0b11001100;
   909                           
   910                           ;incstack = 0
   911  000F7C  0ECC               	movlw	204
   912  000F7E  6E66               	movwf	3942,c	;volatile
   913                           
   914                           ;DCMotor.c: 243: CCP3CON = 0b11001100;
   915  000F80  0ECC               	movlw	204
   916  000F82  010F               	movlb	15	; () banked
   917  000F84  6F5D               	movwf	93,b	;volatile
   918                           
   919                           ; BSR set to: 15
   920                           ;DCMotor.c: 245: EPWM1_LoadDutyValue(00);
   921  000F86  0E00               	movlw	0
   922  000F88  6E2C               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
   923  000F8A  0E00               	movlw	0
   924  000F8C  6E2B               	movwf	EPWM1_LoadDutyValue@dutyValue,c
   925  000F8E  ECCB  F005         	call	_EPWM1_LoadDutyValue	;wreg free
   926                           
   927                           ;DCMotor.c: 246: EPWM2_LoadDutyValue(00);
   928  000F92  0E00               	movlw	0
   929  000F94  6E2C               	movwf	EPWM2_LoadDutyValue@dutyValue+1,c
   930  000F96  0E00               	movlw	0
   931  000F98  6E2B               	movwf	EPWM2_LoadDutyValue@dutyValue,c
   932  000F9A  EC91  F006         	call	_EPWM2_LoadDutyValue	;wreg free
   933  000F9E  0012               	return	
   934  000FA0                     __end_of_Stop:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           wreg	equ	0xFE8
   941                           
   942 ;; *************** function _EPWM2_LoadDutyValue *****************
   943 ;; Defined at:
   944 ;;		line 133 in file "../DCMotor.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  dutyValue       2   42[COMRAM] int 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;		None
   949 ;; Return value:  Size  Location     Type
   950 ;;		None               void
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0, prodl, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   958 ;;      Params:         2       0       0       0       0       0       0
   959 ;;      Locals:         0       0       0       0       0       0       0
   960 ;;      Temps:          4       0       0       0       0       0       0
   961 ;;      Totals:         6       0       0       0       0       0       0
   962 ;;Total ram usage:        6 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    2
   965 ;; This function calls:
   966 ;;		___awtoft
   967 ;;		___ftmul
   968 ;;		___fttol
   969 ;; This function is called by:
   970 ;;		_Stop
   971 ;;		_Switch_Direction2
   972 ;;		_Turn_Right
   973 ;;		_Turn_Left
   974 ;;		_Drive_Forward
   975 ;;		_Drive_Reverse
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text7
   980  000D22                     __ptext7:
   981                           	opt stack 0
   982  000D22                     _EPWM2_LoadDutyValue:
   983                           	opt stack 27
   984                           
   985                           ;DCMotor.c: 135: dutyValue = dutyValue * 6.4;
   986                           
   987                           ;incstack = 0
   988  000D22  0ECD               	movlw	205
   989  000D24  6E10               	movwf	___ftmul@f2,c
   990  000D26  0ECC               	movlw	204
   991  000D28  6E11               	movwf	___ftmul@f2+1,c
   992  000D2A  0E40               	movlw	64
   993  000D2C  6E12               	movwf	___ftmul@f2+2,c
   994  000D2E  C02B  F009         	movff	EPWM2_LoadDutyValue@dutyValue,___awtoft@c
   995  000D32  C02C  F00A         	movff	EPWM2_LoadDutyValue@dutyValue+1,___awtoft@c+1
   996  000D36  EC27  F007         	call	___awtoft	;wreg free
   997  000D3A  C009  F00D         	movff	?___awtoft,___ftmul@f1
   998  000D3E  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
   999  000D42  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  1000  000D46  EC19  F004         	call	___ftmul	;wreg free
  1001  000D4A  C00D  F01C         	movff	?___ftmul,___fttol@f1
  1002  000D4E  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  1003  000D52  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  1004  000D56  EC9E  F003         	call	___fttol	;wreg free
  1005  000D5A  C01C  F02D         	movff	?___fttol,??_EPWM2_LoadDutyValue
  1006  000D5E  C01D  F02E         	movff	?___fttol+1,??_EPWM2_LoadDutyValue+1
  1007  000D62  C01E  F02F         	movff	?___fttol+2,??_EPWM2_LoadDutyValue+2
  1008  000D66  C01F  F030         	movff	?___fttol+3,??_EPWM2_LoadDutyValue+3
  1009  000D6A  C02D  F02B         	movff	??_EPWM2_LoadDutyValue,EPWM2_LoadDutyValue@dutyValue
  1010  000D6E  C02E  F02C         	movff	??_EPWM2_LoadDutyValue+1,EPWM2_LoadDutyValue@dutyValue+1
  1011                           
  1012                           ;DCMotor.c: 138: CCPR2L = ((dutyValue & 0x03FC)>>2);
  1013  000D72  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  1014  000D76  C02C  F02E         	movff	EPWM2_LoadDutyValue@dutyValue+1,??_EPWM2_LoadDutyValue+1
  1015  000D7A  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  1016  000D7C  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  1017  000D7E  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  1018  000D80  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  1019  000D82  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  1020  000D84  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  1021  000D86  502D               	movf	??_EPWM2_LoadDutyValue,w,c
  1022  000D88  6E67               	movwf	3943,c	;volatile
  1023                           
  1024                           ;DCMotor.c: 141: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  1025  000D8A  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  1026  000D8E  0E03               	movlw	3
  1027  000D90  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  1028  000D92  3A2D               	swapf	??_EPWM2_LoadDutyValue,f,c
  1029  000D94  0EF0               	movlw	240
  1030  000D96  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  1031  000D98  5066               	movf	3942,w,c	;volatile
  1032  000D9A  0BCF               	andlw	207
  1033  000D9C  102D               	iorwf	??_EPWM2_LoadDutyValue,w,c
  1034  000D9E  6E66               	movwf	3942,c	;volatile
  1035  000DA0  0012               	return	
  1036  000DA2                     __end_of_EPWM2_LoadDutyValue:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           wreg	equ	0xFE8
  1043                           
  1044 ;; *************** function _EPWM1_LoadDutyValue *****************
  1045 ;; Defined at:
  1046 ;;		line 63 in file "../DCMotor.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  dutyValue       2   42[COMRAM] int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;		None
  1051 ;; Return value:  Size  Location     Type
  1052 ;;		None               void
  1053 ;; Registers used:
  1054 ;;		wreg, status,2, status,0, prodl, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1060 ;;      Params:         2       0       0       0       0       0       0
  1061 ;;      Locals:         0       0       0       0       0       0       0
  1062 ;;      Temps:          4       0       0       0       0       0       0
  1063 ;;      Totals:         6       0       0       0       0       0       0
  1064 ;;Total ram usage:        6 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    2
  1067 ;; This function calls:
  1068 ;;		___awtoft
  1069 ;;		___ftmul
  1070 ;;		___fttol
  1071 ;; This function is called by:
  1072 ;;		_Stop
  1073 ;;		_Switch_Direction1
  1074 ;;		_Turn_Right
  1075 ;;		_Turn_Left
  1076 ;;		_Drive_Forward
  1077 ;;		_Drive_Reverse
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text8
  1082  000B96                     __ptext8:
  1083                           	opt stack 0
  1084  000B96                     _EPWM1_LoadDutyValue:
  1085                           	opt stack 27
  1086                           
  1087                           ;DCMotor.c: 65: dutyValue = dutyValue * 6.4;
  1088                           
  1089                           ;incstack = 0
  1090  000B96  0ECD               	movlw	205
  1091  000B98  6E10               	movwf	___ftmul@f2,c
  1092  000B9A  0ECC               	movlw	204
  1093  000B9C  6E11               	movwf	___ftmul@f2+1,c
  1094  000B9E  0E40               	movlw	64
  1095  000BA0  6E12               	movwf	___ftmul@f2+2,c
  1096  000BA2  C02B  F009         	movff	EPWM1_LoadDutyValue@dutyValue,___awtoft@c
  1097  000BA6  C02C  F00A         	movff	EPWM1_LoadDutyValue@dutyValue+1,___awtoft@c+1
  1098  000BAA  EC27  F007         	call	___awtoft	;wreg free
  1099  000BAE  C009  F00D         	movff	?___awtoft,___ftmul@f1
  1100  000BB2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  1101  000BB6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  1102  000BBA  EC19  F004         	call	___ftmul	;wreg free
  1103  000BBE  C00D  F01C         	movff	?___ftmul,___fttol@f1
  1104  000BC2  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  1105  000BC6  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  1106  000BCA  EC9E  F003         	call	___fttol	;wreg free
  1107  000BCE  C01C  F02D         	movff	?___fttol,??_EPWM1_LoadDutyValue
  1108  000BD2  C01D  F02E         	movff	?___fttol+1,??_EPWM1_LoadDutyValue+1
  1109  000BD6  C01E  F02F         	movff	?___fttol+2,??_EPWM1_LoadDutyValue+2
  1110  000BDA  C01F  F030         	movff	?___fttol+3,??_EPWM1_LoadDutyValue+3
  1111  000BDE  C02D  F02B         	movff	??_EPWM1_LoadDutyValue,EPWM1_LoadDutyValue@dutyValue
  1112  000BE2  C02E  F02C         	movff	??_EPWM1_LoadDutyValue+1,EPWM1_LoadDutyValue@dutyValue+1
  1113                           
  1114                           ;DCMotor.c: 68: CCPR3L = ((dutyValue & 0x03FC)>>2);
  1115  000BE6  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  1116  000BEA  C02C  F02E         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
  1117  000BEE  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  1118  000BF0  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  1119  000BF2  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  1120  000BF4  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  1121  000BF6  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  1122  000BF8  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  1123  000BFA  502D               	movf	??_EPWM1_LoadDutyValue,w,c
  1124  000BFC  010F               	movlb	15	; () banked
  1125  000BFE  6F5E               	movwf	94,b	;volatile
  1126                           
  1127                           ; BSR set to: 15
  1128                           ;DCMotor.c: 71: CCP3CON = (CCP3CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  1129  000C00  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  1130  000C04  0E03               	movlw	3
  1131  000C06  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  1132  000C08  3A2D               	swapf	??_EPWM1_LoadDutyValue,f,c
  1133  000C0A  0EF0               	movlw	240
  1134  000C0C  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  1135  000C0E  010F               	movlb	15	; () banked
  1136  000C10  515D               	movf	93,w,b	;volatile
  1137  000C12  0BCF               	andlw	207
  1138  000C14  102D               	iorwf	??_EPWM1_LoadDutyValue,w,c
  1139  000C16  010F               	movlb	15	; () banked
  1140  000C18  6F5D               	movwf	93,b	;volatile
  1141                           
  1142                           ; BSR set to: 15
  1143  000C1A  0012               	return	
  1144  000C1C                     __end_of_EPWM1_LoadDutyValue:
  1145                           	opt stack 0
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           wreg	equ	0xFE8
  1151                           
  1152 ;; *************** function ___fttol *****************
  1153 ;; Defined at:
  1154 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  f1              3   27[COMRAM] float 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  lval            4   37[COMRAM] unsigned long 
  1159 ;;  exp1            1   41[COMRAM] unsigned char 
  1160 ;;  sign1           1   36[COMRAM] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  4   27[COMRAM] long 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1170 ;;      Params:         4       0       0       0       0       0       0
  1171 ;;      Locals:         6       0       0       0       0       0       0
  1172 ;;      Temps:          5       0       0       0       0       0       0
  1173 ;;      Totals:        15       0       0       0       0       0       0
  1174 ;;Total ram usage:       15 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_EPWM1_LoadDutyValue
  1180 ;;		_EPWM2_LoadDutyValue
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text9
  1185  00073C                     __ptext9:
  1186                           	opt stack 0
  1187  00073C                     ___fttol:
  1188                           	opt stack 28
  1189                           
  1190                           ; BSR set to: 15
  1191                           ;incstack = 0
  1192  00073C  C01E  F020         	movff	___fttol@f1+2,??___fttol
  1193  000740  6A21               	clrf	(??___fttol+1)& (0+255),c
  1194  000742  6A22               	clrf	(??___fttol+2)& (0+255),c
  1195  000744  341D               	rlcf	___fttol@f1+1,w,c
  1196  000746  3620               	rlcf	??___fttol& (0+255),f,c
  1197  000748  E301               	bnc	u151
  1198  00074A  8021               	bsf	(??___fttol+1)& (0+255),0,c
  1199  00074C                     u151:
  1200  00074C  5020               	movf	??___fttol,w,c
  1201  00074E  6E2A               	movwf	___fttol@exp1,c
  1202  000750  662A               	tstfsz	___fttol@exp1& (0+255),c
  1203  000752  D009               	goto	l1037
  1204  000754  0E00               	movlw	0
  1205  000756  6E1C               	movwf	?___fttol,c
  1206  000758  0E00               	movlw	0
  1207  00075A  6E1D               	movwf	?___fttol+1,c
  1208  00075C  0E00               	movlw	0
  1209  00075E  6E1E               	movwf	?___fttol+2,c
  1210  000760  0E00               	movlw	0
  1211  000762  6E1F               	movwf	?___fttol+3,c
  1212  000764  0012               	return	
  1213  000766                     l1037:
  1214  000766  0E17               	movlw	23
  1215  000768  6E20               	movwf	??___fttol& (0+255),c
  1216  00076A  C01C  F021         	movff	___fttol@f1,??___fttol+1
  1217  00076E  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  1218  000772  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  1219  000776  2820               	incf	??___fttol,w,c
  1220  000778  6E24               	movwf	(??___fttol+4)& (0+255),c
  1221  00077A  D004               	goto	u170
  1222  00077C                     u175:
  1223  00077C  90D8               	bcf	status,0,c
  1224  00077E  3223               	rrcf	??___fttol+3,f,c
  1225  000780  3222               	rrcf	??___fttol+2,f,c
  1226  000782  3221               	rrcf	??___fttol+1,f,c
  1227  000784                     u170:
  1228  000784  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  1229  000786  D7FA               	goto	u175
  1230  000788  5021               	movf	??___fttol+1,w,c
  1231  00078A  6E25               	movwf	___fttol@sign1,c
  1232  00078C  8E1D               	bsf	___fttol@f1+1,7,c
  1233  00078E  0EFF               	movlw	255
  1234  000790  161C               	andwf	___fttol@f1,f,c
  1235  000792  0EFF               	movlw	255
  1236  000794  161D               	andwf	___fttol@f1+1,f,c
  1237  000796  0E00               	movlw	0
  1238  000798  161E               	andwf	___fttol@f1+2,f,c
  1239  00079A  501C               	movf	___fttol@f1,w,c
  1240  00079C  6E26               	movwf	___fttol@lval,c
  1241  00079E  501D               	movf	___fttol@f1+1,w,c
  1242  0007A0  6E27               	movwf	___fttol@lval+1,c
  1243  0007A2  501E               	movf	___fttol@f1+2,w,c
  1244  0007A4  6E28               	movwf	___fttol@lval+2,c
  1245  0007A6  6A29               	clrf	___fttol@lval+3,c
  1246  0007A8  0E8E               	movlw	142
  1247  0007AA  5E2A               	subwf	___fttol@exp1,f,c
  1248  0007AC  AE2A               	btfss	___fttol@exp1,7,c
  1249  0007AE  D019               	goto	l1059
  1250  0007B0  502A               	movf	___fttol@exp1,w,c
  1251  0007B2  0A80               	xorlw	128
  1252  0007B4  6E20               	movwf	??___fttol& (0+255),c
  1253  0007B6  0EF1               	movlw	241
  1254  0007B8  0A80               	xorlw	128
  1255  0007BA  5C20               	subwf	??___fttol,w,c
  1256  0007BC  B0D8               	btfsc	status,0,c
  1257  0007BE  D009               	goto	l1055
  1258  0007C0  0E00               	movlw	0
  1259  0007C2  6E1C               	movwf	?___fttol,c
  1260  0007C4  0E00               	movlw	0
  1261  0007C6  6E1D               	movwf	?___fttol+1,c
  1262  0007C8  0E00               	movlw	0
  1263  0007CA  6E1E               	movwf	?___fttol+2,c
  1264  0007CC  0E00               	movlw	0
  1265  0007CE  6E1F               	movwf	?___fttol+3,c
  1266  0007D0  0012               	return	
  1267  0007D2                     l1055:
  1268  0007D2  90D8               	bcf	status,0,c
  1269  0007D4  3229               	rrcf	___fttol@lval+3,f,c
  1270  0007D6  3228               	rrcf	___fttol@lval+2,f,c
  1271  0007D8  3227               	rrcf	___fttol@lval+1,f,c
  1272  0007DA  3226               	rrcf	___fttol@lval,f,c
  1273  0007DC  3E2A               	incfsz	___fttol@exp1,f,c
  1274  0007DE  D7F9               	goto	l1055
  1275  0007E0  D014               	goto	l1069
  1276  0007E2                     l1059:
  1277  0007E2  0E17               	movlw	23
  1278  0007E4  642A               	cpfsgt	___fttol@exp1,c
  1279  0007E6  D00F               	goto	l1067
  1280  0007E8  0E00               	movlw	0
  1281  0007EA  6E1C               	movwf	?___fttol,c
  1282  0007EC  0E00               	movlw	0
  1283  0007EE  6E1D               	movwf	?___fttol+1,c
  1284  0007F0  0E00               	movlw	0
  1285  0007F2  6E1E               	movwf	?___fttol+2,c
  1286  0007F4  0E00               	movlw	0
  1287  0007F6  6E1F               	movwf	?___fttol+3,c
  1288  0007F8  0012               	return	
  1289  0007FA                     l1065:
  1290  0007FA  90D8               	bcf	status,0,c
  1291  0007FC  3626               	rlcf	___fttol@lval,f,c
  1292  0007FE  3627               	rlcf	___fttol@lval+1,f,c
  1293  000800  3628               	rlcf	___fttol@lval+2,f,c
  1294  000802  3629               	rlcf	___fttol@lval+3,f,c
  1295  000804  062A               	decf	___fttol@exp1,f,c
  1296  000806                     l1067:
  1297  000806  662A               	tstfsz	___fttol@exp1,c
  1298  000808  D7F8               	goto	l1065
  1299  00080A                     l1069:
  1300  00080A  5025               	movf	___fttol@sign1,w,c
  1301  00080C  B4D8               	btfsc	status,2,c
  1302  00080E  D008               	goto	l1073
  1303  000810  1E29               	comf	___fttol@lval+3,f,c
  1304  000812  1E28               	comf	___fttol@lval+2,f,c
  1305  000814  1E27               	comf	___fttol@lval+1,f,c
  1306  000816  6C26               	negf	___fttol@lval,c
  1307  000818  0E00               	movlw	0
  1308  00081A  2227               	addwfc	___fttol@lval+1,f,c
  1309  00081C  2228               	addwfc	___fttol@lval+2,f,c
  1310  00081E  2229               	addwfc	___fttol@lval+3,f,c
  1311  000820                     l1073:
  1312  000820  C026  F01C         	movff	___fttol@lval,?___fttol
  1313  000824  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  1314  000828  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  1315  00082C  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  1316  000830  0012               	return	
  1317  000832                     __end_of___fttol:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           wreg	equ	0xFE8
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function ___ftmul *****************
  1327 ;; Defined at:
  1328 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  f1              3   12[COMRAM] float 
  1331 ;;  f2              3   15[COMRAM] float 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  1334 ;;  sign            1   26[COMRAM] unsigned char 
  1335 ;;  cntr            1   25[COMRAM] unsigned char 
  1336 ;;  exp             1   24[COMRAM] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  3   12[COMRAM] float 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1346 ;;      Params:         6       0       0       0       0       0       0
  1347 ;;      Locals:         6       0       0       0       0       0       0
  1348 ;;      Temps:          3       0       0       0       0       0       0
  1349 ;;      Totals:        15       0       0       0       0       0       0
  1350 ;;Total ram usage:       15 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    1
  1353 ;; This function calls:
  1354 ;;		___ftpack
  1355 ;; This function is called by:
  1356 ;;		_EPWM1_LoadDutyValue
  1357 ;;		_EPWM2_LoadDutyValue
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text10
  1362  000832                     __ptext10:
  1363                           	opt stack 0
  1364  000832                     ___ftmul:
  1365                           	opt stack 27
  1366                           
  1367                           ;incstack = 0
  1368  000832  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  1369  000836  6A14               	clrf	(??___ftmul+1)& (0+255),c
  1370  000838  6A15               	clrf	(??___ftmul+2)& (0+255),c
  1371  00083A  340E               	rlcf	___ftmul@f1+1,w,c
  1372  00083C  3613               	rlcf	??___ftmul& (0+255),f,c
  1373  00083E  E301               	bnc	u81
  1374  000840  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  1375  000842                     u81:
  1376  000842  5013               	movf	??___ftmul,w,c
  1377  000844  6E19               	movwf	___ftmul@exp,c
  1378  000846  6619               	tstfsz	___ftmul@exp& (0+255),c
  1379  000848  D007               	goto	l977
  1380  00084A  0E00               	movlw	0
  1381  00084C  6E0D               	movwf	?___ftmul,c
  1382  00084E  0E00               	movlw	0
  1383  000850  6E0E               	movwf	?___ftmul+1,c
  1384  000852  0E00               	movlw	0
  1385  000854  6E0F               	movwf	?___ftmul+2,c
  1386  000856  0012               	return	
  1387  000858                     l977:
  1388  000858  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  1389  00085C  6A14               	clrf	(??___ftmul+1)& (0+255),c
  1390  00085E  6A15               	clrf	(??___ftmul+2)& (0+255),c
  1391  000860  3411               	rlcf	___ftmul@f2+1,w,c
  1392  000862  3613               	rlcf	??___ftmul& (0+255),f,c
  1393  000864  E301               	bnc	u101
  1394  000866  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  1395  000868                     u101:
  1396  000868  5013               	movf	??___ftmul,w,c
  1397  00086A  6E1B               	movwf	___ftmul@sign,c
  1398  00086C  661B               	tstfsz	___ftmul@sign& (0+255),c
  1399  00086E  D007               	goto	l983
  1400  000870  0E00               	movlw	0
  1401  000872  6E0D               	movwf	?___ftmul,c
  1402  000874  0E00               	movlw	0
  1403  000876  6E0E               	movwf	?___ftmul+1,c
  1404  000878  0E00               	movlw	0
  1405  00087A  6E0F               	movwf	?___ftmul+2,c
  1406  00087C  0012               	return	
  1407  00087E                     l983:
  1408  00087E  501B               	movf	___ftmul@sign,w,c
  1409  000880  0F7B               	addlw	123
  1410  000882  2619               	addwf	___ftmul@exp,f,c
  1411  000884  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  1412  000888  5012               	movf	___ftmul@f2+2,w,c
  1413  00088A  1A1B               	xorwf	___ftmul@sign,f,c
  1414  00088C  0E80               	movlw	128
  1415  00088E  161B               	andwf	___ftmul@sign,f,c
  1416  000890  8E0E               	bsf	___ftmul@f1+1,7,c
  1417  000892  8E11               	bsf	___ftmul@f2+1,7,c
  1418  000894  0EFF               	movlw	255
  1419  000896  1610               	andwf	___ftmul@f2,f,c
  1420  000898  0EFF               	movlw	255
  1421  00089A  1611               	andwf	___ftmul@f2+1,f,c
  1422  00089C  0E00               	movlw	0
  1423  00089E  1612               	andwf	___ftmul@f2+2,f,c
  1424  0008A0  0E00               	movlw	0
  1425  0008A2  6E16               	movwf	___ftmul@f3_as_product,c
  1426  0008A4  0E00               	movlw	0
  1427  0008A6  6E17               	movwf	___ftmul@f3_as_product+1,c
  1428  0008A8  0E00               	movlw	0
  1429  0008AA  6E18               	movwf	___ftmul@f3_as_product+2,c
  1430  0008AC  0E07               	movlw	7
  1431  0008AE  6E1A               	movwf	___ftmul@cntr,c
  1432  0008B0                     l997:
  1433  0008B0  A00D               	btfss	___ftmul@f1,0,c
  1434  0008B2  D006               	goto	l1001
  1435  0008B4  5010               	movf	___ftmul@f2,w,c
  1436  0008B6  2616               	addwf	___ftmul@f3_as_product,f,c
  1437  0008B8  5011               	movf	___ftmul@f2+1,w,c
  1438  0008BA  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  1439  0008BC  5012               	movf	___ftmul@f2+2,w,c
  1440  0008BE  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  1441  0008C0                     l1001:
  1442  0008C0  90D8               	bcf	status,0,c
  1443  0008C2  320F               	rrcf	___ftmul@f1+2,f,c
  1444  0008C4  320E               	rrcf	___ftmul@f1+1,f,c
  1445  0008C6  320D               	rrcf	___ftmul@f1,f,c
  1446  0008C8  90D8               	bcf	status,0,c
  1447  0008CA  3610               	rlcf	___ftmul@f2,f,c
  1448  0008CC  3611               	rlcf	___ftmul@f2+1,f,c
  1449  0008CE  3612               	rlcf	___ftmul@f2+2,f,c
  1450  0008D0  2E1A               	decfsz	___ftmul@cntr,f,c
  1451  0008D2  D7EE               	goto	l997
  1452  0008D4  0E09               	movlw	9
  1453  0008D6  6E1A               	movwf	___ftmul@cntr,c
  1454  0008D8                     l1007:
  1455  0008D8  A00D               	btfss	___ftmul@f1,0,c
  1456  0008DA  D006               	goto	l1011
  1457  0008DC  5010               	movf	___ftmul@f2,w,c
  1458  0008DE  2616               	addwf	___ftmul@f3_as_product,f,c
  1459  0008E0  5011               	movf	___ftmul@f2+1,w,c
  1460  0008E2  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  1461  0008E4  5012               	movf	___ftmul@f2+2,w,c
  1462  0008E6  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  1463  0008E8                     l1011:
  1464  0008E8  90D8               	bcf	status,0,c
  1465  0008EA  320F               	rrcf	___ftmul@f1+2,f,c
  1466  0008EC  320E               	rrcf	___ftmul@f1+1,f,c
  1467  0008EE  320D               	rrcf	___ftmul@f1,f,c
  1468  0008F0  90D8               	bcf	status,0,c
  1469  0008F2  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  1470  0008F4  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  1471  0008F6  3216               	rrcf	___ftmul@f3_as_product,f,c
  1472  0008F8  2E1A               	decfsz	___ftmul@cntr,f,c
  1473  0008FA  D7EE               	goto	l1007
  1474  0008FC  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  1475  000900  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1476  000904  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1477  000908  C019  F004         	movff	___ftmul@exp,___ftpack@exp
  1478  00090C  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  1479  000910  EC91  F004         	call	___ftpack	;wreg free
  1480  000914  C001  F00D         	movff	?___ftpack,?___ftmul
  1481  000918  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  1482  00091C  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  1483  000920  0012               	return	
  1484  000922                     __end_of___ftmul:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           wreg	equ	0xFE8
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function ___awtoft *****************
  1494 ;; Defined at:
  1495 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  c               2    8[COMRAM] int 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  sign            1   11[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  3    8[COMRAM] float 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2, status,0, prodl, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         3       0       0       0       0       0       0
  1510 ;;      Locals:         1       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0
  1512 ;;      Totals:         4       0       0       0       0       0       0
  1513 ;;Total ram usage:        4 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    1
  1516 ;; This function calls:
  1517 ;;		___ftpack
  1518 ;; This function is called by:
  1519 ;;		_EPWM1_LoadDutyValue
  1520 ;;		_EPWM2_LoadDutyValue
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text11
  1525  000E4E                     __ptext11:
  1526                           	opt stack 0
  1527  000E4E                     ___awtoft:
  1528                           	opt stack 27
  1529                           
  1530                           ;incstack = 0
  1531  000E4E  0E00               	movlw	0
  1532  000E50  6E0C               	movwf	___awtoft@sign,c
  1533  000E52  500A               	movf	___awtoft@c+1,w,c
  1534  000E54  0A80               	xorlw	128
  1535  000E56  6EF3               	movwf	prodl,c
  1536  000E58  0E80               	movlw	128
  1537  000E5A  5CF3               	subwf	prodl,w,c
  1538  000E5C  0E00               	movlw	0
  1539  000E5E  B4D8               	btfsc	status,2,c
  1540  000E60  5C09               	subwf	___awtoft@c,w,c
  1541  000E62  B0D8               	btfsc	status,0,c
  1542  000E64  D006               	goto	l1027
  1543  000E66  6C09               	negf	___awtoft@c,c
  1544  000E68  1E0A               	comf	___awtoft@c+1,f,c
  1545  000E6A  B0D8               	btfsc	status,0,c
  1546  000E6C  2A0A               	incf	___awtoft@c+1,f,c
  1547  000E6E  0E01               	movlw	1
  1548  000E70  6E0C               	movwf	___awtoft@sign,c
  1549  000E72                     l1027:
  1550  000E72  C009  F001         	movff	___awtoft@c,___ftpack@arg
  1551  000E76  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  1552  000E7A  6A03               	clrf	___ftpack@arg+2,c
  1553  000E7C  0E8E               	movlw	142
  1554  000E7E  6E04               	movwf	___ftpack@exp,c
  1555  000E80  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  1556  000E84  EC91  F004         	call	___ftpack	;wreg free
  1557  000E88  C001  F009         	movff	?___ftpack,?___awtoft
  1558  000E8C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  1559  000E90  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  1560  000E94  0012               	return	
  1561  000E96                     __end_of___awtoft:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodl	equ	0xFF3
  1568                           wreg	equ	0xFE8
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function ___ftpack *****************
  1572 ;; Defined at:
  1573 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  arg             3    0[COMRAM] unsigned um
  1576 ;;  exp             1    3[COMRAM] unsigned char 
  1577 ;;  sign            1    4[COMRAM] unsigned char 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  3    0[COMRAM] float 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         5       0       0       0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0       0       0
  1591 ;;      Temps:          3       0       0       0       0       0       0
  1592 ;;      Totals:         8       0       0       0       0       0       0
  1593 ;;Total ram usage:        8 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		___awtoft
  1599 ;;		___ftmul
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text12
  1604  000922                     __ptext12:
  1605                           	opt stack 0
  1606  000922                     ___ftpack:
  1607                           	opt stack 27
  1608                           
  1609                           ;incstack = 0
  1610  000922  5004               	movf	___ftpack@exp,w,c
  1611  000924  B4D8               	btfsc	status,2,c
  1612  000926  D005               	goto	l941
  1613  000928  5001               	movf	___ftpack@arg,w,c
  1614  00092A  1002               	iorwf	___ftpack@arg+1,w,c
  1615  00092C  1003               	iorwf	___ftpack@arg+2,w,c
  1616  00092E  A4D8               	btfss	status,2,c
  1617  000930  D00C               	goto	l947
  1618  000932                     l941:
  1619  000932  0E00               	movlw	0
  1620  000934  6E01               	movwf	?___ftpack,c
  1621  000936  0E00               	movlw	0
  1622  000938  6E02               	movwf	?___ftpack+1,c
  1623  00093A  0E00               	movlw	0
  1624  00093C  6E03               	movwf	?___ftpack+2,c
  1625  00093E  0012               	return	
  1626  000940                     l945:
  1627  000940  2A04               	incf	___ftpack@exp,f,c
  1628  000942  90D8               	bcf	status,0,c
  1629  000944  3203               	rrcf	___ftpack@arg+2,f,c
  1630  000946  3202               	rrcf	___ftpack@arg+1,f,c
  1631  000948  3201               	rrcf	___ftpack@arg,f,c
  1632  00094A                     l947:
  1633  00094A  0E00               	movlw	0
  1634  00094C  1401               	andwf	___ftpack@arg,w,c
  1635  00094E  6E06               	movwf	??___ftpack& (0+255),c
  1636  000950  0E00               	movlw	0
  1637  000952  1402               	andwf	___ftpack@arg+1,w,c
  1638  000954  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1639  000956  0EFE               	movlw	254
  1640  000958  1403               	andwf	___ftpack@arg+2,w,c
  1641  00095A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1642  00095C  5006               	movf	??___ftpack,w,c
  1643  00095E  1007               	iorwf	??___ftpack+1,w,c
  1644  000960  1008               	iorwf	??___ftpack+2,w,c
  1645  000962  B4D8               	btfsc	status,2,c
  1646  000964  D00C               	goto	l953
  1647  000966  D7EC               	goto	l945
  1648  000968                     l949:
  1649  000968  2A04               	incf	___ftpack@exp,f,c
  1650  00096A  0E01               	movlw	1
  1651  00096C  2601               	addwf	___ftpack@arg,f,c
  1652  00096E  0E00               	movlw	0
  1653  000970  2202               	addwfc	___ftpack@arg+1,f,c
  1654  000972  0E00               	movlw	0
  1655  000974  2203               	addwfc	___ftpack@arg+2,f,c
  1656  000976  90D8               	bcf	status,0,c
  1657  000978  3203               	rrcf	___ftpack@arg+2,f,c
  1658  00097A  3202               	rrcf	___ftpack@arg+1,f,c
  1659  00097C  3201               	rrcf	___ftpack@arg,f,c
  1660  00097E                     l953:
  1661  00097E  0E00               	movlw	0
  1662  000980  1401               	andwf	___ftpack@arg,w,c
  1663  000982  6E06               	movwf	??___ftpack& (0+255),c
  1664  000984  0E00               	movlw	0
  1665  000986  1402               	andwf	___ftpack@arg+1,w,c
  1666  000988  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1667  00098A  0EFF               	movlw	255
  1668  00098C  1403               	andwf	___ftpack@arg+2,w,c
  1669  00098E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1670  000990  5006               	movf	??___ftpack,w,c
  1671  000992  1007               	iorwf	??___ftpack+1,w,c
  1672  000994  1008               	iorwf	??___ftpack+2,w,c
  1673  000996  B4D8               	btfsc	status,2,c
  1674  000998  D006               	goto	l957
  1675  00099A  D7E6               	goto	l949
  1676  00099C                     l955:
  1677  00099C  0604               	decf	___ftpack@exp,f,c
  1678  00099E  90D8               	bcf	status,0,c
  1679  0009A0  3601               	rlcf	___ftpack@arg,f,c
  1680  0009A2  3602               	rlcf	___ftpack@arg+1,f,c
  1681  0009A4  3603               	rlcf	___ftpack@arg+2,f,c
  1682  0009A6                     l957:
  1683  0009A6  AE02               	btfss	___ftpack@arg+1,7,c
  1684  0009A8  D7F9               	goto	l955
  1685  0009AA  A004               	btfss	___ftpack@exp,0,c
  1686  0009AC  9E02               	bcf	___ftpack@arg+1,7,c
  1687  0009AE  90D8               	bcf	status,0,c
  1688  0009B0  3204               	rrcf	___ftpack@exp,f,c
  1689  0009B2  5004               	movf	___ftpack@exp,w,c
  1690  0009B4  1203               	iorwf	___ftpack@arg+2,f,c
  1691  0009B6  5005               	movf	___ftpack@sign,w,c
  1692  0009B8  A4D8               	btfss	status,2,c
  1693  0009BA  8E03               	bsf	___ftpack@arg+2,7,c
  1694  0009BC  C001  F001         	movff	___ftpack@arg,?___ftpack
  1695  0009C0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  1696  0009C4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  1697  0009C8  0012               	return	
  1698  0009CA                     __end_of___ftpack:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodl	equ	0xFF3
  1705                           wreg	equ	0xFE8
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _Send_Pulse *****************
  1709 ;; Defined at:
  1710 ;;		line 20 in file "../SRF04.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;		None               void
  1717 ;; Registers used:
  1718 ;;		wreg, status,2
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1724 ;;      Params:         0       0       0       0       0       0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0
  1727 ;;      Totals:         0       0       0       0       0       0       0
  1728 ;;Total ram usage:        0 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text13
  1738  000FA0                     __ptext13:
  1739                           	opt stack 0
  1740  000FA0                     _Send_Pulse:
  1741                           	opt stack 30
  1742                           
  1743                           ;SRF04.c: 22: TMR1H = 255;
  1744                           
  1745                           ;incstack = 0
  1746  000FA0  68CF               	setf	4047,c	;volatile
  1747                           
  1748                           ;SRF04.c: 23: TMR1L = 253;
  1749  000FA2  0EFD               	movlw	253
  1750  000FA4  6ECE               	movwf	4046,c	;volatile
  1751                           
  1752                           ;SRF04.c: 25: PORTAbits.RA2 = 1;
  1753  000FA6  8480               	bsf	3968,2,c	;volatile
  1754                           
  1755                           ;SRF04.c: 27: PIR1bits.TMR1IF = 0;
  1756  000FA8  909E               	bcf	3998,0,c	;volatile
  1757                           
  1758                           ;SRF04.c: 29: T1CONbits.TMR1ON = 1;
  1759  000FAA  80CD               	bsf	4045,0,c	;volatile
  1760  000FAC                     l344:
  1761  000FAC  A09E               	btfss	3998,0,c	;volatile
  1762  000FAE  D7FE               	goto	l344
  1763                           
  1764                           ;SRF04.c: 33: T1CONbits.TMR1ON =0;
  1765  000FB0  90CD               	bcf	4045,0,c	;volatile
  1766                           
  1767                           ;SRF04.c: 34: PORTAbits.RA2 = 0;
  1768  000FB2  9480               	bcf	3968,2,c	;volatile
  1769                           
  1770                           ;SRF04.c: 36: TMR1H = 0;
  1771  000FB4  0E00               	movlw	0
  1772  000FB6  6ECF               	movwf	4047,c	;volatile
  1773                           
  1774                           ;SRF04.c: 37: TMR1L = 0;
  1775  000FB8  0E00               	movlw	0
  1776  000FBA  6ECE               	movwf	4046,c	;volatile
  1777  000FBC  0012               	return	
  1778  000FBE                     __end_of_Send_Pulse:
  1779                           	opt stack 0
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           prodl	equ	0xFF3
  1785                           wreg	equ	0xFE8
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _Measure_Pulse *****************
  1789 ;; Defined at:
  1790 ;;		line 40 in file "../SRF04.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		None
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         0       0       0       0       0       0       0
  1805 ;;      Locals:         0       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0
  1807 ;;      Totals:         0       0       0       0       0       0       0
  1808 ;;Total ram usage:        0 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text14
  1818  001010                     __ptext14:
  1819                           	opt stack 0
  1820  001010                     _Measure_Pulse:
  1821                           	opt stack 30
  1822                           
  1823                           ;SRF04.c: 42: T1CONbits.TMR1ON = 1;
  1824                           
  1825                           ;incstack = 0
  1826  001010  80CD               	bsf	4045,0,c	;volatile
  1827                           
  1828                           ;SRF04.c: 43: while(PORTAbits.RA3 = 0);
  1829  001012  9680               	bcf	3968,3,c	;volatile
  1830                           
  1831                           ;SRF04.c: 44: T1CONbits.TMR1ON = 0;
  1832  001014  90CD               	bcf	4045,0,c	;volatile
  1833  001016  0012               	return	
  1834  001018                     __end_of_Measure_Pulse:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodl	equ	0xFF3
  1841                           wreg	equ	0xFE8
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _LCD_write *****************
  1845 ;; Defined at:
  1846 ;;		line 82 in file "../LCD.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  data            2    4[COMRAM] PTR unsigned char 
  1849 ;;		 -> STR_1(6), 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  i               2    8[COMRAM] int 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1861 ;;      Params:         2       0       0       0       0       0       0
  1862 ;;      Locals:         2       0       0       0       0       0       0
  1863 ;;      Temps:          2       0       0       0       0       0       0
  1864 ;;      Totals:         6       0       0       0       0       0       0
  1865 ;;Total ram usage:        6 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    1
  1868 ;; This function calls:
  1869 ;;		_LCD_writeChar
  1870 ;;		_place_lcd_cursor
  1871 ;; This function is called by:
  1872 ;;		_main
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text15
  1877  000C1C                     __ptext15:
  1878                           	opt stack 0
  1879  000C1C                     _LCD_write:
  1880                           	opt stack 29
  1881                           
  1882                           ;LCD.c: 86: for(int i=0; data[i]!='\0'; i++)
  1883                           
  1884                           ;incstack = 0
  1885  000C1C  0E00               	movlw	0
  1886  000C1E  6E0A               	movwf	LCD_write@i+1,c
  1887  000C20  0E00               	movlw	0
  1888  000C22  6E09               	movwf	LCD_write@i,c
  1889  000C24  D02B               	goto	l1735
  1890  000C26                     l1725:
  1891                           
  1892                           ;LCD.c: 87: {
  1893                           ;LCD.c: 88: if(data[i] == '\n')
  1894  000C26  C005  F007         	movff	LCD_write@data,??_LCD_write
  1895  000C2A  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  1896  000C2E  5009               	movf	LCD_write@i,w,c
  1897  000C30  2607               	addwf	??_LCD_write,f,c
  1898  000C32  500A               	movf	LCD_write@i+1,w,c
  1899  000C34  2208               	addwfc	??_LCD_write+1,f,c
  1900  000C36  C007  FFF6         	movff	??_LCD_write,tblptrl
  1901  000C3A  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  1902  000C3E                     	if	0	;tblptru may be non-zero
  1903  000C3E                     	endif
  1904  000C3E                     	if	0	;tblptru may be non-zero
  1905  000C3E                     	endif
  1906  000C3E  0008               	tblrd		*
  1907  000C40  50F5               	movf	tablat,w,c
  1908  000C42  0A0A               	xorlw	10
  1909  000C44  A4D8               	btfss	status,2,c
  1910  000C46  D008               	goto	l1731
  1911                           
  1912                           ;LCD.c: 89: {
  1913                           ;LCD.c: 91: ++yPos;
  1914  000C48  4A35               	infsnz	_yPos,f,c
  1915  000C4A  2A36               	incf	_yPos+1,f,c
  1916                           
  1917                           ;LCD.c: 92: place_lcd_cursor(0,yPos);
  1918  000C4C  C035  F001         	movff	_yPos,place_lcd_cursor@y
  1919  000C50  0E00               	movlw	0
  1920  000C52  EC00  F007         	call	_place_lcd_cursor
  1921                           
  1922                           ;LCD.c: 93: }
  1923  000C56  D010               	goto	l1733
  1924  000C58                     l1731:
  1925                           
  1926                           ;LCD.c: 94: else
  1927                           ;LCD.c: 95: {
  1928                           ;LCD.c: 97: LCD_writeChar(data[i]);
  1929  000C58  C005  F007         	movff	LCD_write@data,??_LCD_write
  1930  000C5C  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  1931  000C60  5009               	movf	LCD_write@i,w,c
  1932  000C62  2607               	addwf	??_LCD_write,f,c
  1933  000C64  500A               	movf	LCD_write@i+1,w,c
  1934  000C66  2208               	addwfc	??_LCD_write+1,f,c
  1935  000C68  C007  FFF6         	movff	??_LCD_write,tblptrl
  1936  000C6C  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  1937  000C70                     	if	0	;tblptru may be non-zero
  1938  000C70                     	endif
  1939  000C70                     	if	0	;tblptru may be non-zero
  1940  000C70                     	endif
  1941  000C70  0008               	tblrd		*
  1942  000C72  50F5               	movf	tablat,w,c
  1943  000C74  EC4B  F007         	call	_LCD_writeChar
  1944  000C78                     l1733:
  1945  000C78  4A09               	infsnz	LCD_write@i,f,c
  1946  000C7A  2A0A               	incf	LCD_write@i+1,f,c
  1947  000C7C                     l1735:
  1948  000C7C  C005  F007         	movff	LCD_write@data,??_LCD_write
  1949  000C80  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  1950  000C84  5009               	movf	LCD_write@i,w,c
  1951  000C86  2607               	addwf	??_LCD_write,f,c
  1952  000C88  500A               	movf	LCD_write@i+1,w,c
  1953  000C8A  2208               	addwfc	??_LCD_write+1,f,c
  1954  000C8C  C007  FFF6         	movff	??_LCD_write,tblptrl
  1955  000C90  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  1956  000C94                     	if	0	;tblptru may be non-zero
  1957  000C94                     	endif
  1958  000C94                     	if	0	;tblptru may be non-zero
  1959  000C94                     	endif
  1960  000C94  0008               	tblrd		*
  1961  000C96  50F5               	movf	tablat,w,c
  1962  000C98  0900               	iorlw	0
  1963  000C9A  B4D8               	btfsc	status,2,c
  1964  000C9C  0012               	return	
  1965  000C9E  D7C3               	goto	l1725
  1966  000CA0                     __end_of_LCD_write:
  1967                           	opt stack 0
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           prodl	equ	0xFF3
  1973                           wreg	equ	0xFE8
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _LCD_init *****************
  1977 ;; Defined at:
  1978 ;;		line 18 in file "../LCD.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;		None
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;		None               void
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1992 ;;      Params:         0       0       0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0       0       0
  1994 ;;      Temps:          1       0       0       0       0       0       0
  1995 ;;      Totals:         1       0       0       0       0       0       0
  1996 ;;Total ram usage:        1 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    1
  1999 ;; This function calls:
  2000 ;;		_Delay100ms
  2001 ;;		_place_lcd_cursor
  2002 ;; This function is called by:
  2003 ;;		_main
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text16
  2008  000608                     __ptext16:
  2009                           	opt stack 0
  2010  000608                     _LCD_init:
  2011                           	opt stack 29
  2012                           
  2013                           ;LCD.c: 21: LATCbits.LC3 = 0;
  2014                           
  2015                           ;incstack = 0
  2016  000608  968B               	bcf	3979,3,c	;volatile
  2017                           
  2018                           ;LCD.c: 22: LATCbits.LC2 = 0;
  2019  00060A  948B               	bcf	3979,2,c	;volatile
  2020                           
  2021                           ;LCD.c: 23: LATCbits.LC4 = 0;
  2022  00060C  988B               	bcf	3979,4,c	;volatile
  2023                           
  2024                           ;LCD.c: 24: LATCbits.LC5 = 0;
  2025  00060E  9A8B               	bcf	3979,5,c	;volatile
  2026                           
  2027                           ;LCD.c: 25: LATCbits.LC6 = 0;
  2028  000610  9C8B               	bcf	3979,6,c	;volatile
  2029                           
  2030                           ;LCD.c: 26: LATCbits.LC7 = 0;
  2031  000612  9E8B               	bcf	3979,7,c	;volatile
  2032                           
  2033                           ;LCD.c: 29: TRISCbits.RC3 = 0;
  2034  000614  9694               	bcf	3988,3,c	;volatile
  2035                           
  2036                           ;LCD.c: 30: TRISCbits.RC2 = 0;
  2037  000616  9494               	bcf	3988,2,c	;volatile
  2038                           
  2039                           ;LCD.c: 31: TRISCbits.RC4 = 0;
  2040  000618  9894               	bcf	3988,4,c	;volatile
  2041                           
  2042                           ;LCD.c: 32: TRISCbits.RC5 = 0;
  2043  00061A  9A94               	bcf	3988,5,c	;volatile
  2044                           
  2045                           ;LCD.c: 33: TRISCbits.RC6 = 0;
  2046  00061C  9C94               	bcf	3988,6,c	;volatile
  2047                           
  2048                           ;LCD.c: 34: TRISCbits.RC7 = 0;
  2049  00061E  9E94               	bcf	3988,7,c	;volatile
  2050                           
  2051                           ;LCD.c: 37: Delay100ms();
  2052  000620  EC81  F007         	call	_Delay100ms	;wreg free
  2053                           
  2054                           ;LCD.c: 40: PORTCbits.RC3 = 0;
  2055  000624  9682               	bcf	3970,3,c	;volatile
  2056                           
  2057                           ;LCD.c: 43: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  2058  000626  8482               	bsf	3970,2,c	;volatile
  2059  000628  5082               	movf	3970,w,c	;volatile
  2060  00062A  0B0F               	andlw	15
  2061  00062C  0930               	iorlw	48
  2062  00062E  6E82               	movwf	3970,c	;volatile
  2063  000630  9482               	bcf	3970,2,c	;volatile
  2064                           
  2065                           ;LCD.c: 44: _delay((unsigned long)((10)*(10000000/4000.0)));
  2066  000632  0E21               	movlw	33
  2067  000634  6E05               	movwf	??_LCD_init& (0+255),c
  2068  000636  0E76               	movlw	118
  2069  000638                     u697:
  2070  000638  2EE8               	decfsz	wreg,f,c
  2071  00063A  D7FE               	goto	u697
  2072  00063C  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2073  00063E  D7FC               	goto	u697
  2074  000640  D000               	nop2	
  2075                           
  2076                           ;LCD.c: 47: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  2077  000642  8482               	bsf	3970,2,c	;volatile
  2078  000644  5082               	movf	3970,w,c	;volatile
  2079  000646  0B0F               	andlw	15
  2080  000648  0930               	iorlw	48
  2081  00064A  6E82               	movwf	3970,c	;volatile
  2082  00064C  9482               	bcf	3970,2,c	;volatile
  2083                           
  2084                           ;LCD.c: 48: _delay((unsigned long)((10)*(10000000/4000.0)));
  2085  00064E  0E21               	movlw	33
  2086  000650  6E05               	movwf	??_LCD_init& (0+255),c
  2087  000652  0E76               	movlw	118
  2088  000654                     u707:
  2089  000654  2EE8               	decfsz	wreg,f,c
  2090  000656  D7FE               	goto	u707
  2091  000658  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2092  00065A  D7FC               	goto	u707
  2093  00065C  D000               	nop2	
  2094                           
  2095                           ;LCD.c: 51: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  2096  00065E  8482               	bsf	3970,2,c	;volatile
  2097  000660  5082               	movf	3970,w,c	;volatile
  2098  000662  0B0F               	andlw	15
  2099  000664  0930               	iorlw	48
  2100  000666  6E82               	movwf	3970,c	;volatile
  2101  000668  9482               	bcf	3970,2,c	;volatile
  2102                           
  2103                           ;LCD.c: 52: _delay((unsigned long)((10)*(10000000/4000.0)));
  2104  00066A  0E21               	movlw	33
  2105  00066C  6E05               	movwf	??_LCD_init& (0+255),c
  2106  00066E  0E76               	movlw	118
  2107  000670                     u717:
  2108  000670  2EE8               	decfsz	wreg,f,c
  2109  000672  D7FE               	goto	u717
  2110  000674  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2111  000676  D7FC               	goto	u717
  2112  000678  D000               	nop2	
  2113                           
  2114                           ;LCD.c: 55: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  2115  00067A  8482               	bsf	3970,2,c	;volatile
  2116  00067C  5082               	movf	3970,w,c	;volatile
  2117  00067E  0B0F               	andlw	15
  2118  000680  0920               	iorlw	32
  2119  000682  6E82               	movwf	3970,c	;volatile
  2120  000684  9482               	bcf	3970,2,c	;volatile
  2121                           
  2122                           ;LCD.c: 56: _delay((unsigned long)((10)*(10000000/4000.0)));
  2123  000686  0E21               	movlw	33
  2124  000688  6E05               	movwf	??_LCD_init& (0+255),c
  2125  00068A  0E76               	movlw	118
  2126  00068C                     u727:
  2127  00068C  2EE8               	decfsz	wreg,f,c
  2128  00068E  D7FE               	goto	u727
  2129  000690  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2130  000692  D7FC               	goto	u727
  2131  000694  D000               	nop2	
  2132                           
  2133                           ;LCD.c: 59: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  2134  000696  8482               	bsf	3970,2,c	;volatile
  2135  000698  5082               	movf	3970,w,c	;volatile
  2136  00069A  0B0F               	andlw	15
  2137  00069C  0920               	iorlw	32
  2138  00069E  6E82               	movwf	3970,c	;volatile
  2139  0006A0  9482               	bcf	3970,2,c	;volatile
  2140                           
  2141                           ;LCD.c: 60: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x80; PORTCbits.RC2 = 0;
  2142  0006A2  8482               	bsf	3970,2,c	;volatile
  2143  0006A4  5082               	movf	3970,w,c	;volatile
  2144  0006A6  0B0F               	andlw	15
  2145  0006A8  0980               	iorlw	128
  2146  0006AA  6E82               	movwf	3970,c	;volatile
  2147  0006AC  9482               	bcf	3970,2,c	;volatile
  2148                           
  2149                           ;LCD.c: 61: _delay((unsigned long)((10)*(10000000/4000.0)));
  2150  0006AE  0E21               	movlw	33
  2151  0006B0  6E05               	movwf	??_LCD_init& (0+255),c
  2152  0006B2  0E76               	movlw	118
  2153  0006B4                     u737:
  2154  0006B4  2EE8               	decfsz	wreg,f,c
  2155  0006B6  D7FE               	goto	u737
  2156  0006B8  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2157  0006BA  D7FC               	goto	u737
  2158  0006BC  D000               	nop2	
  2159                           
  2160                           ;LCD.c: 64: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  2161  0006BE  8482               	bsf	3970,2,c	;volatile
  2162  0006C0  5082               	movf	3970,w,c	;volatile
  2163  0006C2  0B0F               	andlw	15
  2164  0006C4  6E82               	movwf	3970,c	;volatile
  2165  0006C6  9482               	bcf	3970,2,c	;volatile
  2166                           
  2167                           ;LCD.c: 65: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0xF0; PORTCbits.RC2 = 0;
  2168  0006C8  8482               	bsf	3970,2,c	;volatile
  2169  0006CA  5082               	movf	3970,w,c	;volatile
  2170  0006CC  0B0F               	andlw	15
  2171  0006CE  09F0               	iorlw	240
  2172  0006D0  6E82               	movwf	3970,c	;volatile
  2173  0006D2  9482               	bcf	3970,2,c	;volatile
  2174                           
  2175                           ;LCD.c: 66: _delay((unsigned long)((10)*(10000000/4000.0)));
  2176  0006D4  0E21               	movlw	33
  2177  0006D6  6E05               	movwf	??_LCD_init& (0+255),c
  2178  0006D8  0E76               	movlw	118
  2179  0006DA                     u747:
  2180  0006DA  2EE8               	decfsz	wreg,f,c
  2181  0006DC  D7FE               	goto	u747
  2182  0006DE  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2183  0006E0  D7FC               	goto	u747
  2184  0006E2  D000               	nop2	
  2185                           
  2186                           ;LCD.c: 69: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  2187  0006E4  8482               	bsf	3970,2,c	;volatile
  2188  0006E6  5082               	movf	3970,w,c	;volatile
  2189  0006E8  0B0F               	andlw	15
  2190  0006EA  6E82               	movwf	3970,c	;volatile
  2191  0006EC  9482               	bcf	3970,2,c	;volatile
  2192                           
  2193                           ;LCD.c: 70: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x10; PORTCbits.RC2 = 0;
  2194  0006EE  8482               	bsf	3970,2,c	;volatile
  2195  0006F0  5082               	movf	3970,w,c	;volatile
  2196  0006F2  0B0F               	andlw	15
  2197  0006F4  0910               	iorlw	16
  2198  0006F6  6E82               	movwf	3970,c	;volatile
  2199  0006F8  9482               	bcf	3970,2,c	;volatile
  2200                           
  2201                           ;LCD.c: 71: _delay((unsigned long)((10)*(10000000/4000.0)));
  2202  0006FA  0E21               	movlw	33
  2203  0006FC  6E05               	movwf	??_LCD_init& (0+255),c
  2204  0006FE  0E76               	movlw	118
  2205  000700                     u757:
  2206  000700  2EE8               	decfsz	wreg,f,c
  2207  000702  D7FE               	goto	u757
  2208  000704  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2209  000706  D7FC               	goto	u757
  2210  000708  D000               	nop2	
  2211                           
  2212                           ;LCD.c: 74: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  2213  00070A  8482               	bsf	3970,2,c	;volatile
  2214  00070C  5082               	movf	3970,w,c	;volatile
  2215  00070E  0B0F               	andlw	15
  2216  000710  6E82               	movwf	3970,c	;volatile
  2217  000712  9482               	bcf	3970,2,c	;volatile
  2218                           
  2219                           ;LCD.c: 75: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x60; PORTCbits.RC2 = 0;
  2220  000714  8482               	bsf	3970,2,c	;volatile
  2221  000716  5082               	movf	3970,w,c	;volatile
  2222  000718  0B0F               	andlw	15
  2223  00071A  0960               	iorlw	96
  2224  00071C  6E82               	movwf	3970,c	;volatile
  2225  00071E  9482               	bcf	3970,2,c	;volatile
  2226                           
  2227                           ;LCD.c: 76: _delay((unsigned long)((10)*(10000000/4000.0)));
  2228  000720  0E21               	movlw	33
  2229  000722  6E05               	movwf	??_LCD_init& (0+255),c
  2230  000724  0E76               	movlw	118
  2231  000726                     u767:
  2232  000726  2EE8               	decfsz	wreg,f,c
  2233  000728  D7FE               	goto	u767
  2234  00072A  2E05               	decfsz	??_LCD_init& (0+255),f,c
  2235  00072C  D7FC               	goto	u767
  2236  00072E  D000               	nop2	
  2237                           
  2238                           ;LCD.c: 79: place_lcd_cursor(0,0);
  2239  000730  0E00               	movlw	0
  2240  000732  6E01               	movwf	place_lcd_cursor@y,c
  2241  000734  0E00               	movlw	0
  2242  000736  EC00  F007         	call	_place_lcd_cursor
  2243  00073A  0012               	return	
  2244  00073C                     __end_of_LCD_init:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodl	equ	0xFF3
  2251                           wreg	equ	0xFE8
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _place_lcd_cursor *****************
  2255 ;; Defined at:
  2256 ;;		line 125 in file "../LCD.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  x               1    wreg     unsigned char 
  2259 ;;  y               1    0[COMRAM] unsigned char 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  x               1    2[COMRAM] unsigned char 
  2262 ;;  position        1    3[COMRAM] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;		None               void
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0, prodl, prodh
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2272 ;;      Params:         1       0       0       0       0       0       0
  2273 ;;      Locals:         2       0       0       0       0       0       0
  2274 ;;      Temps:          1       0       0       0       0       0       0
  2275 ;;      Totals:         4       0       0       0       0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;;		_LCD_init
  2283 ;;		_LCD_write
  2284 ;;		_i2c_Read
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text17
  2289  000E00                     __ptext17:
  2290                           	opt stack 0
  2291  000E00                     _place_lcd_cursor:
  2292                           	opt stack 30
  2293                           
  2294                           ;incstack = 0
  2295                           ;place_lcd_cursor@x stored from wreg
  2296  000E00  6E03               	movwf	place_lcd_cursor@x,c
  2297                           
  2298                           ;LCD.c: 128: yPos = y;
  2299  000E02  C001  F035         	movff	place_lcd_cursor@y,_yPos
  2300  000E06  6A36               	clrf	_yPos+1,c
  2301                           
  2302                           ;LCD.c: 131: unsigned char position = (0x40*y)+x;
  2303  000E08  5001               	movf	place_lcd_cursor@y,w,c
  2304  000E0A  0D40               	mullw	64
  2305  000E0C  50F3               	movf	prodl,w,c
  2306  000E0E  2403               	addwf	place_lcd_cursor@x,w,c
  2307  000E10  6E04               	movwf	place_lcd_cursor@position,c
  2308                           
  2309                           ;LCD.c: 132: LATCbits.LC3 = 0;
  2310  000E12  968B               	bcf	3979,3,c	;volatile
  2311                           
  2312                           ;LCD.c: 135: LATCbits.LC2 = 1;
  2313  000E14  848B               	bsf	3979,2,c	;volatile
  2314                           
  2315                           ;LCD.c: 136: LATC = LATC & 0b00001111;
  2316  000E16  508B               	movf	3979,w,c	;volatile
  2317  000E18  0B0F               	andlw	15
  2318  000E1A  6E8B               	movwf	3979,c	;volatile
  2319                           
  2320                           ;LCD.c: 137: LATC = (LATC | (position & 0b11110000)) | 0b10000000;
  2321  000E1C  5004               	movf	place_lcd_cursor@position,w,c
  2322  000E1E  0BF0               	andlw	240
  2323  000E20  108B               	iorwf	3979,w,c	;volatile
  2324  000E22  0980               	iorlw	128
  2325  000E24  6E8B               	movwf	3979,c	;volatile
  2326                           
  2327                           ;LCD.c: 138: LATCbits.LC2 = 0;
  2328  000E26  948B               	bcf	3979,2,c	;volatile
  2329                           
  2330                           ;LCD.c: 141: LATCbits.LC2 = 1;
  2331  000E28  848B               	bsf	3979,2,c	;volatile
  2332                           
  2333                           ;LCD.c: 142: LATC = (LATC & 0b00001111) | (position << 4);
  2334  000E2A  C004  F002         	movff	place_lcd_cursor@position,??_place_lcd_cursor
  2335  000E2E  3A02               	swapf	??_place_lcd_cursor,f,c
  2336  000E30  0EF0               	movlw	240
  2337  000E32  1602               	andwf	??_place_lcd_cursor,f,c
  2338  000E34  508B               	movf	3979,w,c	;volatile
  2339  000E36  0B0F               	andlw	15
  2340  000E38  1002               	iorwf	??_place_lcd_cursor,w,c
  2341  000E3A  6E8B               	movwf	3979,c	;volatile
  2342                           
  2343                           ;LCD.c: 143: LATCbits.LC2 = 0;
  2344  000E3C  948B               	bcf	3979,2,c	;volatile
  2345                           
  2346                           ;LCD.c: 144: _delay((unsigned long)((1)*(10000000/4000.0)));
  2347  000E3E  0E04               	movlw	4
  2348  000E40  6E02               	movwf	??_place_lcd_cursor& (0+255),c
  2349  000E42  0E3E               	movlw	62
  2350  000E44                     u777:
  2351  000E44  2EE8               	decfsz	wreg,f,c
  2352  000E46  D7FE               	goto	u777
  2353  000E48  2E02               	decfsz	??_place_lcd_cursor& (0+255),f,c
  2354  000E4A  D7FC               	goto	u777
  2355  000E4C  0012               	return	
  2356  000E4E                     __end_of_place_lcd_cursor:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodl	equ	0xFF3
  2363                           wreg	equ	0xFE8
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _Delay100ms *****************
  2367 ;; Defined at:
  2368 ;;		line 147 in file "../LCD.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  i               2    1[COMRAM] int 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2382 ;;      Params:         0       0       0       0       0       0       0
  2383 ;;      Locals:         2       0       0       0       0       0       0
  2384 ;;      Temps:          1       0       0       0       0       0       0
  2385 ;;      Totals:         3       0       0       0       0       0       0
  2386 ;;Total ram usage:        3 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_LCD_init
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text18
  2396  000F02                     __ptext18:
  2397                           	opt stack 0
  2398  000F02                     _Delay100ms:
  2399                           	opt stack 29
  2400                           
  2401                           ;LCD.c: 149: for(i=0;i<100;i++)
  2402                           
  2403                           ;incstack = 0
  2404  000F02  0E00               	movlw	0
  2405  000F04  6E03               	movwf	Delay100ms@i+1,c
  2406  000F06  0E00               	movlw	0
  2407  000F08  6E02               	movwf	Delay100ms@i,c
  2408  000F0A  5003               	movf	Delay100ms@i+1,w,c
  2409  000F0C  0A80               	xorlw	128
  2410  000F0E  0F80               	addlw	-128
  2411  000F10  0E64               	movlw	100
  2412  000F12  B4D8               	btfsc	status,2,c
  2413  000F14  5C02               	subwf	Delay100ms@i,w,c
  2414  000F16  B0D8               	btfsc	status,0,c
  2415  000F18  0012               	return	
  2416                           
  2417                           ;LCD.c: 150: {
  2418                           ;LCD.c: 151: _delay((unsigned long)((1)*(10000000/4000.0)));
  2419  000F1A  0E04               	movlw	4
  2420  000F1C  6E01               	movwf	??_Delay100ms& (0+255),c
  2421  000F1E  0E3E               	movlw	62
  2422  000F20                     u787:
  2423  000F20  2EE8               	decfsz	wreg,f,c
  2424  000F22  D7FE               	goto	u787
  2425  000F24  2E01               	decfsz	??_Delay100ms& (0+255),f,c
  2426  000F26  D7FC               	goto	u787
  2427  000F28  4A02               	infsnz	Delay100ms@i,f,c
  2428  000F2A  2A03               	incf	Delay100ms@i+1,f,c
  2429  000F2C  D7EE               	goto	L1
  2430  000F2E                     __end_of_Delay100ms:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodl	equ	0xFF3
  2437                           wreg	equ	0xFE8
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _LCD_convertWrite *****************
  2441 ;; Defined at:
  2442 ;;		line 117 in file "../LCD.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  data            1    wreg     unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  data            1   16[COMRAM] unsigned char 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;		None               void
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, prodl, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2456 ;;      Params:         0       0       0       0       0       0       0
  2457 ;;      Locals:         3       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0
  2459 ;;      Totals:         3       0       0       0       0       0       0
  2460 ;;Total ram usage:        3 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    1
  2463 ;; This function calls:
  2464 ;;		_LCD_writeChar
  2465 ;;		___awdiv
  2466 ;;		___awmod
  2467 ;; This function is called by:
  2468 ;;		_main
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text19
  2473  000CA0                     __ptext19:
  2474                           	opt stack 0
  2475  000CA0                     _LCD_convertWrite:
  2476                           	opt stack 29
  2477                           
  2478                           ;incstack = 0
  2479                           ;LCD_convertWrite@data stored from wreg
  2480  000CA0  6E11               	movwf	LCD_convertWrite@data,c
  2481                           
  2482                           ;LCD.c: 119: LCD_writeChar((data / 100) + 0x30);
  2483  000CA2  C011  F007         	movff	LCD_convertWrite@data,___awdiv@dividend
  2484  000CA6  6A08               	clrf	___awdiv@dividend+1,c
  2485  000CA8  0E00               	movlw	0
  2486  000CAA  6E0A               	movwf	___awdiv@divisor+1,c
  2487  000CAC  0E64               	movlw	100
  2488  000CAE  6E09               	movwf	___awdiv@divisor,c
  2489  000CB0  ECE5  F004         	call	___awdiv	;wreg free
  2490  000CB4  5007               	movf	?___awdiv,w,c
  2491  000CB6  0F30               	addlw	48
  2492  000CB8  EC4B  F007         	call	_LCD_writeChar
  2493                           
  2494                           ;LCD.c: 120: LCD_writeChar(((data % 100) / 10) + 0x30);
  2495  000CBC  0E00               	movlw	0
  2496  000CBE  6E04               	movwf	___awmod@divisor+1,c
  2497  000CC0  0E64               	movlw	100
  2498  000CC2  6E03               	movwf	___awmod@divisor,c
  2499  000CC4  C011  F001         	movff	LCD_convertWrite@data,___awmod@dividend
  2500  000CC8  6A02               	clrf	___awmod@dividend+1,c
  2501  000CCA  EC83  F005         	call	___awmod	;wreg free
  2502  000CCE  C001  F007         	movff	?___awmod,___awdiv@dividend
  2503  000CD2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2504  000CD6  0E00               	movlw	0
  2505  000CD8  6E0A               	movwf	___awdiv@divisor+1,c
  2506  000CDA  0E0A               	movlw	10
  2507  000CDC  6E09               	movwf	___awdiv@divisor,c
  2508  000CDE  ECE5  F004         	call	___awdiv	;wreg free
  2509  000CE2  5007               	movf	?___awdiv,w,c
  2510  000CE4  0F30               	addlw	48
  2511  000CE6  EC4B  F007         	call	_LCD_writeChar
  2512                           
  2513                           ;LCD.c: 121: LCD_writeChar(((data % 100) % 10) + 0x30);
  2514  000CEA  0E00               	movlw	0
  2515  000CEC  6E04               	movwf	___awmod@divisor+1,c
  2516  000CEE  0E64               	movlw	100
  2517  000CF0  6E03               	movwf	___awmod@divisor,c
  2518  000CF2  C011  F001         	movff	LCD_convertWrite@data,___awmod@dividend
  2519  000CF6  6A02               	clrf	___awmod@dividend+1,c
  2520  000CF8  EC83  F005         	call	___awmod	;wreg free
  2521  000CFC  C001  F00F         	movff	?___awmod,_LCD_convertWrite$2143
  2522  000D00  C002  F010         	movff	?___awmod+1,_LCD_convertWrite$2143+1
  2523                           
  2524                           ;LCD.c: 121: LCD_writeChar(((data % 100) % 10) + 0x30);
  2525  000D04  C00F  F001         	movff	_LCD_convertWrite$2143,___awmod@dividend
  2526  000D08  C010  F002         	movff	_LCD_convertWrite$2143+1,___awmod@dividend+1
  2527  000D0C  0E00               	movlw	0
  2528  000D0E  6E04               	movwf	___awmod@divisor+1,c
  2529  000D10  0E0A               	movlw	10
  2530  000D12  6E03               	movwf	___awmod@divisor,c
  2531  000D14  EC83  F005         	call	___awmod	;wreg free
  2532  000D18  5001               	movf	?___awmod,w,c
  2533  000D1A  0F30               	addlw	48
  2534  000D1C  EC4B  F007         	call	_LCD_writeChar
  2535  000D20  0012               	return	
  2536  000D22                     __end_of_LCD_convertWrite:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           prodl	equ	0xFF3
  2543                           wreg	equ	0xFE8
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function ___awmod *****************
  2547 ;; Defined at:
  2548 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  dividend        2    0[COMRAM] int 
  2551 ;;  divisor         2    2[COMRAM] int 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  sign            1    5[COMRAM] unsigned char 
  2554 ;;  counter         1    4[COMRAM] unsigned char 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  2    0[COMRAM] int 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, prodl
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2564 ;;      Params:         4       0       0       0       0       0       0
  2565 ;;      Locals:         2       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0
  2567 ;;      Totals:         6       0       0       0       0       0       0
  2568 ;;Total ram usage:        6 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_LCD_convertWrite
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text20
  2578  000B06                     __ptext20:
  2579                           	opt stack 0
  2580  000B06                     ___awmod:
  2581                           	opt stack 29
  2582                           
  2583                           ;incstack = 0
  2584  000B06  0E00               	movlw	0
  2585  000B08  6E06               	movwf	___awmod@sign,c
  2586  000B0A  5002               	movf	___awmod@dividend+1,w,c
  2587  000B0C  0A80               	xorlw	128
  2588  000B0E  6EF3               	movwf	prodl,c
  2589  000B10  0E80               	movlw	128
  2590  000B12  5CF3               	subwf	prodl,w,c
  2591  000B14  0E00               	movlw	0
  2592  000B16  B4D8               	btfsc	status,2,c
  2593  000B18  5C01               	subwf	___awmod@dividend,w,c
  2594  000B1A  B0D8               	btfsc	status,0,c
  2595  000B1C  D006               	goto	l1695
  2596  000B1E  6C01               	negf	___awmod@dividend,c
  2597  000B20  1E02               	comf	___awmod@dividend+1,f,c
  2598  000B22  B0D8               	btfsc	status,0,c
  2599  000B24  2A02               	incf	___awmod@dividend+1,f,c
  2600  000B26  0E01               	movlw	1
  2601  000B28  6E06               	movwf	___awmod@sign,c
  2602  000B2A                     l1695:
  2603  000B2A  5004               	movf	___awmod@divisor+1,w,c
  2604  000B2C  0A80               	xorlw	128
  2605  000B2E  6EF3               	movwf	prodl,c
  2606  000B30  0E80               	movlw	128
  2607  000B32  5CF3               	subwf	prodl,w,c
  2608  000B34  0E00               	movlw	0
  2609  000B36  B4D8               	btfsc	status,2,c
  2610  000B38  5C03               	subwf	___awmod@divisor,w,c
  2611  000B3A  B0D8               	btfsc	status,0,c
  2612  000B3C  D004               	goto	l1699
  2613  000B3E  6C03               	negf	___awmod@divisor,c
  2614  000B40  1E04               	comf	___awmod@divisor+1,f,c
  2615  000B42  B0D8               	btfsc	status,0,c
  2616  000B44  2A04               	incf	___awmod@divisor+1,f,c
  2617  000B46                     l1699:
  2618  000B46  5004               	movf	___awmod@divisor+1,w,c
  2619  000B48  1003               	iorwf	___awmod@divisor,w,c
  2620  000B4A  B4D8               	btfsc	status,2,c
  2621  000B4C  D018               	goto	l1715
  2622  000B4E  0E01               	movlw	1
  2623  000B50  6E05               	movwf	___awmod@counter,c
  2624  000B52  D004               	goto	l1705
  2625  000B54                     l1703:
  2626  000B54  90D8               	bcf	status,0,c
  2627  000B56  3603               	rlcf	___awmod@divisor,f,c
  2628  000B58  3604               	rlcf	___awmod@divisor+1,f,c
  2629  000B5A  2A05               	incf	___awmod@counter,f,c
  2630  000B5C                     l1705:
  2631  000B5C  AE04               	btfss	___awmod@divisor+1,7,c
  2632  000B5E  D7FA               	goto	l1703
  2633  000B60                     l1707:
  2634  000B60  5003               	movf	___awmod@divisor,w,c
  2635  000B62  5C01               	subwf	___awmod@dividend,w,c
  2636  000B64  5004               	movf	___awmod@divisor+1,w,c
  2637  000B66  5802               	subwfb	___awmod@dividend+1,w,c
  2638  000B68  A0D8               	btfss	status,0,c
  2639  000B6A  D004               	goto	l1711
  2640  000B6C  5003               	movf	___awmod@divisor,w,c
  2641  000B6E  5E01               	subwf	___awmod@dividend,f,c
  2642  000B70  5004               	movf	___awmod@divisor+1,w,c
  2643  000B72  5A02               	subwfb	___awmod@dividend+1,f,c
  2644  000B74                     l1711:
  2645  000B74  90D8               	bcf	status,0,c
  2646  000B76  3204               	rrcf	___awmod@divisor+1,f,c
  2647  000B78  3203               	rrcf	___awmod@divisor,f,c
  2648  000B7A  2E05               	decfsz	___awmod@counter,f,c
  2649  000B7C  D7F1               	goto	l1707
  2650  000B7E                     l1715:
  2651  000B7E  5006               	movf	___awmod@sign,w,c
  2652  000B80  B4D8               	btfsc	status,2,c
  2653  000B82  D004               	goto	l1719
  2654  000B84  6C01               	negf	___awmod@dividend,c
  2655  000B86  1E02               	comf	___awmod@dividend+1,f,c
  2656  000B88  B0D8               	btfsc	status,0,c
  2657  000B8A  2A02               	incf	___awmod@dividend+1,f,c
  2658  000B8C                     l1719:
  2659  000B8C  C001  F001         	movff	___awmod@dividend,?___awmod
  2660  000B90  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2661  000B94  0012               	return	
  2662  000B96                     __end_of___awmod:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           prodl	equ	0xFF3
  2669                           wreg	equ	0xFE8
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function ___awdiv *****************
  2673 ;; Defined at:
  2674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  dividend        2    6[COMRAM] int 
  2677 ;;  divisor         2    8[COMRAM] int 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  quotient        2   12[COMRAM] int 
  2680 ;;  sign            1   11[COMRAM] unsigned char 
  2681 ;;  counter         1   10[COMRAM] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  2    6[COMRAM] int 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0, prodl
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2691 ;;      Params:         4       0       0       0       0       0       0
  2692 ;;      Locals:         4       0       0       0       0       0       0
  2693 ;;      Temps:          0       0       0       0       0       0       0
  2694 ;;      Totals:         8       0       0       0       0       0       0
  2695 ;;Total ram usage:        8 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;;		_LCD_convertWrite
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           	psect	text21
  2706  0009CA                     __ptext21:
  2707                           	opt stack 0
  2708  0009CA                     ___awdiv:
  2709                           	opt stack 30
  2710                           
  2711                           ;incstack = 0
  2712  0009CA  0E00               	movlw	0
  2713  0009CC  6E0C               	movwf	___awdiv@sign,c
  2714  0009CE  500A               	movf	___awdiv@divisor+1,w,c
  2715  0009D0  0A80               	xorlw	128
  2716  0009D2  6EF3               	movwf	prodl,c
  2717  0009D4  0E80               	movlw	128
  2718  0009D6  5CF3               	subwf	prodl,w,c
  2719  0009D8  0E00               	movlw	0
  2720  0009DA  B4D8               	btfsc	status,2,c
  2721  0009DC  5C09               	subwf	___awdiv@divisor,w,c
  2722  0009DE  B0D8               	btfsc	status,0,c
  2723  0009E0  D006               	goto	l1651
  2724  0009E2  6C09               	negf	___awdiv@divisor,c
  2725  0009E4  1E0A               	comf	___awdiv@divisor+1,f,c
  2726  0009E6  B0D8               	btfsc	status,0,c
  2727  0009E8  2A0A               	incf	___awdiv@divisor+1,f,c
  2728  0009EA  0E01               	movlw	1
  2729  0009EC  6E0C               	movwf	___awdiv@sign,c
  2730  0009EE                     l1651:
  2731  0009EE  5008               	movf	___awdiv@dividend+1,w,c
  2732  0009F0  0A80               	xorlw	128
  2733  0009F2  6EF3               	movwf	prodl,c
  2734  0009F4  0E80               	movlw	128
  2735  0009F6  5CF3               	subwf	prodl,w,c
  2736  0009F8  0E00               	movlw	0
  2737  0009FA  B4D8               	btfsc	status,2,c
  2738  0009FC  5C07               	subwf	___awdiv@dividend,w,c
  2739  0009FE  B0D8               	btfsc	status,0,c
  2740  000A00  D006               	goto	l1657
  2741  000A02  6C07               	negf	___awdiv@dividend,c
  2742  000A04  1E08               	comf	___awdiv@dividend+1,f,c
  2743  000A06  B0D8               	btfsc	status,0,c
  2744  000A08  2A08               	incf	___awdiv@dividend+1,f,c
  2745  000A0A  0E01               	movlw	1
  2746  000A0C  1A0C               	xorwf	___awdiv@sign,f,c
  2747  000A0E                     l1657:
  2748  000A0E  0E00               	movlw	0
  2749  000A10  6E0E               	movwf	___awdiv@quotient+1,c
  2750  000A12  0E00               	movlw	0
  2751  000A14  6E0D               	movwf	___awdiv@quotient,c
  2752  000A16  500A               	movf	___awdiv@divisor+1,w,c
  2753  000A18  1009               	iorwf	___awdiv@divisor,w,c
  2754  000A1A  B4D8               	btfsc	status,2,c
  2755  000A1C  D01C               	goto	l1679
  2756  000A1E  0E01               	movlw	1
  2757  000A20  6E0B               	movwf	___awdiv@counter,c
  2758  000A22  D004               	goto	l1665
  2759  000A24                     l1663:
  2760  000A24  90D8               	bcf	status,0,c
  2761  000A26  3609               	rlcf	___awdiv@divisor,f,c
  2762  000A28  360A               	rlcf	___awdiv@divisor+1,f,c
  2763  000A2A  2A0B               	incf	___awdiv@counter,f,c
  2764  000A2C                     l1665:
  2765  000A2C  AE0A               	btfss	___awdiv@divisor+1,7,c
  2766  000A2E  D7FA               	goto	l1663
  2767  000A30                     l1667:
  2768  000A30  90D8               	bcf	status,0,c
  2769  000A32  360D               	rlcf	___awdiv@quotient,f,c
  2770  000A34  360E               	rlcf	___awdiv@quotient+1,f,c
  2771  000A36  5009               	movf	___awdiv@divisor,w,c
  2772  000A38  5C07               	subwf	___awdiv@dividend,w,c
  2773  000A3A  500A               	movf	___awdiv@divisor+1,w,c
  2774  000A3C  5808               	subwfb	___awdiv@dividend+1,w,c
  2775  000A3E  A0D8               	btfss	status,0,c
  2776  000A40  D005               	goto	l1675
  2777  000A42  5009               	movf	___awdiv@divisor,w,c
  2778  000A44  5E07               	subwf	___awdiv@dividend,f,c
  2779  000A46  500A               	movf	___awdiv@divisor+1,w,c
  2780  000A48  5A08               	subwfb	___awdiv@dividend+1,f,c
  2781  000A4A  800D               	bsf	___awdiv@quotient,0,c
  2782  000A4C                     l1675:
  2783  000A4C  90D8               	bcf	status,0,c
  2784  000A4E  320A               	rrcf	___awdiv@divisor+1,f,c
  2785  000A50  3209               	rrcf	___awdiv@divisor,f,c
  2786  000A52  2E0B               	decfsz	___awdiv@counter,f,c
  2787  000A54  D7ED               	goto	l1667
  2788  000A56                     l1679:
  2789  000A56  500C               	movf	___awdiv@sign,w,c
  2790  000A58  B4D8               	btfsc	status,2,c
  2791  000A5A  D004               	goto	l1683
  2792  000A5C  6C0D               	negf	___awdiv@quotient,c
  2793  000A5E  1E0E               	comf	___awdiv@quotient+1,f,c
  2794  000A60  B0D8               	btfsc	status,0,c
  2795  000A62  2A0E               	incf	___awdiv@quotient+1,f,c
  2796  000A64                     l1683:
  2797  000A64  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2798  000A68  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2799  000A6C  0012               	return	
  2800  000A6E                     __end_of___awdiv:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodl	equ	0xFF3
  2807                           wreg	equ	0xFE8
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _LCD_writeChar *****************
  2811 ;; Defined at:
  2812 ;;		line 103 in file "../LCD.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  data            1    wreg     unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  data            1    3[COMRAM] unsigned char 
  2817 ;;  lower           1    2[COMRAM] unsigned char 
  2818 ;;  upper           1    1[COMRAM] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;		None               void
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2828 ;;      Params:         0       0       0       0       0       0       0
  2829 ;;      Locals:         3       0       0       0       0       0       0
  2830 ;;      Temps:          1       0       0       0       0       0       0
  2831 ;;      Totals:         4       0       0       0       0       0       0
  2832 ;;Total ram usage:        4 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_LCD_write
  2838 ;;		_LCD_convertWrite
  2839 ;;		_i2c_Read
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text22
  2844  000E96                     __ptext22:
  2845                           	opt stack 0
  2846  000E96                     _LCD_writeChar:
  2847                           	opt stack 29
  2848                           
  2849                           ;incstack = 0
  2850                           ;LCD_writeChar@data stored from wreg
  2851  000E96  6E04               	movwf	LCD_writeChar@data,c
  2852                           
  2853                           ;LCD.c: 106: unsigned char upper = data & 0b11110000;
  2854  000E98  5004               	movf	LCD_writeChar@data,w,c
  2855  000E9A  0BF0               	andlw	240
  2856  000E9C  6E02               	movwf	LCD_writeChar@upper,c
  2857                           
  2858                           ;LCD.c: 107: unsigned char lower = (data << 4);
  2859  000E9E  3804               	swapf	LCD_writeChar@data,w,c
  2860  000EA0  0BF0               	andlw	240
  2861  000EA2  6E03               	movwf	LCD_writeChar@lower,c
  2862                           
  2863                           ;LCD.c: 110: LATCbits.LC3 = 1;
  2864  000EA4  868B               	bsf	3979,3,c	;volatile
  2865                           
  2866                           ;LCD.c: 111: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | upper; LATCbits.LC2 = 0;
  2867  000EA6  848B               	bsf	3979,2,c	;volatile
  2868  000EA8  508B               	movf	3979,w,c	;volatile
  2869  000EAA  0B0F               	andlw	15
  2870  000EAC  1002               	iorwf	LCD_writeChar@upper,w,c
  2871  000EAE  6E8B               	movwf	3979,c	;volatile
  2872  000EB0  948B               	bcf	3979,2,c	;volatile
  2873                           
  2874                           ;LCD.c: 112: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | lower; LATCbits.LC2 = 0;
  2875  000EB2  848B               	bsf	3979,2,c	;volatile
  2876  000EB4  508B               	movf	3979,w,c	;volatile
  2877  000EB6  0B0F               	andlw	15
  2878  000EB8  1003               	iorwf	LCD_writeChar@lower,w,c
  2879  000EBA  6E8B               	movwf	3979,c	;volatile
  2880  000EBC  948B               	bcf	3979,2,c	;volatile
  2881                           
  2882                           ;LCD.c: 113: _delay((unsigned long)((1)*(10000000/4000.0)));
  2883  000EBE  0E04               	movlw	4
  2884  000EC0  6E01               	movwf	??_LCD_writeChar& (0+255),c
  2885  000EC2  0E3E               	movlw	62
  2886  000EC4                     u797:
  2887  000EC4  2EE8               	decfsz	wreg,f,c
  2888  000EC6  D7FE               	goto	u797
  2889  000EC8  2E01               	decfsz	??_LCD_writeChar& (0+255),f,c
  2890  000ECA  D7FC               	goto	u797
  2891                           
  2892                           ;LCD.c: 114: LATCbits.LC3 = 0;
  2893  000ECC  968B               	bcf	3979,3,c	;volatile
  2894  000ECE  0012               	return	
  2895  000ED0                     __end_of_LCD_writeChar:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           prodl	equ	0xFF3
  2902                           wreg	equ	0xFE8
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _EPWM_Port_Init *****************
  2906 ;; Defined at:
  2907 ;;		line 6 in file "../DCMotor.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, status,2, status,0
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2921 ;;      Params:         0       0       0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text23
  2935  000DA2                     __ptext23:
  2936                           	opt stack 0
  2937  000DA2                     _EPWM_Port_Init:
  2938                           	opt stack 30
  2939                           
  2940                           ;DCMotor.c: 8: LATA = LATA & 0x00;
  2941                           
  2942                           ;incstack = 0
  2943  000DA2  0E00               	movlw	0
  2944  000DA4  6E89               	movwf	3977,c	;volatile
  2945                           
  2946                           ;DCMotor.c: 9: TRISA = TRISA & 0xFF;
  2947  000DA6  CF92 FF92          	movff	3986,3986	;volatile
  2948                           
  2949                           ;DCMotor.c: 10: ANSELA = ANSELA & 0x2F;
  2950  000DAA  010F               	movlb	15	; () banked
  2951  000DAC  5138               	movf	56,w,b	;volatile
  2952  000DAE  0B2F               	andlw	47
  2953  000DB0  010F               	movlb	15	; () banked
  2954  000DB2  6F38               	movwf	56,b	;volatile
  2955                           
  2956                           ; BSR set to: 15
  2957                           ;DCMotor.c: 12: LATB = LATB & 0x00;
  2958  000DB4  0E00               	movlw	0
  2959  000DB6  6E8A               	movwf	3978,c	;volatile
  2960                           
  2961                           ;DCMotor.c: 13: TRISB = TRISB & 0xDF;
  2962  000DB8  5093               	movf	3987,w,c	;volatile
  2963  000DBA  0BDF               	andlw	223
  2964  000DBC  6E93               	movwf	3987,c	;volatile
  2965                           
  2966                           ;DCMotor.c: 14: ANSELB = ANSELB & 0x1F;
  2967  000DBE  010F               	movlb	15	; () banked
  2968  000DC0  5139               	movf	57,w,b	;volatile
  2969  000DC2  0B1F               	andlw	31
  2970  000DC4  010F               	movlb	15	; () banked
  2971  000DC6  6F39               	movwf	57,b	;volatile
  2972                           
  2973                           ; BSR set to: 15
  2974                           ;DCMotor.c: 15: WPUB = 0x00;
  2975  000DC8  0E00               	movlw	0
  2976  000DCA  6E61               	movwf	3937,c	;volatile
  2977                           
  2978                           ; BSR set to: 15
  2979                           ;DCMotor.c: 17: LATCbits.LC1 = 0;
  2980  000DCC  928B               	bcf	3979,1,c	;volatile
  2981                           
  2982                           ; BSR set to: 15
  2983                           ;DCMotor.c: 18: TRISCbits.RC1 = 0;
  2984  000DCE  9294               	bcf	3988,1,c	;volatile
  2985                           
  2986                           ; BSR set to: 15
  2987                           ;DCMotor.c: 19: ANSELCbits.ANSC2 = 0;
  2988  000DD0  010F               	movlb	15	; () banked
  2989  000DD2  953A               	bcf	58,2,b	;volatile
  2990                           
  2991                           ; BSR set to: 15
  2992                           ;DCMotor.c: 21: LATD = LATD & 0x00;
  2993  000DD4  0E00               	movlw	0
  2994  000DD6  6E8C               	movwf	3980,c	;volatile
  2995                           
  2996                           ;DCMotor.c: 22: TRISD = TRISD & 0xFB;
  2997  000DD8  5095               	movf	3989,w,c	;volatile
  2998  000DDA  0BFB               	andlw	251
  2999  000DDC  6E95               	movwf	3989,c	;volatile
  3000                           
  3001                           ;DCMotor.c: 23: ANSELD = ANSELD & 0xFB;
  3002  000DDE  010F               	movlb	15	; () banked
  3003  000DE0  513B               	movf	59,w,b	;volatile
  3004  000DE2  0BFB               	andlw	251
  3005  000DE4  010F               	movlb	15	; () banked
  3006  000DE6  6F3B               	movwf	59,b	;volatile
  3007                           
  3008                           ; BSR set to: 15
  3009                           ;DCMotor.c: 25: LATE = LATE & 0x00;
  3010  000DE8  0E00               	movlw	0
  3011  000DEA  6E8D               	movwf	3981,c	;volatile
  3012                           
  3013                           ; BSR set to: 15
  3014                           ;DCMotor.c: 26: TRISE = TRISE & 0x05;
  3015  000DEC  5096               	movf	3990,w,c	;volatile
  3016  000DEE  0B05               	andlw	5
  3017  000DF0  6E96               	movwf	3990,c	;volatile
  3018                           
  3019                           ; BSR set to: 15
  3020                           ;DCMotor.c: 27: ANSELE = ANSELE & 0x05;
  3021  000DF2  010F               	movlb	15	; () banked
  3022  000DF4  513C               	movf	60,w,b	;volatile
  3023  000DF6  0B05               	andlw	5
  3024  000DF8  010F               	movlb	15	; () banked
  3025  000DFA  6F3C               	movwf	60,b	;volatile
  3026                           
  3027                           ; BSR set to: 15
  3028                           ;DCMotor.c: 29: INTCON2bits.nRBPU = 0x01;
  3029  000DFC  8EF1               	bsf	intcon2,7,c	;volatile
  3030                           
  3031                           ; BSR set to: 15
  3032  000DFE  0012               	return	
  3033  000E00                     __end_of_EPWM_Port_Init:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodl	equ	0xFF3
  3040                           intcon2	equ	0xFF1
  3041                           wreg	equ	0xFE8
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _EPWM2_Initialize *****************
  3045 ;; Defined at:
  3046 ;;		line 104 in file "../DCMotor.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;		None
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;		None
  3051 ;; Return value:  Size  Location     Type
  3052 ;;		None               void
  3053 ;; Registers used:
  3054 ;;		wreg, status,2
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3060 ;;      Params:         0       0       0       0       0       0       0
  3061 ;;      Locals:         0       0       0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0
  3063 ;;      Totals:         0       0       0       0       0       0       0
  3064 ;;Total ram usage:        0 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; This function calls:
  3067 ;;		Nothing
  3068 ;; This function is called by:
  3069 ;;		_main
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text24
  3074  000F2E                     __ptext24:
  3075                           	opt stack 0
  3076  000F2E                     _EPWM2_Initialize:
  3077                           	opt stack 30
  3078                           
  3079                           ;DCMotor.c: 109: CCP2CON = 0xBC;
  3080                           
  3081                           ; BSR set to: 15
  3082                           ;incstack = 0
  3083  000F2E  0EBC               	movlw	188
  3084  000F30  6E66               	movwf	3942,c	;volatile
  3085                           
  3086                           ;DCMotor.c: 112: ECCP2AS = 0x00;
  3087  000F32  0E00               	movlw	0
  3088  000F34  6E64               	movwf	3940,c	;volatile
  3089                           
  3090                           ;DCMotor.c: 115: PWM2CON = 0x80;
  3091  000F36  0E80               	movlw	128
  3092  000F38  6E65               	movwf	3941,c	;volatile
  3093                           
  3094                           ;DCMotor.c: 118: PSTR2CON = 0x00;
  3095  000F3A  0E00               	movlw	0
  3096  000F3C  6E63               	movwf	3939,c	;volatile
  3097                           
  3098                           ;DCMotor.c: 121: CCPR2L = 0x7F;
  3099  000F3E  0E7F               	movlw	127
  3100  000F40  6E67               	movwf	3943,c	;volatile
  3101                           
  3102                           ;DCMotor.c: 124: CCPR2H = 0x00;
  3103  000F42  0E00               	movlw	0
  3104  000F44  6E68               	movwf	3944,c	;volatile
  3105                           
  3106                           ;DCMotor.c: 127: CCPTMRS0bits.C2TSEL = 0x1;
  3107  000F46  010F               	movlb	15	; () banked
  3108  000F48  5149               	movf	73,w,b	;volatile
  3109  000F4A  0BE7               	andlw	-25
  3110  000F4C  0908               	iorlw	8
  3111  000F4E  010F               	movlb	15	; () banked
  3112  000F50  6F49               	movwf	73,b	;volatile
  3113                           
  3114                           ;DCMotor.c: 130: CCP2CON = 0b11001100;
  3115  000F52  0ECC               	movlw	204
  3116  000F54  6E66               	movwf	3942,c	;volatile
  3117                           
  3118                           ; BSR set to: 15
  3119  000F56  0012               	return	
  3120  000F58                     __end_of_EPWM2_Initialize:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodl	equ	0xFF3
  3127                           intcon2	equ	0xFF1
  3128                           wreg	equ	0xFE8
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _EPWM1_Initialize *****************
  3132 ;; Defined at:
  3133 ;;		line 33 in file "../DCMotor.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;		None               void
  3140 ;; Registers used:
  3141 ;;		wreg, status,2
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         0       0       0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0
  3150 ;;      Totals:         0       0       0       0       0       0       0
  3151 ;;Total ram usage:        0 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text25
  3161  000ED0                     __ptext25:
  3162                           	opt stack 0
  3163  000ED0                     _EPWM1_Initialize:
  3164                           	opt stack 30
  3165                           
  3166                           ;DCMotor.c: 38: CCP3CON = 0xBC;
  3167                           
  3168                           ; BSR set to: 15
  3169                           ;incstack = 0
  3170  000ED0  0EBC               	movlw	188
  3171  000ED2  010F               	movlb	15	; () banked
  3172  000ED4  6F5D               	movwf	93,b	;volatile
  3173                           
  3174                           ;DCMotor.c: 41: ECCP3AS = 0x00;
  3175  000ED6  0E00               	movlw	0
  3176  000ED8  010F               	movlb	15	; () banked
  3177  000EDA  6F5B               	movwf	91,b	;volatile
  3178                           
  3179                           ;DCMotor.c: 44: PWM3CON = 0x80;
  3180  000EDC  0E80               	movlw	128
  3181  000EDE  010F               	movlb	15	; () banked
  3182  000EE0  6F5C               	movwf	92,b	;volatile
  3183                           
  3184                           ;DCMotor.c: 47: PSTR3CON = 0x00;
  3185  000EE2  0E00               	movlw	0
  3186  000EE4  010F               	movlb	15	; () banked
  3187  000EE6  6F5A               	movwf	90,b	;volatile
  3188                           
  3189                           ;DCMotor.c: 50: CCPR3L = 0x7F;
  3190  000EE8  0E7F               	movlw	127
  3191  000EEA  010F               	movlb	15	; () banked
  3192  000EEC  6F5E               	movwf	94,b	;volatile
  3193                           
  3194                           ;DCMotor.c: 53: CCPR3H = 0x00;
  3195  000EEE  0E00               	movlw	0
  3196  000EF0  010F               	movlb	15	; () banked
  3197  000EF2  6F5F               	movwf	95,b	;volatile
  3198                           
  3199                           ;DCMotor.c: 56: CCPTMRS0bits.C3TSEL = 0x0;
  3200  000EF4  0E3F               	movlw	-193
  3201  000EF6  010F               	movlb	15	; () banked
  3202  000EF8  1749               	andwf	73,f,b	;volatile
  3203                           
  3204                           ;DCMotor.c: 59: CCP3CON = 0b11001100;
  3205  000EFA  0ECC               	movlw	204
  3206  000EFC  010F               	movlb	15	; () banked
  3207  000EFE  6F5D               	movwf	93,b	;volatile
  3208                           
  3209                           ; BSR set to: 15
  3210  000F00  0012               	return	
  3211  000F02                     __end_of_EPWM1_Initialize:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodl	equ	0xFF3
  3218                           intcon2	equ	0xFF1
  3219                           wreg	equ	0xFE8
  3220                           status	equ	0xFD8
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodl	equ	0xFF3
  3226                           intcon2	equ	0xFF1
  3227                           wreg	equ	0xFE8
  3228                           status	equ	0xFD8
  3229                           
  3230                           	psect	rparam
  3231  0000                     tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodl	equ	0xFF3
  3236                           intcon2	equ	0xFF1
  3237                           wreg	equ	0xFE8
  3238                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_write@data	PTR unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _Stop->_EPWM1_LoadDutyValue
    _Stop->_EPWM2_LoadDutyValue
    _EPWM2_LoadDutyValue->___fttol
    _EPWM1_LoadDutyValue->___fttol
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _LCD_write->_LCD_writeChar
    _LCD_write->_place_lcd_cursor
    _LCD_init->_place_lcd_cursor
    _LCD_convertWrite->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   11144
                                             48 COMRAM     4     4      0
                   _EPWM1_Initialize
                   _EPWM2_Initialize
                     _EPWM_Port_Init
                   _LCD_convertWrite
                           _LCD_init
                          _LCD_write
                      _Measure_Pulse
                         _Send_Pulse
                               _Stop
                    _TMR2_Initialize
                    _TMR4_Initialize
                            ___awdiv
                           _i2c_Init
                      _i2c_Port_Init
                    _lineSensor_init
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _lineSensor_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Port_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Stop                                                 0     0      0    7656
                _EPWM1_LoadDutyValue
                _EPWM2_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _EPWM2_LoadDutyValue                                  6     4      2    3828
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  6     4      2    3828
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     251
                                             27 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    1790
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    1484
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1338
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Send_Pulse                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Measure_Pulse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_write                                            6     4      2     653
                                              4 COMRAM     6     4      2
                      _LCD_writeChar
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0     406
                                              4 COMRAM     1     1      0
                         _Delay100ms
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _place_lcd_cursor                                     4     3      1     376
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Delay100ms                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_convertWrite                                     3     3      0    1411
                                             14 COMRAM     3     3      0
                      _LCD_writeChar
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     614
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     618
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_Port_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_Initialize
   _EPWM2_Initialize
   _EPWM_Port_Init
   _LCD_convertWrite
     _LCD_writeChar
     ___awdiv
       ___awmod (ARG)
     ___awmod
   _LCD_init
     _Delay100ms
     _place_lcd_cursor
   _LCD_write
     _LCD_writeChar
     _place_lcd_cursor
   _Measure_Pulse
   _Send_Pulse
   _Stop
     _EPWM1_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _EPWM2_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _TMR2_Initialize
   _TMR4_Initialize
   ___awdiv
     ___awmod (ARG)
   _i2c_Init
   _i2c_Port_Init
   _lineSensor_init
   _place_lcd_cursor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      37       1       57.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      37       9        0.0%
DATA                 0      0      37      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri May 08 14:10:31 2015

__size_of_EPWM2_LoadDutyValue 0080                            u81 0842                  ___awdiv@sign 000C  
              ?_i2c_Port_Init 0001                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l344 0FAC                           l941 0932                           l953 097E  
                         l945 0940                           l955 099C                           l947 094A  
                         l957 09A6                           l949 0968                           l983 087E  
                         l977 0858                           l997 08B0                  __CFG_CPB$OFF 000000  
                         u101 0868                           u151 074C                           u170 0784  
                         _PR2 000FBB                           u175 077C                           _PR4 000F52  
                __CFG_CPD$OFF 000000                           u707 0654                           u717 0670  
                         u727 068C                           u737 06B4                           u747 06DA  
                         u757 0700                           u767 0726                           u687 0AFA  
                         u777 0E44                           u697 0638                           u787 0F20  
                         u797 0EC4                  ___awmod@sign 0006               _TMR2_Initialize 1000  
                         wreg 000FE8      __end_of_EPWM2_Initialize 0F58                    _Delay100ms 0F02  
                        l1001 08C0                          l1011 08E8                          l1007 08D8  
                        l1027 0E72                          l1037 0766                          l1055 07D2  
                        l1073 0820                          l1065 07FA                          l1067 0806  
                        l1059 07E2                          l1069 080A                          l1711 0B74  
                        l1703 0B54                          l1705 0B5C                          l1651 09EE  
                        l1707 0B60                          l1715 0B7E                          l1731 0C58  
                        l1733 0C78                          l1725 0C26                          l1663 0A24  
                        l1719 0B8C                          l1735 0C7C                          l1665 0A2C  
                        l1657 0A0E                          l1683 0A64                          l1675 0A4C  
                        l1667 0A30                          l1765 0AB4                          l1679 0A56  
                        l1695 0B2A                          l1699 0B46                          _ADON 007E10  
                        STR_1 0601          LCD_convertWrite@data 0011                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _TMR2 000FBC                          _TMR4 000F53  
                        _WPUB 000F61                          _Stop 0F7C                          _main 0A6E  
                ___ftpack@arg 0001                          _yPos 0035                  ___ftpack@exp 0004  
               __CFG_BORV$190 000000                 _Measure_Pulse 1010                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000         ??_EPWM1_LoadDutyValue 002D  
                ___ftmul@cntr 001A                  ___ftmul@sign 001B            __size_of_LCD_write 0084  
                ___fttol@exp1 002A                  ___fttol@lval 0026              __end_of_LCD_init 073C  
                       ?_Stop 0001                         ?_main 0001               __end_of___awdiv 0A6E  
             __end_of___awmod 0B96               __end_of___ftmul 0922               ___awdiv@divisor 0009  
                       _T1CON 000FCD               __end_of___fttol 0832                         _T2CON 000FBA  
                       _T4CON 000F51               ___awdiv@counter 000B                         _TMR1H 000FCF  
                       _TMR1L 000FCE                         _PORTC 000F82                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000               _TMR4_Initialize 0FD6                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000        __size_of_LCD_writeChar 003A                __CFG_EBTRB$OFF 000000  
               ___awtoft@sign 000C            __CFG_MCLRE$EXTMCLR 000000                 ___ftpack@sign 0005  
                       tablat 000FF5       __end_of_lineSensor_init 101E                         status 000FD8  
              ?_Measure_Pulse 0001                __CFG_HFOFST$ON 000000                __CFG_FOSC$HSHP 000000  
              __CFG_PBADEN$ON 000000               __initialization 0F58                  __end_of_Stop 0FA0  
                __end_of_main 0B06              __end_of_i2c_Init 0FD6               ??_i2c_Port_Init 0001  
     __end_of_TMR2_Initialize 1010       __size_of_EPWM_Port_Init 005E                        ??_Stop 0031  
                      ??_main 0031                 ___fttol@sign1 0025                 __activetblptr 000001  
                 ?_Delay100ms 0001             __end_of_LCD_write 0CA0                        _ADCON0 000FC2  
                      _ADCON2 000FC0                        _ADRESL 000FC3                        _CCPR2H 000F68  
                      _CCPR3H 000F5F                        _CCPR2L 000F67                        _CCPR3L 000F5E  
            ___awdiv@dividend 0007             place_lcd_cursor@x 0003             place_lcd_cursor@y 0001  
            __end_of___awtoft 0E96                        _ANSELA 000F38                        _ANSELB 000F39  
                      _ANSELD 000F3B                        _ANSELE 000F3C              __end_of___ftpack 09CA  
                  _Send_Pulse 0FA0                        _GODONE 007E11                __CFG_WDTEN$OFF 000000  
              __CFG_XINST$OFF 000000                 _LCD_writeChar 0E96                  _CCPTMRS0bits 000F49  
                   ??___awdiv 000B                __CFG_STVREN$ON 000000                     ??___awmod 0005  
                   ??___ftmul 0013                     ??___fttol 0020       __end_of_TMR4_Initialize 0FEE  
            ___awdiv@quotient 000D               ___awmod@divisor 0003      __end_of_LCD_convertWrite 0D22  
             ___awmod@counter 0005         ___ftmul@f3_as_product 0016                  __pdataCOMRAM 0037  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8           _EPWM2_LoadDutyValue 0D22               ??_Measure_Pulse 0001  
            ?_lineSensor_init 0001                    __accesstop 0060       __end_of__initialization 0F6E  
                   ?_LCD_init 0001                    ___awtoft@c 0009                ?_LCD_writeChar 0001  
   __size_of_place_lcd_cursor 004E                    ___ftmul@f1 000D                    ___ftmul@f2 0010  
           ?_EPWM1_Initialize 0001                    ___fttol@f1 001C                __pcstackCOMRAM 0001  
        ?_EPWM2_LoadDutyValue 002B           __size_of_Delay100ms 002C            ??_EPWM1_Initialize 0001  
            ?_TMR2_Initialize 0001             ?_EPWM2_Initialize 0001            ??_EPWM2_Initialize 0001  
                 ?_Send_Pulse 0001                     ?_i2c_Init 0001               __CFG_PLLCFG$OFF 000000  
                  ??_LCD_init 0005            __CFG_CCP2MX$PORTC1 000000         ??_EPWM2_LoadDutyValue 002D  
          __CFG_CCP3MX$PORTB5 000000                       _CCP2CON 000F66                       _CCP3CON 000F5D  
                     _ECCP2AS 000F64                       _ECCP3AS 000F5B                _EPWM_Port_Init 0DA2  
            ?_TMR4_Initialize 0001                     ?___awtoft 0009                     ?___ftpack 0001  
                     _PWM2CON 000F65                       _PWM3CON 000F5C                       _SSP2ADD 000F6E  
                     _SSP2BUF 000F6F                    ??_i2c_Init 0001   __end_of_EPWM1_LoadDutyValue 0C1C  
          _whiteLineThreshold 0037               ??_LCD_writeChar 0001               __CFG_PWRTEN$OFF 000000  
                     __Hparam 0000                       __Lparam 0000        __end_of_EPWM_Port_Init 0E00  
                     ___awdiv 09CA                       ___awmod 0B06                       ___ftmul 0832  
                     ___fttol 073C                  __psmallconst 0600                       __pcinit 0F58  
         __size_of_Send_Pulse 001E                    ??___awtoft 000C                    ??___ftpack 0006  
                     __ramtop 0600                       __ptext0 0A6E                       __ptext1 1018  
                     __ptext2 0FEE                       __ptext3 0FBE                       __ptext4 0FD6  
                     __ptext5 1000                       __ptext6 0F7C                       __ptext7 0D22  
                     __ptext8 0B96                       __ptext9 073C                     _T1CONbits 000FCD  
                   _T2CONbits 000FBA              ___awmod@dividend 0001                     _T4CONbits 000F51  
                ??_Delay100ms 0001          end_of_initialization 0F6E                     _LCD_write 0C1C  
       _LCD_convertWrite$2143 000F              _place_lcd_cursor 0E00               ?_EPWM_Port_Init 0001  
          __end_of_Delay100ms 0F2E         __end_of_i2c_Port_Init 1000            LCD_writeChar@lower 0003  
          LCD_writeChar@upper 0002                     _PORTAbits 000F80                     _PORTCbits 000F82  
           ?_LCD_convertWrite 0001            ??_LCD_convertWrite 000F                     _TRISAbits 000F92  
                   _TRISCbits 000F94                     _TRISDbits 000F95                    ?_LCD_write 0005  
           __size_of_LCD_init 0134                   ___ftmul@exp 0019                 __pidataCOMRAM 101E  
    place_lcd_cursor@position 0004           start_initialization 0F58     __size_of_EPWM1_Initialize 0032  
                ??_Send_Pulse 0001  EPWM1_LoadDutyValue@dutyValue 002B                    LCD_write@i 0009  
       __end_of_Measure_Pulse 1018             __size_of_i2c_Init 0018     __size_of_EPWM2_Initialize 002A  
    __size_of_lineSensor_init 0006            __end_of_Send_Pulse 0FBE             __size_of___awtoft 0048  
           __size_of___ftpack 00A8                   __pbssCOMRAM 0035      __size_of_TMR2_Initialize 0010  
         __end_of__stringdata 0607                   ??_LCD_write 0007   __end_of_EPWM2_LoadDutyValue 0DA2  
               LCD_write@data 0005                      ?___awdiv 0007                      ?___awmod 0001  
                    ?___ftmul 000D                      ?___fttol 001C              __CFG_PRICLKEN$ON 000000  
                 __smallconst 0600      __end_of_place_lcd_cursor 0E4E      __size_of_TMR4_Initialize 0018  
                 Delay100ms@i 0002                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _LATDbits 000F8C                      _LCD_init 0608              ??_EPWM_Port_Init 0001  
       __end_of_LCD_writeChar 0ED0                      _PIR1bits 000F9E                      _PIR5bits 000F7E  
__size_of_EPWM1_LoadDutyValue 0086              __CFG_WDTPS$32768 000000             LCD_writeChar@data 0004  
                    _SSP2CON1 000F6C                      _SSP2CON2 000F6B                      _PSTR2CON 000F63  
                    _PSTR3CON 000F5A                      _SSP2STAT 000F6D                   __stringdata 0601  
           ??_lineSensor_init 0001                     main@range 0033              _EPWM1_Initialize 0ED0  
                 _INTCON2bits 000FF1                      _i2c_Init 0FBE     __size_of_LCD_convertWrite 0082  
           ??_TMR2_Initialize 0001                      __Hrparam 0000              _EPWM2_Initialize 0F2E  
                    __Lrparam 0000                  __Lsmallconst 0600            __CFG_BOREN$SBORDIS 000000  
           __CFG_P2BMX$PORTD2 000000              __size_of___awdiv 00A4              __size_of___awmod 0090  
            __size_of___ftmul 00F0              __size_of___fttol 00F6                      ___awtoft 0E4E  
                    ___ftpack 0922                    _ANSELCbits 000F3A                    _ANSELDbits 000F3B  
                    __ptext10 0832                      __ptext11 0E4E                      __ptext20 0B06  
                    __ptext12 0922                      __ptext21 09CA                      __ptext13 0FA0  
                    __ptext22 0E96                      __ptext14 1010                      __ptext23 0DA2  
                    __ptext15 0C1C                      __ptext24 0F2E                      __ptext16 0608  
                    __ptext25 0ED0                      __ptext17 0E00                      __ptext18 0F02  
                    __ptext19 0CA0                  _SSP2CON1bits 000F6C                  _SSP2CON2bits 000F6B  
               __size_of_Stop 0024             ??_TMR4_Initialize 0001        __size_of_i2c_Port_Init 0012  
               __size_of_main 0098  EPWM2_LoadDutyValue@dutyValue 002B                 _i2c_Port_Init 0FEE  
      __size_of_Measure_Pulse 0008             __CFG_T3CMX$PORTC0 000000           _EPWM1_LoadDutyValue 0B96  
           ?_place_lcd_cursor 0001            ??_place_lcd_cursor 0002              _LCD_convertWrite 0CA0  
             _lineSensor_init 1018      __end_of_EPWM1_Initialize 0F02          ?_EPWM1_LoadDutyValue 002B  
