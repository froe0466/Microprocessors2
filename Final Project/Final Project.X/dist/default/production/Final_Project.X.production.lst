

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 05 08:51:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           	psect	idataCOMRAM
    51  0012C6                     __pidataCOMRAM:
    52                           	opt stack 0
    53                           
    54                           ;initializer for _whiteLineThreshold
    55  0012C6  7D                 	db	125
    56  0000                     _ADCON0	set	4034
    57  0000                     _ADCON2	set	4032
    58  0000                     _ADRESL	set	4035
    59  0000                     _ANSELA	set	3896
    60  0000                     _ANSELB	set	3897
    61  0000                     _ANSELCbits	set	3898
    62  0000                     _ANSELD	set	3899
    63  0000                     _ANSELDbits	set	3899
    64  0000                     _ANSELE	set	3900
    65  0000                     _CCP2CON	set	3942
    66  0000                     _CCP3CON	set	3933
    67  0000                     _CCPR2H	set	3944
    68  0000                     _CCPR2L	set	3943
    69  0000                     _CCPR3H	set	3935
    70  0000                     _CCPR3L	set	3934
    71  0000                     _CCPTMRS0bits	set	3913
    72  0000                     _ECCP2AS	set	3940
    73  0000                     _ECCP3AS	set	3931
    74  0000                     _INTCON2bits	set	4081
    75  0000                     _LATA	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATC	set	3979
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATD	set	3980
    80  0000                     _LATDbits	set	3980
    81  0000                     _LATE	set	3981
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PIR5bits	set	3966
    84  0000                     _PORTC	set	3970
    85  0000                     _PORTCbits	set	3970
    86  0000                     _PR2	set	4027
    87  0000                     _PR4	set	3922
    88  0000                     _PSTR2CON	set	3939
    89  0000                     _PSTR3CON	set	3930
    90  0000                     _PWM2CON	set	3941
    91  0000                     _PWM3CON	set	3932
    92  0000                     _SSP2ADD	set	3950
    93  0000                     _SSP2BUF	set	3951
    94  0000                     _SSP2CON1	set	3948
    95  0000                     _SSP2CON1bits	set	3948
    96  0000                     _SSP2CON2	set	3947
    97  0000                     _SSP2CON2bits	set	3947
    98  0000                     _SSP2STAT	set	3949
    99  0000                     _T2CON	set	4026
   100  0000                     _T2CONbits	set	4026
   101  0000                     _T4CON	set	3921
   102  0000                     _T4CONbits	set	3921
   103  0000                     _TMR2	set	4028
   104  0000                     _TMR4	set	3923
   105  0000                     _TRISA	set	3986
   106  0000                     _TRISB	set	3987
   107  0000                     _TRISCbits	set	3988
   108  0000                     _TRISD	set	3989
   109  0000                     _TRISDbits	set	3989
   110  0000                     _TRISE	set	3990
   111  0000                     _WPUB	set	3937
   112  0000                     _ADON	set	32272
   113  0000                     _GODONE	set	32273
   114                           
   115                           	psect	smallconst
   116  000600                     __psmallconst:
   117                           	opt stack 0
   118  000600  00                 	db	0
   119  000601                     __stringdata:
   120                           	opt stack 0
   121  000601                     STR_1:
   122                           
   123                           ; BSR set to: 15
   124  000601  53                 	db	83	;'S'
   125  000602  74                 	db	116	;'t'
   126  000603  61                 	db	97	;'a'
   127  000604  72                 	db	114	;'r'
   128  000605  74                 	db	116	;'t'
   129  000606  00                 	db	0
   130  000607                     __end_of__stringdata:
   131                           	opt stack 0
   132                           
   133                           ; #config settings
   134  000607  00                 	db	0	; dummy byte at the end
   135  0000                     
   136                           	psect	cinit
   137  0011C0                     __pcinit:
   138                           	opt stack 0
   139  0011C0                     start_initialization:
   140                           	opt stack 0
   141  0011C0                     __initialization:
   142                           	opt stack 0
   143                           
   144                           ; Clear objects allocated to COMRAM (2 bytes)
   145  0011C0  6A32               	clrf	(__pbssCOMRAM+1)& (0+255),c
   146  0011C2  6A31               	clrf	__pbssCOMRAM& (0+255),c
   147                           
   148                           ; Initialize objects allocated to COMRAM (1 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  0011C4  0EC6               	movlw	low __pidataCOMRAM
   151  0011C6  6EF6               	movwf	tblptrl,c
   152  0011C8  0E12               	movlw	high __pidataCOMRAM
   153  0011CA  6EF7               	movwf	tblptrh,c
   154  0011CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  0011CE  6EF8               	movwf	tblptru,c
   156  0011D0  0009               	tblrd		*+	;fetch initializer
   157  0011D2  CFF5 F033          	movff	tablat,__pdataCOMRAM
   158  0011D6                     end_of_initialization:
   159                           	opt stack 0
   160  0011D6                     __end_of__initialization:
   161                           	opt stack 0
   162  0011D6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   163  0011D8  6EF8               	movwf	tblptru,c
   164  0011DA  0E06               	movlw	high __Lsmallconst
   165  0011DC  6EF7               	movwf	tblptrh,c
   166  0011DE  0100               	movlb	0
   167  0011E0  EF24  F005         	goto	_main	;jump to C main() function
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           
   173                           	psect	bssCOMRAM
   174  000031                     __pbssCOMRAM:
   175                           	opt stack 0
   176  000031                     _yPos:
   177                           	opt stack 0
   178  000031                     	ds	2
   179                           tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           tblptrl	equ	0xFF6
   182                           tablat	equ	0xFF5
   183                           
   184                           	psect	dataCOMRAM
   185  000033                     __pdataCOMRAM:
   186                           	opt stack 0
   187  000033                     _whiteLineThreshold:
   188                           	opt stack 0
   189  000033                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           
   195                           	psect	cstackCOMRAM
   196  000001                     __pcstackCOMRAM:
   197                           	opt stack 0
   198  000001                     ??_LCD_writeChar:
   199  000001                     ??_Delay100ms:
   200  000001                     ??_i2c_Wait:
   201  000001                     ?_lineSensor_read:
   202                           	opt stack 0
   203  000001                     ?___awmod:
   204                           	opt stack 0
   205  000001                     ?___lwmod:
   206                           	opt stack 0
   207  000001                     ?___ftpack:
   208                           	opt stack 0
   209  000001                     place_lcd_cursor@y:
   210                           	opt stack 0
   211  000001                     lineSensor_read@Channel:
   212                           	opt stack 0
   213  000001                     ___awmod@dividend:
   214                           	opt stack 0
   215  000001                     ___lwmod@dividend:
   216                           	opt stack 0
   217  000001                     ___ftpack@arg:
   218                           	opt stack 0
   219                           
   220                           ; 3 bytes @ 0x0
   221  000001                     	ds	1
   222  000002                     ??_place_lcd_cursor:
   223  000002                     LCD_writeChar@upper:
   224                           	opt stack 0
   225  000002                     i2c_Write@data:
   226                           	opt stack 0
   227  000002                     Delay100ms@i:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x1
   231  000002                     	ds	1
   232  000003                     ??_lineSensor_isWhiteLine1:
   233  000003                     LCD_writeChar@lower:
   234                           	opt stack 0
   235  000003                     place_lcd_cursor@x:
   236                           	opt stack 0
   237  000003                     i2c_Command@reg:
   238                           	opt stack 0
   239  000003                     ___awmod@divisor:
   240                           	opt stack 0
   241  000003                     ___lwmod@divisor:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x2
   245  000003                     	ds	1
   246  000004                     LCD_writeChar@data:
   247                           	opt stack 0
   248  000004                     place_lcd_cursor@position:
   249                           	opt stack 0
   250  000004                     i2c_Command@command:
   251                           	opt stack 0
   252  000004                     ___ftpack@exp:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x3
   256  000004                     	ds	1
   257  000005                     ??_LCD_init:
   258  000005                     ??_i2c_Command:
   259  000005                     ___awmod@counter:
   260                           	opt stack 0
   261  000005                     ___ftpack@sign:
   262                           	opt stack 0
   263  000005                     ___lwmod@counter:
   264                           	opt stack 0
   265  000005                     LCD_write@data:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x4
   269  000005                     	ds	1
   270  000006                     ??___ftpack:
   271  000006                     ?___lwdiv:
   272                           	opt stack 0
   273  000006                     i2c_Command@deviceAddress:
   274                           	opt stack 0
   275  000006                     lineSensor_isWhiteLine1@isWhiteLine:
   276                           	opt stack 0
   277  000006                     ___awmod@sign:
   278                           	opt stack 0
   279  000006                     ___lwdiv@dividend:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x5
   283  000006                     	ds	1
   284  000007                     ??_LCD_write:
   285  000007                     ?___awdiv:
   286                           	opt stack 0
   287  000007                     ___awdiv@dividend:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x6
   291  000007                     	ds	1
   292  000008                     ___lwdiv@divisor:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x7
   296  000008                     	ds	1
   297  000009                     ?___awtoft:
   298                           	opt stack 0
   299  000009                     LCD_write@i:
   300                           	opt stack 0
   301  000009                     ___awdiv@divisor:
   302                           	opt stack 0
   303  000009                     ___awtoft@c:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x8
   307  000009                     	ds	1
   308  00000A                     ___lwdiv@quotient:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x9
   312  00000A                     	ds	1
   313  00000B                     ___awdiv@counter:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0xA
   317  00000B                     	ds	1
   318  00000C                     ___awdiv@sign:
   319                           	opt stack 0
   320  00000C                     ___awtoft@sign:
   321                           	opt stack 0
   322  00000C                     ___lwdiv@counter:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0xB
   326  00000C                     	ds	1
   327  00000D                     ?___ftmul:
   328                           	opt stack 0
   329  00000D                     i2c_Read@reg:
   330                           	opt stack 0
   331  00000D                     ___awdiv@quotient:
   332                           	opt stack 0
   333  00000D                     ___ftmul@f1:
   334                           	opt stack 0
   335                           
   336                           ; 3 bytes @ 0xC
   337  00000D                     	ds	1
   338  00000E                     ??_i2c_Read:
   339                           
   340                           ; 0 bytes @ 0xD
   341  00000E                     	ds	1
   342  00000F                     _LCD_convertWrite$1663:
   343                           	opt stack 0
   344  00000F                     _i2c_Read$1664:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0xE
   348  00000F                     	ds	1
   349  000010                     ___ftmul@f2:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0xF
   353  000010                     	ds	1
   354  000011                     LCD_convertWrite@data:
   355                           	opt stack 0
   356  000011                     i2c_Read@rangeInCm1:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x10
   360  000011                     	ds	1
   361  000012                     i2c_Read@rangeInCm:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x11
   365  000012                     	ds	1
   366  000013                     ??___ftmul:
   367  000013                     i2c_Read@deviceAddress:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x12
   371  000013                     	ds	1
   372  000014                     i2c_Read@range:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x13
   376  000014                     	ds	2
   377  000016                     ___ftmul@f3_as_product:
   378                           	opt stack 0
   379                           
   380                           ; 3 bytes @ 0x15
   381  000016                     	ds	3
   382  000019                     ___ftmul@exp:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x18
   386  000019                     	ds	1
   387  00001A                     ___ftmul@cntr:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x19
   391  00001A                     	ds	1
   392  00001B                     ___ftmul@sign:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1A
   396  00001B                     	ds	1
   397  00001C                     ?___fttol:
   398                           	opt stack 0
   399  00001C                     ___fttol@f1:
   400                           	opt stack 0
   401                           
   402                           ; 3 bytes @ 0x1B
   403  00001C                     	ds	4
   404  000020                     ??___fttol:
   405                           
   406                           ; 0 bytes @ 0x1F
   407  000020                     	ds	5
   408  000025                     ___fttol@sign1:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x24
   412  000025                     	ds	1
   413  000026                     ___fttol@lval:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x25
   417  000026                     	ds	4
   418  00002A                     ___fttol@exp1:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x29
   422  00002A                     	ds	1
   423  00002B                     EPWM1_LoadDutyValue@dutyValue:
   424                           	opt stack 0
   425  00002B                     EPWM2_LoadDutyValue@dutyValue:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2A
   429  00002B                     	ds	2
   430  00002D                     ??_EPWM1_LoadDutyValue:
   431  00002D                     ??_EPWM2_LoadDutyValue:
   432                           
   433                           ; 0 bytes @ 0x2C
   434  00002D                     	ds	4
   435  000031                     tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           
   440                           ; 0 bytes @ 0x30
   441 ;;
   442 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   443 ;;
   444 ;; *************** function _main *****************
   445 ;; Defined at:
   446 ;;		line 17 in file "../Driver.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;		None
   451 ;; Return value:  Size  Location     Type
   452 ;;		None               void
   453 ;; Registers used:
   454 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   460 ;;      Params:         0       0       0       0       0       0       0
   461 ;;      Locals:         0       0       0       0       0       0       0
   462 ;;      Temps:          0       0       0       0       0       0       0
   463 ;;      Totals:         0       0       0       0       0       0       0
   464 ;;Total ram usage:        0 bytes
   465 ;; Hardware stack levels required when called:    4
   466 ;; This function calls:
   467 ;;		_EPWM1_Initialize
   468 ;;		_EPWM1_LoadDutyValue
   469 ;;		_EPWM2_Initialize
   470 ;;		_EPWM2_LoadDutyValue
   471 ;;		_EPWM_Port_Init
   472 ;;		_LCD_convertWrite
   473 ;;		_LCD_init
   474 ;;		_LCD_write
   475 ;;		_LCD_writeChar
   476 ;;		_Switch_Direction1
   477 ;;		_Switch_Direction2
   478 ;;		_TMR2_Initialize
   479 ;;		_TMR4_Initialize
   480 ;;		_i2c_Command
   481 ;;		_i2c_Init
   482 ;;		_i2c_Port_Init
   483 ;;		_i2c_Read
   484 ;;		_lineSensor_init
   485 ;;		_lineSensor_isWhiteLine1
   486 ;;		_lineSensor_read
   487 ;;		_place_lcd_cursor
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text0
   494  000A48                     __ptext0:
   495                           	opt stack 0
   496  000A48                     _main:
   497                           	opt stack 27
   498                           
   499                           ;Driver.c: 20: EPWM_Port_Init();
   500                           
   501                           ; BSR set to: 15
   502                           ;incstack = 0
   503  000A48  EC7D  F007         	call	_EPWM_Port_Init	;wreg free
   504                           
   505                           ;Driver.c: 23: LCD_init();
   506  000A4C  EC04  F003         	call	_LCD_init	;wreg free
   507                           
   508                           ;Driver.c: 24: place_lcd_cursor(0,0);
   509  000A50  0E00               	movlw	0
   510  000A52  6E01               	movwf	place_lcd_cursor@y,c
   511  000A54  0E00               	movlw	0
   512  000A56  ECD5  F007         	call	_place_lcd_cursor
   513                           
   514                           ;Driver.c: 27: i2c_Port_Init();
   515  000A5A  EC2F  F009         	call	_i2c_Port_Init	;wreg free
   516                           
   517                           ;Driver.c: 28: i2c_Init();
   518  000A5E  EC01  F009         	call	_i2c_Init	;wreg free
   519                           
   520                           ;Driver.c: 31: lineSensor_init();
   521  000A62  EC60  F009         	call	_lineSensor_init	;wreg free
   522                           
   523                           ;Driver.c: 34: EPWM1_Initialize();
   524  000A66  EC9C  F008         	call	_EPWM1_Initialize	;wreg free
   525                           
   526                           ;Driver.c: 35: TMR2_Initialize();
   527  000A6A  EC40  F009         	call	_TMR2_Initialize	;wreg free
   528                           
   529                           ;Driver.c: 36: EPWM1_LoadDutyValue(60);
   530  000A6E  0E00               	movlw	0
   531  000A70  6E2C               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
   532  000A72  0E3C               	movlw	60
   533  000A74  6E2B               	movwf	EPWM1_LoadDutyValue@dutyValue,c
   534  000A76  EC77  F006         	call	_EPWM1_LoadDutyValue	;wreg free
   535                           
   536                           ;Driver.c: 37: Switch_Direction1();
   537  000A7A  EC19  F009         	call	_Switch_Direction1	;wreg free
   538                           
   539                           ;Driver.c: 38: EPWM1_LoadDutyValue(60);
   540  000A7E  0E00               	movlw	0
   541  000A80  6E2C               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
   542  000A82  0E3C               	movlw	60
   543  000A84  6E2B               	movwf	EPWM1_LoadDutyValue@dutyValue,c
   544  000A86  EC77  F006         	call	_EPWM1_LoadDutyValue	;wreg free
   545                           
   546                           ;Driver.c: 41: EPWM2_Initialize();
   547  000A8A  ECCB  F008         	call	_EPWM2_Initialize	;wreg free
   548                           
   549                           ;Driver.c: 42: TMR4_Initialize();
   550  000A8E  EC0D  F009         	call	_TMR4_Initialize	;wreg free
   551                           
   552                           ;Driver.c: 43: EPWM2_LoadDutyValue(60);
   553  000A92  0E00               	movlw	0
   554  000A94  6E2C               	movwf	EPWM2_LoadDutyValue@dutyValue+1,c
   555  000A96  0E3C               	movlw	60
   556  000A98  6E2B               	movwf	EPWM2_LoadDutyValue@dutyValue,c
   557  000A9A  EC3D  F007         	call	_EPWM2_LoadDutyValue	;wreg free
   558                           
   559                           ;Driver.c: 44: Switch_Direction2();
   560  000A9E  EC25  F009         	call	_Switch_Direction2	;wreg free
   561                           
   562                           ;Driver.c: 45: EPWM2_LoadDutyValue(60);
   563  000AA2  0E00               	movlw	0
   564  000AA4  6E2C               	movwf	EPWM2_LoadDutyValue@dutyValue+1,c
   565  000AA6  0E3C               	movlw	60
   566  000AA8  6E2B               	movwf	EPWM2_LoadDutyValue@dutyValue,c
   567  000AAA  EC3D  F007         	call	_EPWM2_LoadDutyValue	;wreg free
   568                           
   569                           ;Driver.c: 47: LCD_write("Start");
   570  000AAE  0E06               	movlw	high STR_1
   571  000AB0  6E06               	movwf	LCD_write@data+1,c
   572  000AB2  0E01               	movlw	low STR_1
   573  000AB4  6E05               	movwf	LCD_write@data,c
   574  000AB6  ECBA  F006         	call	_LCD_write	;wreg free
   575  000ABA                     l1932:
   576                           
   577                           ;Driver.c: 50: {
   578                           ;Driver.c: 52: i2c_Command(0xE0,0x00,0x51);
   579  000ABA  0E00               	movlw	0
   580  000ABC  6E03               	movwf	i2c_Command@reg,c
   581  000ABE  0E51               	movlw	81
   582  000AC0  6E04               	movwf	i2c_Command@command,c
   583  000AC2  0EE0               	movlw	224
   584  000AC4  ECFC  F007         	call	_i2c_Command
   585                           
   586                           ;Driver.c: 53: i2c_Read(0xE0,0x02);
   587  000AC8  0E02               	movlw	2
   588  000ACA  6E0D               	movwf	i2c_Read@reg,c
   589  000ACC  0EE0               	movlw	224
   590  000ACE  EC9E  F003         	call	_i2c_Read
   591                           
   592                           ;Driver.c: 56: place_lcd_cursor(5,1);
   593  000AD2  0E01               	movlw	1
   594  000AD4  6E01               	movwf	place_lcd_cursor@y,c
   595  000AD6  0E05               	movlw	5
   596  000AD8  ECD5  F007         	call	_place_lcd_cursor
   597                           
   598                           ;Driver.c: 57: LCD_convertWrite(lineSensor_read(0));
   599  000ADC  0E00               	movlw	0
   600  000ADE  6E02               	movwf	lineSensor_read@Channel+1,c
   601  000AE0  0E00               	movlw	0
   602  000AE2  6E01               	movwf	lineSensor_read@Channel,c
   603  000AE4  ECF2  F008         	call	_lineSensor_read	;wreg free
   604  000AE8  5001               	movf	?_lineSensor_read,w,c
   605  000AEA  ECFC  F006         	call	_LCD_convertWrite
   606                           
   607                           ;Driver.c: 60: if(lineSensor_isWhiteLine1())
   608  000AEE  EC83  F008         	call	_lineSensor_isWhiteLine1	;wreg free
   609  000AF2  0900               	iorlw	0
   610  000AF4  B4D8               	btfsc	status,2,c
   611  000AF6  D009               	goto	l1946
   612                           
   613                           ;Driver.c: 61: {
   614                           ;Driver.c: 62: place_lcd_cursor(8,1);
   615  000AF8  0E01               	movlw	1
   616  000AFA  6E01               	movwf	place_lcd_cursor@y,c
   617  000AFC  0E08               	movlw	8
   618  000AFE  ECD5  F007         	call	_place_lcd_cursor
   619                           
   620                           ;Driver.c: 63: LCD_writeChar('T');
   621  000B02  0E54               	movlw	84
   622  000B04  EC66  F008         	call	_LCD_writeChar
   623                           
   624                           ;Driver.c: 64: }
   625  000B08  D7D8               	goto	l1932
   626  000B0A                     l1946:
   627                           
   628                           ;Driver.c: 65: else
   629                           ;Driver.c: 66: {
   630                           ;Driver.c: 67: LCD_writeChar('F');
   631  000B0A  0E46               	movlw	70
   632  000B0C  EC66  F008         	call	_LCD_writeChar
   633  000B10  D7D4               	goto	l1932
   634  000B12                     __end_of_main:
   635                           	opt stack 0
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           status	equ	0xFD8
   641                           
   642 ;; *************** function _lineSensor_isWhiteLine1 *****************
   643 ;; Defined at:
   644 ;;		line 29 in file "../LineSensor.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  isWhiteLine     1    5[COMRAM] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      unsigned char 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   658 ;;      Params:         0       0       0       0       0       0       0
   659 ;;      Locals:         1       0       0       0       0       0       0
   660 ;;      Temps:          3       0       0       0       0       0       0
   661 ;;      Totals:         4       0       0       0       0       0       0
   662 ;;Total ram usage:        4 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; Hardware stack levels required when called:    1
   665 ;; This function calls:
   666 ;;		_lineSensor_read
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text1
   673  001106                     __ptext1:
   674                           	opt stack 0
   675  001106                     _lineSensor_isWhiteLine1:
   676                           	opt stack 29
   677                           
   678                           ;LineSensor.c: 31: bool isWhiteLine = FALSE;
   679                           
   680                           ;incstack = 0
   681  001106  0E00               	movlw	0
   682  001108  6E06               	movwf	lineSensor_isWhiteLine1@isWhiteLine,c
   683                           
   684                           ;LineSensor.c: 33: if (lineSensor_read(0) < whiteLineThreshold) {isWhiteLine = TRUE;}
   685  00110A  5033               	movf	_whiteLineThreshold,w,c
   686  00110C  6E03               	movwf	??_lineSensor_isWhiteLine1& (0+255),c
   687  00110E  6A04               	clrf	(??_lineSensor_isWhiteLine1+1)& (0+255),c
   688  001110  0E00               	movlw	0
   689  001112  6E02               	movwf	lineSensor_read@Channel+1,c
   690  001114  0E00               	movlw	0
   691  001116  6E01               	movwf	lineSensor_read@Channel,c
   692  001118  ECF2  F008         	call	_lineSensor_read	;wreg free
   693  00111C  5002               	movf	?_lineSensor_read+1,w,c
   694  00111E  0A80               	xorlw	128
   695  001120  6E05               	movwf	(??_lineSensor_isWhiteLine1+2)& (0+255),c
   696  001122  5003               	movf	??_lineSensor_isWhiteLine1,w,c
   697  001124  5C01               	subwf	?_lineSensor_read,w,c
   698  001126  5004               	movf	??_lineSensor_isWhiteLine1+1,w,c
   699  001128  0A80               	xorlw	128
   700  00112A  5805               	subwfb	(??_lineSensor_isWhiteLine1+2)& (0+255),w,c
   701  00112C  B0D8               	btfsc	status,0,c
   702  00112E  D002               	goto	l291
   703  001130  0E01               	movlw	1
   704  001132  6E06               	movwf	lineSensor_isWhiteLine1@isWhiteLine,c
   705  001134                     l291:
   706                           
   707                           ;LineSensor.c: 35: return isWhiteLine;
   708  001134  5006               	movf	lineSensor_isWhiteLine1@isWhiteLine,w,c
   709  001136  0012               	return	
   710  001138                     __end_of_lineSensor_isWhiteLine1:
   711                           	opt stack 0
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           status	equ	0xFD8
   717                           
   718 ;; *************** function _lineSensor_read *****************
   719 ;; Defined at:
   720 ;;		line 13 in file "../LineSensor.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;  Channel         2    0[COMRAM] unsigned int 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  2    0[COMRAM] int 
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   734 ;;      Params:         2       0       0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0       0       0
   737 ;;      Totals:         2       0       0       0       0       0       0
   738 ;;Total ram usage:        2 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; This function calls:
   741 ;;		Nothing
   742 ;; This function is called by:
   743 ;;		_main
   744 ;;		_lineSensor_isWhiteLine1
   745 ;;		_lineSensor_isWhiteLine2
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text2
   750  0011E4                     __ptext2:
   751                           	opt stack 0
   752  0011E4                     _lineSensor_read:
   753                           	opt stack 30
   754                           
   755                           ;LineSensor.c: 15: ADCON0=0x00;
   756                           
   757                           ;incstack = 0
   758  0011E4  0E00               	movlw	0
   759  0011E6  6EC2               	movwf	4034,c	;volatile
   760                           
   761                           ;LineSensor.c: 16: ADCON0=(Channel<<2);
   762  0011E8  4401               	rlncf	lineSensor_read@Channel,w,c
   763  0011EA  46E8               	rlncf	wreg,f,c
   764  0011EC  0BFC               	andlw	252
   765  0011EE  6EC2               	movwf	4034,c	;volatile
   766                           
   767                           ;LineSensor.c: 18: ADON=1;
   768  0011F0  80C2               	bsf	4034,0,c	;volatile
   769                           
   770                           ;LineSensor.c: 20: GODONE=1;
   771  0011F2  82C2               	bsf	4034,1,c	;volatile
   772  0011F4                     l285:
   773  0011F4  B2C2               	btfsc	4034,1,c	;volatile
   774  0011F6  D7FE               	goto	l285
   775                           
   776                           ;LineSensor.c: 24: ADON=0;
   777  0011F8  90C2               	bcf	4034,0,c	;volatile
   778                           
   779                           ;LineSensor.c: 26: return ADRESL;
   780  0011FA  CFC3 F001          	movff	4035,?_lineSensor_read	;volatile
   781  0011FE  6A02               	clrf	?_lineSensor_read+1,c
   782  001200  0012               	return	
   783  001202                     __end_of_lineSensor_read:
   784                           	opt stack 0
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           wreg	equ	0xFE8
   790                           status	equ	0xFD8
   791                           
   792 ;; *************** function _lineSensor_init *****************
   793 ;; Defined at:
   794 ;;		line 7 in file "../LineSensor.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;		None               void
   801 ;; Registers used:
   802 ;;		wreg, status,2
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   808 ;;      Params:         0       0       0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text3
   822  0012C0                     __ptext3:
   823                           	opt stack 0
   824  0012C0                     _lineSensor_init:
   825                           	opt stack 30
   826                           
   827                           ;LineSensor.c: 9: ADCON2=0b10001010;
   828                           
   829                           ;incstack = 0
   830  0012C0  0E8A               	movlw	138
   831  0012C2  6EC0               	movwf	4032,c	;volatile
   832  0012C4  0012               	return	
   833  0012C6                     __end_of_lineSensor_init:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           wreg	equ	0xFE8
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _i2c_Read *****************
   843 ;; Defined at:
   844 ;;		line 118 in file "../i2c.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  deviceAddres    1    wreg     unsigned char 
   847 ;;  reg             1   12[COMRAM] unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  deviceAddres    1   18[COMRAM] unsigned char 
   850 ;;  range           2   19[COMRAM] unsigned int 
   851 ;;  rangeInCm       1   17[COMRAM] unsigned char 
   852 ;;  rangeInCm1      1   16[COMRAM] unsigned char 
   853 ;;  x               1    0        unsigned char 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      unsigned char 
   856 ;; Registers used:
   857 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   863 ;;      Params:         1       0       0       0       0       0       0
   864 ;;      Locals:         7       0       0       0       0       0       0
   865 ;;      Temps:          1       0       0       0       0       0       0
   866 ;;      Totals:         9       0       0       0       0       0       0
   867 ;;Total ram usage:        9 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    2
   870 ;; This function calls:
   871 ;;		_LCD_writeChar
   872 ;;		___lwdiv
   873 ;;		___lwmod
   874 ;;		_i2c_Restart
   875 ;;		_i2c_Start
   876 ;;		_i2c_Stop
   877 ;;		_i2c_Wait
   878 ;;		_i2c_Write
   879 ;;		_place_lcd_cursor
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text4
   886  00073C                     __ptext4:
   887                           	opt stack 0
   888  00073C                     _i2c_Read:
   889                           	opt stack 28
   890                           
   891                           ;incstack = 0
   892                           ;i2c_Read@deviceAddress stored from wreg
   893  00073C  6E13               	movwf	i2c_Read@deviceAddress,c
   894                           
   895                           ;i2c.c: 120: unsigned char rangeInCm = 0;
   896  00073E  0E00               	movlw	0
   897  000740  6E12               	movwf	i2c_Read@rangeInCm,c
   898                           
   899                           ;i2c.c: 121: unsigned char rangeInCm1 = 0;
   900  000742  0E00               	movlw	0
   901  000744  6E11               	movwf	i2c_Read@rangeInCm1,c
   902                           
   903                           ;i2c.c: 122: unsigned char x;
   904                           ;i2c.c: 123: unsigned int range;
   905                           ;i2c.c: 126: i2c_Start();
   906  000746  EC5A  F009         	call	_i2c_Start	;wreg free
   907                           
   908                           ;i2c.c: 127: i2c_Write(deviceAddress);
   909  00074A  5013               	movf	i2c_Read@deviceAddress,w,c
   910  00074C  EC4E  F009         	call	_i2c_Write
   911                           
   912                           ;i2c.c: 128: i2c_Wait();
   913  000750  EC38  F009         	call	_i2c_Wait	;wreg free
   914                           
   915                           ;i2c.c: 129: i2c_Write(reg);
   916  000754  500D               	movf	i2c_Read@reg,w,c
   917  000756  EC4E  F009         	call	_i2c_Write
   918                           
   919                           ;i2c.c: 130: i2c_Restart();
   920  00075A  EC48  F009         	call	_i2c_Restart	;wreg free
   921                           
   922                           ;i2c.c: 131: i2c_Write(deviceAddress + 1);
   923  00075E  2813               	incf	i2c_Read@deviceAddress,w,c
   924  000760  EC4E  F009         	call	_i2c_Write
   925                           
   926                           ;i2c.c: 132: i2c_Wait();
   927  000764  EC38  F009         	call	_i2c_Wait	;wreg free
   928                           
   929                           ;i2c.c: 135: SSP2CON2bits.RCEN = 1;
   930  000768  866B               	bsf	3947,3,c	;volatile
   931                           
   932                           ;i2c.c: 136: i2c_Wait();
   933  00076A  EC38  F009         	call	_i2c_Wait	;wreg free
   934                           
   935                           ;i2c.c: 137: rangeInCm = SSP2BUF;
   936  00076E  CF6F F012          	movff	3951,i2c_Read@rangeInCm	;volatile
   937                           
   938                           ;i2c.c: 140: SSP2CON2bits.ACKDT = 0;
   939  000772  9A6B               	bcf	3947,5,c	;volatile
   940                           
   941                           ;i2c.c: 141: SSP2CON2bits.ACKEN = 1;
   942  000774  886B               	bsf	3947,4,c	;volatile
   943                           
   944                           ;i2c.c: 143: i2c_Wait();
   945  000776  EC38  F009         	call	_i2c_Wait	;wreg free
   946                           
   947                           ;i2c.c: 146: SSP2CON2bits.RCEN = 1;
   948  00077A  866B               	bsf	3947,3,c	;volatile
   949                           
   950                           ;i2c.c: 147: i2c_Wait();
   951  00077C  EC38  F009         	call	_i2c_Wait	;wreg free
   952                           
   953                           ;i2c.c: 149: rangeInCm1 = SSP2BUF;
   954  000780  CF6F F011          	movff	3951,i2c_Read@rangeInCm1	;volatile
   955                           
   956                           ;i2c.c: 152: SSP2CON2bits.ACKDT = 1;
   957  000784  8A6B               	bsf	3947,5,c	;volatile
   958                           
   959                           ;i2c.c: 153: SSP2CON2bits.ACKEN = 1;
   960  000786  886B               	bsf	3947,4,c	;volatile
   961                           
   962                           ;i2c.c: 155: i2c_Wait();
   963  000788  EC38  F009         	call	_i2c_Wait	;wreg free
   964                           
   965                           ;i2c.c: 156: i2c_Stop();
   966  00078C  EC54  F009         	call	_i2c_Stop	;wreg free
   967                           
   968                           ;i2c.c: 158: range = rangeInCm<<8;
   969  000790  5012               	movf	i2c_Read@rangeInCm,w,c
   970  000792  6E15               	movwf	i2c_Read@range+1,c
   971  000794  6A14               	clrf	i2c_Read@range,c
   972                           
   973                           ;i2c.c: 159: range = range + rangeInCm1;
   974  000796  5011               	movf	i2c_Read@rangeInCm1,w,c
   975  000798  2414               	addwf	i2c_Read@range,w,c
   976  00079A  6E14               	movwf	i2c_Read@range,c
   977  00079C  0E00               	movlw	0
   978  00079E  2015               	addwfc	i2c_Read@range+1,w,c
   979  0007A0  6E15               	movwf	i2c_Read@range+1,c
   980                           
   981                           ;i2c.c: 162: place_lcd_cursor(0,1);
   982  0007A2  0E01               	movlw	1
   983  0007A4  6E01               	movwf	place_lcd_cursor@y,c
   984  0007A6  0E00               	movlw	0
   985  0007A8  ECD5  F007         	call	_place_lcd_cursor
   986                           
   987                           ;i2c.c: 163: LCD_writeChar((range / 100) + 0x30);
   988  0007AC  C014  F006         	movff	i2c_Read@range,___lwdiv@dividend
   989  0007B0  C015  F007         	movff	i2c_Read@range+1,___lwdiv@dividend+1
   990  0007B4  0E00               	movlw	0
   991  0007B6  6E09               	movwf	___lwdiv@divisor+1,c
   992  0007B8  0E64               	movlw	100
   993  0007BA  6E08               	movwf	___lwdiv@divisor,c
   994  0007BC  ECAC  F007         	call	___lwdiv	;wreg free
   995  0007C0  5006               	movf	?___lwdiv,w,c
   996  0007C2  0F30               	addlw	48
   997  0007C4  EC66  F008         	call	_LCD_writeChar
   998                           
   999                           ;i2c.c: 164: place_lcd_cursor(1,1);
  1000  0007C8  0E01               	movlw	1
  1001  0007CA  6E01               	movwf	place_lcd_cursor@y,c
  1002  0007CC  0E01               	movlw	1
  1003  0007CE  ECD5  F007         	call	_place_lcd_cursor
  1004                           
  1005                           ;i2c.c: 165: LCD_writeChar(((range % 100) / 10) + 0x30);
  1006  0007D2  0E00               	movlw	0
  1007  0007D4  6E04               	movwf	___lwmod@divisor+1,c
  1008  0007D6  0E64               	movlw	100
  1009  0007D8  6E03               	movwf	___lwmod@divisor,c
  1010  0007DA  C014  F001         	movff	i2c_Read@range,___lwmod@dividend
  1011  0007DE  C015  F002         	movff	i2c_Read@range+1,___lwmod@dividend+1
  1012  0007E2  EC45  F008         	call	___lwmod	;wreg free
  1013  0007E6  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1014  0007EA  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1015  0007EE  0E00               	movlw	0
  1016  0007F0  6E09               	movwf	___lwdiv@divisor+1,c
  1017  0007F2  0E0A               	movlw	10
  1018  0007F4  6E08               	movwf	___lwdiv@divisor,c
  1019  0007F6  ECAC  F007         	call	___lwdiv	;wreg free
  1020  0007FA  5006               	movf	?___lwdiv,w,c
  1021  0007FC  0F30               	addlw	48
  1022  0007FE  EC66  F008         	call	_LCD_writeChar
  1023                           
  1024                           ;i2c.c: 166: place_lcd_cursor(2,1);
  1025  000802  0E01               	movlw	1
  1026  000804  6E01               	movwf	place_lcd_cursor@y,c
  1027  000806  0E02               	movlw	2
  1028  000808  ECD5  F007         	call	_place_lcd_cursor
  1029                           
  1030                           ;i2c.c: 167: LCD_writeChar(((range % 100) % 10) + 0x30);
  1031  00080C  0E00               	movlw	0
  1032  00080E  6E04               	movwf	___lwmod@divisor+1,c
  1033  000810  0E64               	movlw	100
  1034  000812  6E03               	movwf	___lwmod@divisor,c
  1035  000814  C014  F001         	movff	i2c_Read@range,___lwmod@dividend
  1036  000818  C015  F002         	movff	i2c_Read@range+1,___lwmod@dividend+1
  1037  00081C  EC45  F008         	call	___lwmod	;wreg free
  1038  000820  C001  F00F         	movff	?___lwmod,_i2c_Read$1664
  1039  000824  C002  F010         	movff	?___lwmod+1,_i2c_Read$1664+1
  1040                           
  1041                           ;i2c.c: 167: LCD_writeChar(((range % 100) % 10) + 0x30);
  1042  000828  C00F  F001         	movff	_i2c_Read$1664,___lwmod@dividend
  1043  00082C  C010  F002         	movff	_i2c_Read$1664+1,___lwmod@dividend+1
  1044  000830  0E00               	movlw	0
  1045  000832  6E04               	movwf	___lwmod@divisor+1,c
  1046  000834  0E0A               	movlw	10
  1047  000836  6E03               	movwf	___lwmod@divisor,c
  1048  000838  EC45  F008         	call	___lwmod	;wreg free
  1049  00083C  5001               	movf	?___lwmod,w,c
  1050  00083E  0F30               	addlw	48
  1051  000840  EC66  F008         	call	_LCD_writeChar
  1052  000844  0012               	return	
  1053  000846                     u807:
  1054  000846  2EE8               	decfsz	wreg,f,c
  1055  000848  D7FE               	goto	u807
  1056  00084A  2E0E               	decfsz	??_i2c_Read& (0+255),f,c
  1057  00084C  D7FC               	goto	u807
  1058  00084E  F000               	nop	
  1059                           
  1060                           ;i2c.c: 172: _delay((unsigned long)((50)*(10000000/4000.0)));
  1061  000850  0EA3               	movlw	163
  1062  000852  6E0E               	movwf	??_i2c_Read& (0+255),c
  1063  000854  0E55               	movlw	85
  1064  000856                     u817:
  1065  000856  2EE8               	decfsz	wreg,f,c
  1066  000858  D7FE               	goto	u817
  1067  00085A  2E0E               	decfsz	??_i2c_Read& (0+255),f,c
  1068  00085C  D7FC               	goto	u817
  1069  00085E  F000               	nop	
  1070  000860  0012               	return	
  1071  000862                     __end_of_i2c_Read:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           wreg	equ	0xFE8
  1078                           status	equ	0xFD8
  1079                           
  1080 ;; *************** function _i2c_Restart *****************
  1081 ;; Defined at:
  1082 ;;		line 81 in file "../i2c.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;		None               void
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1096 ;;      Params:         0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    1
  1103 ;; This function calls:
  1104 ;;		_i2c_Wait
  1105 ;; This function is called by:
  1106 ;;		_i2c_Read
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text5
  1111  001290                     __ptext5:
  1112                           	opt stack 0
  1113  001290                     _i2c_Restart:
  1114                           	opt stack 28
  1115                           
  1116                           ;i2c.c: 82: i2c_Wait();
  1117                           
  1118                           ;incstack = 0
  1119  001290  EC38  F009         	call	_i2c_Wait	;wreg free
  1120                           
  1121                           ;i2c.c: 83: SSP2CON2bits.RSEN=1;
  1122  001294  826B               	bsf	3947,1,c	;volatile
  1123  001296                     l249:
  1124  001296  A26B               	btfss	3947,1,c	;volatile
  1125  001298  0012               	return	
  1126  00129A  D7FD               	goto	l249
  1127  00129C                     __end_of_i2c_Restart:
  1128                           	opt stack 0
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           wreg	equ	0xFE8
  1134                           status	equ	0xFD8
  1135                           
  1136 ;; *************** function ___lwmod *****************
  1137 ;; Defined at:
  1138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;  dividend        2    0[COMRAM] unsigned int 
  1141 ;;  divisor         2    2[COMRAM] unsigned int 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  counter         1    4[COMRAM] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  2    0[COMRAM] unsigned int 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1153 ;;      Params:         4       0       0       0       0       0       0
  1154 ;;      Locals:         1       0       0       0       0       0       0
  1155 ;;      Temps:          0       0       0       0       0       0       0
  1156 ;;      Totals:         5       0       0       0       0       0       0
  1157 ;;Total ram usage:        5 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; This function calls:
  1160 ;;		Nothing
  1161 ;; This function is called by:
  1162 ;;		_i2c_Read
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text6
  1167  00108A                     __ptext6:
  1168                           	opt stack 0
  1169  00108A                     ___lwmod:
  1170                           	opt stack 29
  1171                           
  1172                           ;incstack = 0
  1173  00108A  5004               	movf	___lwmod@divisor+1,w,c
  1174  00108C  1003               	iorwf	___lwmod@divisor,w,c
  1175  00108E  B4D8               	btfsc	status,2,c
  1176  001090  D018               	goto	l821
  1177  001092  0E01               	movlw	1
  1178  001094  6E05               	movwf	___lwmod@counter,c
  1179  001096  D004               	goto	l1706
  1180  001098                     l1704:
  1181  001098  90D8               	bcf	status,0,c
  1182  00109A  3603               	rlcf	___lwmod@divisor,f,c
  1183  00109C  3604               	rlcf	___lwmod@divisor+1,f,c
  1184  00109E  2A05               	incf	___lwmod@counter,f,c
  1185  0010A0                     l1706:
  1186  0010A0  AE04               	btfss	___lwmod@divisor+1,7,c
  1187  0010A2  D7FA               	goto	l1704
  1188  0010A4                     l1708:
  1189  0010A4  5003               	movf	___lwmod@divisor,w,c
  1190  0010A6  5C01               	subwf	___lwmod@dividend,w,c
  1191  0010A8  5004               	movf	___lwmod@divisor+1,w,c
  1192  0010AA  5802               	subwfb	___lwmod@dividend+1,w,c
  1193  0010AC  A0D8               	btfss	status,0,c
  1194  0010AE  D004               	goto	l1712
  1195  0010B0  5003               	movf	___lwmod@divisor,w,c
  1196  0010B2  5E01               	subwf	___lwmod@dividend,f,c
  1197  0010B4  5004               	movf	___lwmod@divisor+1,w,c
  1198  0010B6  5A02               	subwfb	___lwmod@dividend+1,f,c
  1199  0010B8                     l1712:
  1200  0010B8  90D8               	bcf	status,0,c
  1201  0010BA  3204               	rrcf	___lwmod@divisor+1,f,c
  1202  0010BC  3203               	rrcf	___lwmod@divisor,f,c
  1203  0010BE  2E05               	decfsz	___lwmod@counter,f,c
  1204  0010C0  D7F1               	goto	l1708
  1205  0010C2                     l821:
  1206  0010C2  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1207  0010C6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1208  0010CA  0012               	return	
  1209  0010CC                     __end_of___lwmod:
  1210                           	opt stack 0
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           wreg	equ	0xFE8
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function ___lwdiv *****************
  1219 ;; Defined at:
  1220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  dividend        2    5[COMRAM] unsigned int 
  1223 ;;  divisor         2    7[COMRAM] unsigned int 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  quotient        2    9[COMRAM] unsigned int 
  1226 ;;  counter         1   11[COMRAM] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  2    5[COMRAM] unsigned int 
  1229 ;; Registers used:
  1230 ;;		wreg, status,2, status,0
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1236 ;;      Params:         4       0       0       0       0       0       0
  1237 ;;      Locals:         3       0       0       0       0       0       0
  1238 ;;      Temps:          0       0       0       0       0       0       0
  1239 ;;      Totals:         7       0       0       0       0       0       0
  1240 ;;Total ram usage:        7 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; This function calls:
  1243 ;;		Nothing
  1244 ;; This function is called by:
  1245 ;;		_i2c_Read
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text7
  1250  000F58                     __ptext7:
  1251                           	opt stack 0
  1252  000F58                     ___lwdiv:
  1253                           	opt stack 29
  1254                           
  1255                           ;incstack = 0
  1256  000F58  0E00               	movlw	0
  1257  000F5A  6E0B               	movwf	___lwdiv@quotient+1,c
  1258  000F5C  0E00               	movlw	0
  1259  000F5E  6E0A               	movwf	___lwdiv@quotient,c
  1260  000F60  5009               	movf	___lwdiv@divisor+1,w,c
  1261  000F62  1008               	iorwf	___lwdiv@divisor,w,c
  1262  000F64  B4D8               	btfsc	status,2,c
  1263  000F66  D01C               	goto	l811
  1264  000F68  0E01               	movlw	1
  1265  000F6A  6E0C               	movwf	___lwdiv@counter,c
  1266  000F6C  D004               	goto	l1686
  1267  000F6E                     l1684:
  1268  000F6E  90D8               	bcf	status,0,c
  1269  000F70  3608               	rlcf	___lwdiv@divisor,f,c
  1270  000F72  3609               	rlcf	___lwdiv@divisor+1,f,c
  1271  000F74  2A0C               	incf	___lwdiv@counter,f,c
  1272  000F76                     l1686:
  1273  000F76  AE09               	btfss	___lwdiv@divisor+1,7,c
  1274  000F78  D7FA               	goto	l1684
  1275  000F7A                     l1688:
  1276  000F7A  90D8               	bcf	status,0,c
  1277  000F7C  360A               	rlcf	___lwdiv@quotient,f,c
  1278  000F7E  360B               	rlcf	___lwdiv@quotient+1,f,c
  1279  000F80  5008               	movf	___lwdiv@divisor,w,c
  1280  000F82  5C06               	subwf	___lwdiv@dividend,w,c
  1281  000F84  5009               	movf	___lwdiv@divisor+1,w,c
  1282  000F86  5807               	subwfb	___lwdiv@dividend+1,w,c
  1283  000F88  A0D8               	btfss	status,0,c
  1284  000F8A  D005               	goto	l1696
  1285  000F8C  5008               	movf	___lwdiv@divisor,w,c
  1286  000F8E  5E06               	subwf	___lwdiv@dividend,f,c
  1287  000F90  5009               	movf	___lwdiv@divisor+1,w,c
  1288  000F92  5A07               	subwfb	___lwdiv@dividend+1,f,c
  1289  000F94  800A               	bsf	___lwdiv@quotient,0,c
  1290  000F96                     l1696:
  1291  000F96  90D8               	bcf	status,0,c
  1292  000F98  3209               	rrcf	___lwdiv@divisor+1,f,c
  1293  000F9A  3208               	rrcf	___lwdiv@divisor,f,c
  1294  000F9C  2E0C               	decfsz	___lwdiv@counter,f,c
  1295  000F9E  D7ED               	goto	l1688
  1296  000FA0                     l811:
  1297  000FA0  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1298  000FA4  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1299  000FA8  0012               	return	
  1300  000FAA                     __end_of___lwdiv:
  1301                           	opt stack 0
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           wreg	equ	0xFE8
  1307                           status	equ	0xFD8
  1308                           
  1309 ;; *************** function _i2c_Port_Init *****************
  1310 ;; Defined at:
  1311 ;;		line 17 in file "../i2c.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;		None               void
  1318 ;; Registers used:
  1319 ;;		None
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1325 ;;      Params:         0       0       0       0       0       0       0
  1326 ;;      Locals:         0       0       0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0
  1328 ;;      Totals:         0       0       0       0       0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text8
  1339  00125E                     __ptext8:
  1340                           	opt stack 0
  1341  00125E                     _i2c_Port_Init:
  1342                           	opt stack 30
  1343                           
  1344                           ;i2c.c: 33: LATDbits.LD0 = 0;
  1345                           
  1346                           ;incstack = 0
  1347  00125E  908C               	bcf	3980,0,c	;volatile
  1348                           
  1349                           ;i2c.c: 34: LATDbits.LD1 = 0;
  1350  001260  928C               	bcf	3980,1,c	;volatile
  1351                           
  1352                           ;i2c.c: 35: TRISDbits.RD0 = 0;
  1353  001262  9095               	bcf	3989,0,c	;volatile
  1354                           
  1355                           ;i2c.c: 36: TRISDbits.RD1 = 0;
  1356  001264  9295               	bcf	3989,1,c	;volatile
  1357                           
  1358                           ;i2c.c: 37: ANSELDbits.ANSD0 = 0;
  1359  001266  010F               	movlb	15	; () banked
  1360  001268  913B               	bcf	59,0,b	;volatile
  1361                           
  1362                           ;i2c.c: 38: ANSELDbits.ANSD1 = 0;
  1363  00126A  010F               	movlb	15	; () banked
  1364  00126C  933B               	bcf	59,1,b	;volatile
  1365                           
  1366                           ; BSR set to: 15
  1367  00126E  0012               	return	
  1368  001270                     __end_of_i2c_Port_Init:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           wreg	equ	0xFE8
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _i2c_Init *****************
  1378 ;; Defined at:
  1379 ;;		line 51 in file "../i2c.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;		None               void
  1386 ;; Registers used:
  1387 ;;		wreg, status,2
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1393 ;;      Params:         0       0       0       0       0       0       0
  1394 ;;      Locals:         0       0       0       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0
  1396 ;;      Totals:         0       0       0       0       0       0       0
  1397 ;;Total ram usage:        0 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text9
  1407  001202                     __ptext9:
  1408                           	opt stack 0
  1409  001202                     _i2c_Init:
  1410                           	opt stack 30
  1411                           
  1412                           ;i2c.c: 55: TRISDbits.TRISD0=1;
  1413                           
  1414                           ; BSR set to: 15
  1415                           ;incstack = 0
  1416  001202  8095               	bsf	3989,0,c	;volatile
  1417                           
  1418                           ;i2c.c: 56: TRISDbits.TRISD1=1;
  1419  001204  8295               	bsf	3989,1,c	;volatile
  1420                           
  1421                           ;i2c.c: 57: SSP2CON1bits.SSPEN = 1;
  1422  001206  8A6C               	bsf	3948,5,c	;volatile
  1423                           
  1424                           ;i2c.c: 58: SSP2CON1 = 0b00101000;
  1425  001208  0E28               	movlw	40
  1426  00120A  6E6C               	movwf	3948,c	;volatile
  1427                           
  1428                           ;i2c.c: 59: SSP2CON2 = 0;
  1429  00120C  0E00               	movlw	0
  1430  00120E  6E6B               	movwf	3947,c	;volatile
  1431                           
  1432                           ;i2c.c: 62: SSP2ADD = 39;
  1433  001210  0E27               	movlw	39
  1434  001212  6E6E               	movwf	3950,c	;volatile
  1435                           
  1436                           ;i2c.c: 64: SSP2STAT = 0b10000000;
  1437  001214  0E80               	movlw	128
  1438  001216  6E6D               	movwf	3949,c	;volatile
  1439  001218  0012               	return	
  1440  00121A                     __end_of_i2c_Init:
  1441                           	opt stack 0
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           wreg	equ	0xFE8
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function _i2c_Command *****************
  1450 ;; Defined at:
  1451 ;;		line 102 in file "../i2c.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  deviceAddres    1    wreg     unsigned char 
  1454 ;;  reg             1    2[COMRAM] unsigned char 
  1455 ;;  command         1    3[COMRAM] unsigned char 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  deviceAddres    1    5[COMRAM] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1467 ;;      Params:         2       0       0       0       0       0       0
  1468 ;;      Locals:         1       0       0       0       0       0       0
  1469 ;;      Temps:          1       0       0       0       0       0       0
  1470 ;;      Totals:         4       0       0       0       0       0       0
  1471 ;;Total ram usage:        4 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    2
  1474 ;; This function calls:
  1475 ;;		_i2c_Start
  1476 ;;		_i2c_Stop
  1477 ;;		_i2c_Wait
  1478 ;;		_i2c_Write
  1479 ;; This function is called by:
  1480 ;;		_main
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text10
  1485  000FF8                     __ptext10:
  1486                           	opt stack 0
  1487  000FF8                     _i2c_Command:
  1488                           	opt stack 28
  1489                           
  1490                           ;incstack = 0
  1491                           ;i2c_Command@deviceAddress stored from wreg
  1492  000FF8  6E06               	movwf	i2c_Command@deviceAddress,c
  1493                           
  1494                           ;i2c.c: 104: i2c_Start();
  1495  000FFA  EC5A  F009         	call	_i2c_Start	;wreg free
  1496                           
  1497                           ;i2c.c: 105: i2c_Write(deviceAddress);
  1498  000FFE  5006               	movf	i2c_Command@deviceAddress,w,c
  1499  001000  EC4E  F009         	call	_i2c_Write
  1500                           
  1501                           ;i2c.c: 106: i2c_Wait();
  1502  001004  EC38  F009         	call	_i2c_Wait	;wreg free
  1503                           
  1504                           ;i2c.c: 107: i2c_Write(reg);
  1505  001008  5003               	movf	i2c_Command@reg,w,c
  1506  00100A  EC4E  F009         	call	_i2c_Write
  1507                           
  1508                           ;i2c.c: 108: i2c_Wait();
  1509  00100E  EC38  F009         	call	_i2c_Wait	;wreg free
  1510                           
  1511                           ;i2c.c: 109: i2c_Write(command);
  1512  001012  5004               	movf	i2c_Command@command,w,c
  1513  001014  EC4E  F009         	call	_i2c_Write
  1514                           
  1515                           ;i2c.c: 110: i2c_Wait();
  1516  001018  EC38  F009         	call	_i2c_Wait	;wreg free
  1517                           
  1518                           ;i2c.c: 111: i2c_Stop();
  1519  00101C  EC54  F009         	call	_i2c_Stop	;wreg free
  1520                           
  1521                           ;i2c.c: 114: _delay((unsigned long)((50)*(10000000/4000.0)));
  1522  001020  0EA3               	movlw	163
  1523  001022  6E05               	movwf	??_i2c_Command& (0+255),c
  1524  001024  0E55               	movlw	85
  1525  001026                     u827:
  1526  001026  2EE8               	decfsz	wreg,f,c
  1527  001028  D7FE               	goto	u827
  1528  00102A  2E05               	decfsz	??_i2c_Command& (0+255),f,c
  1529  00102C  D7FC               	goto	u827
  1530  00102E  F000               	nop	
  1531                           
  1532                           ;i2c.c: 115: _delay((unsigned long)((50)*(10000000/4000.0)));
  1533  001030  0EA3               	movlw	163
  1534  001032  6E05               	movwf	??_i2c_Command& (0+255),c
  1535  001034  0E55               	movlw	85
  1536  001036                     u837:
  1537  001036  2EE8               	decfsz	wreg,f,c
  1538  001038  D7FE               	goto	u837
  1539  00103A  2E05               	decfsz	??_i2c_Command& (0+255),f,c
  1540  00103C  D7FC               	goto	u837
  1541  00103E  F000               	nop	
  1542  001040  0012               	return	
  1543  001042                     __end_of_i2c_Command:
  1544                           	opt stack 0
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           wreg	equ	0xFE8
  1550                           status	equ	0xFD8
  1551                           
  1552 ;; *************** function _i2c_Write *****************
  1553 ;; Defined at:
  1554 ;;		line 96 in file "../i2c.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  data            1    wreg     unsigned char 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;  data            1    1[COMRAM] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;		None               void
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1568 ;;      Params:         0       0       0       0       0       0       0
  1569 ;;      Locals:         1       0       0       0       0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0
  1571 ;;      Totals:         1       0       0       0       0       0       0
  1572 ;;Total ram usage:        1 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    1
  1575 ;; This function calls:
  1576 ;;		_i2c_Wait
  1577 ;; This function is called by:
  1578 ;;		_i2c_Command
  1579 ;;		_i2c_Read
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text11
  1584  00129C                     __ptext11:
  1585                           	opt stack 0
  1586  00129C                     _i2c_Write:
  1587                           	opt stack 28
  1588                           
  1589                           ;incstack = 0
  1590                           ;i2c_Write@data stored from wreg
  1591  00129C  6E02               	movwf	i2c_Write@data,c
  1592                           
  1593                           ;i2c.c: 98: i2c_Wait();
  1594  00129E  EC38  F009         	call	_i2c_Wait	;wreg free
  1595                           
  1596                           ;i2c.c: 99: SSP2BUF = data;
  1597  0012A2  C002  FF6F         	movff	i2c_Write@data,3951	;volatile
  1598  0012A6  0012               	return	
  1599  0012A8                     __end_of_i2c_Write:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           wreg	equ	0xFE8
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _i2c_Stop *****************
  1609 ;; Defined at:
  1610 ;;		line 88 in file "../i2c.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;		None               void
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1624 ;;      Params:         0       0       0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    1
  1631 ;; This function calls:
  1632 ;;		_i2c_Wait
  1633 ;; This function is called by:
  1634 ;;		_i2c_Command
  1635 ;;		_i2c_Read
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text12
  1640  0012A8                     __ptext12:
  1641                           	opt stack 0
  1642  0012A8                     _i2c_Stop:
  1643                           	opt stack 28
  1644                           
  1645                           ;i2c.c: 90: i2c_Wait();
  1646                           
  1647                           ;incstack = 0
  1648  0012A8  EC38  F009         	call	_i2c_Wait	;wreg free
  1649                           
  1650                           ;i2c.c: 91: SSP2CON2bits.PEN=1;
  1651  0012AC  846B               	bsf	3947,2,c	;volatile
  1652  0012AE                     l255:
  1653  0012AE  A46B               	btfss	3947,2,c	;volatile
  1654  0012B0  0012               	return	
  1655  0012B2  D7FD               	goto	l255
  1656  0012B4                     __end_of_i2c_Stop:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           wreg	equ	0xFE8
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _i2c_Start *****************
  1666 ;; Defined at:
  1667 ;;		line 73 in file "../i2c.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;		None               void
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1681 ;;      Params:         0       0       0       0       0       0       0
  1682 ;;      Locals:         0       0       0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0
  1684 ;;      Totals:         0       0       0       0       0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    1
  1688 ;; This function calls:
  1689 ;;		_i2c_Wait
  1690 ;; This function is called by:
  1691 ;;		_i2c_Command
  1692 ;;		_i2c_Read
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text13
  1697  0012B4                     __ptext13:
  1698                           	opt stack 0
  1699  0012B4                     _i2c_Start:
  1700                           	opt stack 28
  1701                           
  1702                           ;i2c.c: 75: i2c_Wait();
  1703                           
  1704                           ;incstack = 0
  1705  0012B4  EC38  F009         	call	_i2c_Wait	;wreg free
  1706                           
  1707                           ;i2c.c: 76: SSP2CON2bits.SEN=1;
  1708  0012B8  806B               	bsf	3947,0,c	;volatile
  1709  0012BA                     l243:
  1710  0012BA  A06B               	btfss	3947,0,c	;volatile
  1711  0012BC  0012               	return	
  1712  0012BE  D7FD               	goto	l243
  1713  0012C0                     __end_of_i2c_Start:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           wreg	equ	0xFE8
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _i2c_Wait *****************
  1723 ;; Defined at:
  1724 ;;		line 68 in file "../i2c.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;		None               void
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1738 ;;      Params:         0       0       0       0       0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0
  1740 ;;      Temps:          1       0       0       0       0       0       0
  1741 ;;      Totals:         1       0       0       0       0       0       0
  1742 ;;Total ram usage:        1 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_i2c_Start
  1748 ;;		_i2c_Restart
  1749 ;;		_i2c_Stop
  1750 ;;		_i2c_Write
  1751 ;;		_i2c_Command
  1752 ;;		_i2c_Read
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text14
  1757  001270                     __ptext14:
  1758                           	opt stack 0
  1759  001270                     _i2c_Wait:
  1760                           	opt stack 28
  1761  001270                     l1540:
  1762  001270  CF6B F001          	movff	3947,??_i2c_Wait	;volatile
  1763  001274  0E1F               	movlw	31
  1764  001276  1601               	andwf	??_i2c_Wait,f,c
  1765  001278  B4D8               	btfsc	status,2,c
  1766  00127A  B46D               	btfsc	3949,2,c	;volatile
  1767  00127C  D7F9               	goto	l1540
  1768  00127E  0012               	return	
  1769  001280                     __end_of_i2c_Wait:
  1770                           	opt stack 0
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           wreg	equ	0xFE8
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _TMR4_Initialize *****************
  1779 ;; Defined at:
  1780 ;;		line 144 in file "../DCMotor.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, status,2
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text15
  1808  00121A                     __ptext15:
  1809                           	opt stack 0
  1810  00121A                     _TMR4_Initialize:
  1811                           	opt stack 30
  1812                           
  1813                           ;DCMotor.c: 149: T4CON = 0x00;
  1814                           
  1815                           ;incstack = 0
  1816  00121A  0E00               	movlw	0
  1817  00121C  010F               	movlb	15	; () banked
  1818  00121E  6F51               	movwf	81,b	;volatile
  1819                           
  1820                           ;DCMotor.c: 152: PR4 = 0xA0;
  1821  001220  0EA0               	movlw	160
  1822  001222  010F               	movlb	15	; () banked
  1823  001224  6F52               	movwf	82,b	;volatile
  1824                           
  1825                           ; BSR set to: 15
  1826                           ;DCMotor.c: 155: TMR4 = 0xFF;
  1827  001226  010F               	movlb	15	; () banked
  1828  001228  6953               	setf	83,b	;volatile
  1829                           
  1830                           ; BSR set to: 15
  1831                           ;DCMotor.c: 158: PIR5bits.TMR4IF = 0;
  1832  00122A  907E               	bcf	3966,0,c	;volatile
  1833                           
  1834                           ; BSR set to: 15
  1835                           ;DCMotor.c: 161: T4CONbits.TMR4ON = 1;
  1836  00122C  010F               	movlb	15	; () banked
  1837  00122E  8551               	bsf	81,2,b	;volatile
  1838                           
  1839                           ; BSR set to: 15
  1840  001230  0012               	return	
  1841  001232                     __end_of_TMR4_Initialize:
  1842                           	opt stack 0
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           wreg	equ	0xFE8
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function _TMR2_Initialize *****************
  1851 ;; Defined at:
  1852 ;;		line 74 in file "../DCMotor.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;		None               void
  1859 ;; Registers used:
  1860 ;;		wreg, status,2
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1866 ;;      Params:         0       0       0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0
  1869 ;;      Totals:         0       0       0       0       0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text16
  1880  001280                     __ptext16:
  1881                           	opt stack 0
  1882  001280                     _TMR2_Initialize:
  1883                           	opt stack 30
  1884                           
  1885                           ;DCMotor.c: 79: T2CON = 0x00;
  1886                           
  1887                           ; BSR set to: 15
  1888                           ;incstack = 0
  1889  001280  0E00               	movlw	0
  1890  001282  6EBA               	movwf	4026,c	;volatile
  1891                           
  1892                           ;DCMotor.c: 82: PR2 = 0xA0;
  1893  001284  0EA0               	movlw	160
  1894  001286  6EBB               	movwf	4027,c	;volatile
  1895                           
  1896                           ;DCMotor.c: 85: TMR2 = 0xFF;
  1897  001288  68BC               	setf	4028,c	;volatile
  1898                           
  1899                           ;DCMotor.c: 88: PIR1bits.TMR2IF = 0;
  1900  00128A  929E               	bcf	3998,1,c	;volatile
  1901                           
  1902                           ;DCMotor.c: 91: T2CONbits.TMR2ON = 1;
  1903  00128C  84BA               	bsf	4026,2,c	;volatile
  1904  00128E  0012               	return	
  1905  001290                     __end_of_TMR2_Initialize:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           wreg	equ	0xFE8
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _Switch_Direction2 *****************
  1915 ;; Defined at:
  1916 ;;		line 164 in file "../DCMotor.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;		None               void
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, prodl, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0
  1933 ;;      Totals:         0       0       0       0       0       0       0
  1934 ;;Total ram usage:        0 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    3
  1937 ;; This function calls:
  1938 ;;		_EPWM2_LoadDutyValue
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text17
  1945  00124A                     __ptext17:
  1946                           	opt stack 0
  1947  00124A                     _Switch_Direction2:
  1948                           	opt stack 27
  1949                           
  1950                           ;DCMotor.c: 167: EPWM2_LoadDutyValue(40);
  1951                           
  1952                           ;incstack = 0
  1953  00124A  0E00               	movlw	0
  1954  00124C  6E2C               	movwf	EPWM2_LoadDutyValue@dutyValue+1,c
  1955  00124E  0E28               	movlw	40
  1956  001250  6E2B               	movwf	EPWM2_LoadDutyValue@dutyValue,c
  1957  001252  EC3D  F007         	call	_EPWM2_LoadDutyValue	;wreg free
  1958                           
  1959                           ;DCMotor.c: 171: CCP2CON = CCP2CON ^ 0b10000000;
  1960  001256  5066               	movf	3942,w,c	;volatile
  1961  001258  0A80               	xorlw	128
  1962  00125A  6E66               	movwf	3942,c	;volatile
  1963  00125C  0012               	return	
  1964  00125E                     __end_of_Switch_Direction2:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           wreg	equ	0xFE8
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _EPWM2_LoadDutyValue *****************
  1974 ;; Defined at:
  1975 ;;		line 133 in file "../DCMotor.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  dutyValue       2   42[COMRAM] int 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;		None               void
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0, prodl, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1989 ;;      Params:         2       0       0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0
  1991 ;;      Temps:          4       0       0       0       0       0       0
  1992 ;;      Totals:         6       0       0       0       0       0       0
  1993 ;;Total ram usage:        6 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    2
  1996 ;; This function calls:
  1997 ;;		___awtoft
  1998 ;;		___ftmul
  1999 ;;		___fttol
  2000 ;; This function is called by:
  2001 ;;		_Switch_Direction2
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text18
  2007  000E7A                     __ptext18:
  2008                           	opt stack 0
  2009  000E7A                     _EPWM2_LoadDutyValue:
  2010                           	opt stack 27
  2011                           
  2012                           ;DCMotor.c: 135: dutyValue = dutyValue * 6.4;
  2013                           
  2014                           ;incstack = 0
  2015  000E7A  0ECD               	movlw	205
  2016  000E7C  6E10               	movwf	___ftmul@f2,c
  2017  000E7E  0ECC               	movlw	204
  2018  000E80  6E11               	movwf	___ftmul@f2+1,c
  2019  000E82  0E40               	movlw	64
  2020  000E84  6E12               	movwf	___ftmul@f2+2,c
  2021  000E86  C02B  F009         	movff	EPWM2_LoadDutyValue@dutyValue,___awtoft@c
  2022  000E8A  C02C  F00A         	movff	EPWM2_LoadDutyValue@dutyValue+1,___awtoft@c+1
  2023  000E8E  EC21  F008         	call	___awtoft	;wreg free
  2024  000E92  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2025  000E96  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2026  000E9A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2027  000E9E  ECAC  F004         	call	___ftmul	;wreg free
  2028  000EA2  C00D  F01C         	movff	?___ftmul,___fttol@f1
  2029  000EA6  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  2030  000EAA  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  2031  000EAE  EC31  F004         	call	___fttol	;wreg free
  2032  000EB2  C01C  F02D         	movff	?___fttol,??_EPWM2_LoadDutyValue
  2033  000EB6  C01D  F02E         	movff	?___fttol+1,??_EPWM2_LoadDutyValue+1
  2034  000EBA  C01E  F02F         	movff	?___fttol+2,??_EPWM2_LoadDutyValue+2
  2035  000EBE  C01F  F030         	movff	?___fttol+3,??_EPWM2_LoadDutyValue+3
  2036  000EC2  C02D  F02B         	movff	??_EPWM2_LoadDutyValue,EPWM2_LoadDutyValue@dutyValue
  2037  000EC6  C02E  F02C         	movff	??_EPWM2_LoadDutyValue+1,EPWM2_LoadDutyValue@dutyValue+1
  2038                           
  2039                           ;DCMotor.c: 138: CCPR2L = ((dutyValue & 0x03FC)>>2);
  2040  000ECA  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  2041  000ECE  C02C  F02E         	movff	EPWM2_LoadDutyValue@dutyValue+1,??_EPWM2_LoadDutyValue+1
  2042  000ED2  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  2043  000ED4  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  2044  000ED6  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  2045  000ED8  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  2046  000EDA  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  2047  000EDC  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  2048  000EDE  502D               	movf	??_EPWM2_LoadDutyValue,w,c
  2049  000EE0  6E67               	movwf	3943,c	;volatile
  2050                           
  2051                           ;DCMotor.c: 141: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  2052  000EE2  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  2053  000EE6  0E03               	movlw	3
  2054  000EE8  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  2055  000EEA  3A2D               	swapf	??_EPWM2_LoadDutyValue,f,c
  2056  000EEC  0EF0               	movlw	240
  2057  000EEE  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  2058  000EF0  5066               	movf	3942,w,c	;volatile
  2059  000EF2  0BCF               	andlw	207
  2060  000EF4  102D               	iorwf	??_EPWM2_LoadDutyValue,w,c
  2061  000EF6  6E66               	movwf	3942,c	;volatile
  2062  000EF8  0012               	return	
  2063  000EFA                     __end_of_EPWM2_LoadDutyValue:
  2064                           	opt stack 0
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           wreg	equ	0xFE8
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _Switch_Direction1 *****************
  2073 ;; Defined at:
  2074 ;;		line 94 in file "../DCMotor.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;		None               void
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0, prodl, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2088 ;;      Params:         0       0       0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0
  2091 ;;      Totals:         0       0       0       0       0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    3
  2095 ;; This function calls:
  2096 ;;		_EPWM1_LoadDutyValue
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text19
  2103  001232                     __ptext19:
  2104                           	opt stack 0
  2105  001232                     _Switch_Direction1:
  2106                           	opt stack 27
  2107                           
  2108                           ;DCMotor.c: 97: EPWM1_LoadDutyValue(40);
  2109                           
  2110                           ;incstack = 0
  2111  001232  0E00               	movlw	0
  2112  001234  6E2C               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
  2113  001236  0E28               	movlw	40
  2114  001238  6E2B               	movwf	EPWM1_LoadDutyValue@dutyValue,c
  2115  00123A  EC77  F006         	call	_EPWM1_LoadDutyValue	;wreg free
  2116                           
  2117                           ;DCMotor.c: 101: CCP3CON = CCP3CON ^ 0b10000000;
  2118  00123E  010F               	movlb	15	; () banked
  2119  001240  515D               	movf	93,w,b	;volatile
  2120  001242  0A80               	xorlw	128
  2121  001244  010F               	movlb	15	; () banked
  2122  001246  6F5D               	movwf	93,b	;volatile
  2123                           
  2124                           ; BSR set to: 15
  2125  001248  0012               	return	
  2126  00124A                     __end_of_Switch_Direction1:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           wreg	equ	0xFE8
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _EPWM1_LoadDutyValue *****************
  2136 ;; Defined at:
  2137 ;;		line 63 in file "../DCMotor.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  dutyValue       2   42[COMRAM] int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0, prodl, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2151 ;;      Params:         2       0       0       0       0       0       0
  2152 ;;      Locals:         0       0       0       0       0       0       0
  2153 ;;      Temps:          4       0       0       0       0       0       0
  2154 ;;      Totals:         6       0       0       0       0       0       0
  2155 ;;Total ram usage:        6 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    2
  2158 ;; This function calls:
  2159 ;;		___awtoft
  2160 ;;		___ftmul
  2161 ;;		___fttol
  2162 ;; This function is called by:
  2163 ;;		_Switch_Direction1
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text20
  2169  000CEE                     __ptext20:
  2170                           	opt stack 0
  2171  000CEE                     _EPWM1_LoadDutyValue:
  2172                           	opt stack 27
  2173                           
  2174                           ;DCMotor.c: 65: dutyValue = dutyValue * 6.4;
  2175                           
  2176                           ; BSR set to: 15
  2177                           ;incstack = 0
  2178  000CEE  0ECD               	movlw	205
  2179  000CF0  6E10               	movwf	___ftmul@f2,c
  2180  000CF2  0ECC               	movlw	204
  2181  000CF4  6E11               	movwf	___ftmul@f2+1,c
  2182  000CF6  0E40               	movlw	64
  2183  000CF8  6E12               	movwf	___ftmul@f2+2,c
  2184  000CFA  C02B  F009         	movff	EPWM1_LoadDutyValue@dutyValue,___awtoft@c
  2185  000CFE  C02C  F00A         	movff	EPWM1_LoadDutyValue@dutyValue+1,___awtoft@c+1
  2186  000D02  EC21  F008         	call	___awtoft	;wreg free
  2187  000D06  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2188  000D0A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2189  000D0E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2190  000D12  ECAC  F004         	call	___ftmul	;wreg free
  2191  000D16  C00D  F01C         	movff	?___ftmul,___fttol@f1
  2192  000D1A  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  2193  000D1E  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  2194  000D22  EC31  F004         	call	___fttol	;wreg free
  2195  000D26  C01C  F02D         	movff	?___fttol,??_EPWM1_LoadDutyValue
  2196  000D2A  C01D  F02E         	movff	?___fttol+1,??_EPWM1_LoadDutyValue+1
  2197  000D2E  C01E  F02F         	movff	?___fttol+2,??_EPWM1_LoadDutyValue+2
  2198  000D32  C01F  F030         	movff	?___fttol+3,??_EPWM1_LoadDutyValue+3
  2199  000D36  C02D  F02B         	movff	??_EPWM1_LoadDutyValue,EPWM1_LoadDutyValue@dutyValue
  2200  000D3A  C02E  F02C         	movff	??_EPWM1_LoadDutyValue+1,EPWM1_LoadDutyValue@dutyValue+1
  2201                           
  2202                           ;DCMotor.c: 68: CCPR3L = ((dutyValue & 0x03FC)>>2);
  2203  000D3E  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  2204  000D42  C02C  F02E         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
  2205  000D46  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  2206  000D48  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  2207  000D4A  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  2208  000D4C  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  2209  000D4E  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  2210  000D50  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  2211  000D52  502D               	movf	??_EPWM1_LoadDutyValue,w,c
  2212  000D54  010F               	movlb	15	; () banked
  2213  000D56  6F5E               	movwf	94,b	;volatile
  2214                           
  2215                           ; BSR set to: 15
  2216                           ;DCMotor.c: 71: CCP3CON = (CCP3CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  2217  000D58  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  2218  000D5C  0E03               	movlw	3
  2219  000D5E  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  2220  000D60  3A2D               	swapf	??_EPWM1_LoadDutyValue,f,c
  2221  000D62  0EF0               	movlw	240
  2222  000D64  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  2223  000D66  010F               	movlb	15	; () banked
  2224  000D68  515D               	movf	93,w,b	;volatile
  2225  000D6A  0BCF               	andlw	207
  2226  000D6C  102D               	iorwf	??_EPWM1_LoadDutyValue,w,c
  2227  000D6E  010F               	movlb	15	; () banked
  2228  000D70  6F5D               	movwf	93,b	;volatile
  2229                           
  2230                           ; BSR set to: 15
  2231  000D72  0012               	return	
  2232  000D74                     __end_of_EPWM1_LoadDutyValue:
  2233                           	opt stack 0
  2234                           tblptru	equ	0xFF8
  2235                           tblptrh	equ	0xFF7
  2236                           tblptrl	equ	0xFF6
  2237                           tablat	equ	0xFF5
  2238                           wreg	equ	0xFE8
  2239                           status	equ	0xFD8
  2240                           
  2241 ;; *************** function ___fttol *****************
  2242 ;; Defined at:
  2243 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  f1              3   27[COMRAM] float 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  lval            4   37[COMRAM] unsigned long 
  2248 ;;  exp1            1   41[COMRAM] unsigned char 
  2249 ;;  sign1           1   36[COMRAM] unsigned char 
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  4   27[COMRAM] long 
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, status,0
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2259 ;;      Params:         4       0       0       0       0       0       0
  2260 ;;      Locals:         6       0       0       0       0       0       0
  2261 ;;      Temps:          5       0       0       0       0       0       0
  2262 ;;      Totals:        15       0       0       0       0       0       0
  2263 ;;Total ram usage:       15 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_EPWM1_LoadDutyValue
  2269 ;;		_EPWM2_LoadDutyValue
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text21
  2274  000862                     __ptext21:
  2275                           	opt stack 0
  2276  000862                     ___fttol:
  2277                           	opt stack 28
  2278                           
  2279                           ; BSR set to: 15
  2280                           ;incstack = 0
  2281  000862  C01E  F020         	movff	___fttol@f1+2,??___fttol
  2282  000866  6A21               	clrf	(??___fttol+1)& (0+255),c
  2283  000868  6A22               	clrf	(??___fttol+2)& (0+255),c
  2284  00086A  341D               	rlcf	___fttol@f1+1,w,c
  2285  00086C  3620               	rlcf	??___fttol& (0+255),f,c
  2286  00086E  E301               	bnc	u171
  2287  000870  8021               	bsf	(??___fttol+1)& (0+255),0,c
  2288  000872                     u171:
  2289  000872  5020               	movf	??___fttol,w,c
  2290  000874  6E2A               	movwf	___fttol@exp1,c
  2291  000876  662A               	tstfsz	___fttol@exp1& (0+255),c
  2292  000878  D009               	goto	l986
  2293  00087A  0E00               	movlw	0
  2294  00087C  6E1C               	movwf	?___fttol,c
  2295  00087E  0E00               	movlw	0
  2296  000880  6E1D               	movwf	?___fttol+1,c
  2297  000882  0E00               	movlw	0
  2298  000884  6E1E               	movwf	?___fttol+2,c
  2299  000886  0E00               	movlw	0
  2300  000888  6E1F               	movwf	?___fttol+3,c
  2301  00088A  0012               	return	
  2302  00088C                     l986:
  2303  00088C  0E17               	movlw	23
  2304  00088E  6E20               	movwf	??___fttol& (0+255),c
  2305  000890  C01C  F021         	movff	___fttol@f1,??___fttol+1
  2306  000894  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  2307  000898  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  2308  00089C  2820               	incf	??___fttol,w,c
  2309  00089E  6E24               	movwf	(??___fttol+4)& (0+255),c
  2310  0008A0  D004               	goto	u190
  2311  0008A2                     u195:
  2312  0008A2  90D8               	bcf	status,0,c
  2313  0008A4  3223               	rrcf	??___fttol+3,f,c
  2314  0008A6  3222               	rrcf	??___fttol+2,f,c
  2315  0008A8  3221               	rrcf	??___fttol+1,f,c
  2316  0008AA                     u190:
  2317  0008AA  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  2318  0008AC  D7FA               	goto	u195
  2319  0008AE  5021               	movf	??___fttol+1,w,c
  2320  0008B0  6E25               	movwf	___fttol@sign1,c
  2321  0008B2  8E1D               	bsf	___fttol@f1+1,7,c
  2322  0008B4  0EFF               	movlw	255
  2323  0008B6  161C               	andwf	___fttol@f1,f,c
  2324  0008B8  0EFF               	movlw	255
  2325  0008BA  161D               	andwf	___fttol@f1+1,f,c
  2326  0008BC  0E00               	movlw	0
  2327  0008BE  161E               	andwf	___fttol@f1+2,f,c
  2328  0008C0  501C               	movf	___fttol@f1,w,c
  2329  0008C2  6E26               	movwf	___fttol@lval,c
  2330  0008C4  501D               	movf	___fttol@f1+1,w,c
  2331  0008C6  6E27               	movwf	___fttol@lval+1,c
  2332  0008C8  501E               	movf	___fttol@f1+2,w,c
  2333  0008CA  6E28               	movwf	___fttol@lval+2,c
  2334  0008CC  6A29               	clrf	___fttol@lval+3,c
  2335  0008CE  0E8E               	movlw	142
  2336  0008D0  5E2A               	subwf	___fttol@exp1,f,c
  2337  0008D2  AE2A               	btfss	___fttol@exp1,7,c
  2338  0008D4  D019               	goto	l1008
  2339  0008D6  502A               	movf	___fttol@exp1,w,c
  2340  0008D8  0A80               	xorlw	128
  2341  0008DA  6E20               	movwf	??___fttol& (0+255),c
  2342  0008DC  0EF1               	movlw	241
  2343  0008DE  0A80               	xorlw	128
  2344  0008E0  5C20               	subwf	??___fttol,w,c
  2345  0008E2  B0D8               	btfsc	status,0,c
  2346  0008E4  D009               	goto	l1004
  2347  0008E6  0E00               	movlw	0
  2348  0008E8  6E1C               	movwf	?___fttol,c
  2349  0008EA  0E00               	movlw	0
  2350  0008EC  6E1D               	movwf	?___fttol+1,c
  2351  0008EE  0E00               	movlw	0
  2352  0008F0  6E1E               	movwf	?___fttol+2,c
  2353  0008F2  0E00               	movlw	0
  2354  0008F4  6E1F               	movwf	?___fttol+3,c
  2355  0008F6  0012               	return	
  2356  0008F8                     l1004:
  2357  0008F8  90D8               	bcf	status,0,c
  2358  0008FA  3229               	rrcf	___fttol@lval+3,f,c
  2359  0008FC  3228               	rrcf	___fttol@lval+2,f,c
  2360  0008FE  3227               	rrcf	___fttol@lval+1,f,c
  2361  000900  3226               	rrcf	___fttol@lval,f,c
  2362  000902  3E2A               	incfsz	___fttol@exp1,f,c
  2363  000904  D7F9               	goto	l1004
  2364  000906  D014               	goto	l1018
  2365  000908                     l1008:
  2366  000908  0E17               	movlw	23
  2367  00090A  642A               	cpfsgt	___fttol@exp1,c
  2368  00090C  D00F               	goto	l1016
  2369  00090E  0E00               	movlw	0
  2370  000910  6E1C               	movwf	?___fttol,c
  2371  000912  0E00               	movlw	0
  2372  000914  6E1D               	movwf	?___fttol+1,c
  2373  000916  0E00               	movlw	0
  2374  000918  6E1E               	movwf	?___fttol+2,c
  2375  00091A  0E00               	movlw	0
  2376  00091C  6E1F               	movwf	?___fttol+3,c
  2377  00091E  0012               	return	
  2378  000920                     l1014:
  2379  000920  90D8               	bcf	status,0,c
  2380  000922  3626               	rlcf	___fttol@lval,f,c
  2381  000924  3627               	rlcf	___fttol@lval+1,f,c
  2382  000926  3628               	rlcf	___fttol@lval+2,f,c
  2383  000928  3629               	rlcf	___fttol@lval+3,f,c
  2384  00092A  062A               	decf	___fttol@exp1,f,c
  2385  00092C                     l1016:
  2386  00092C  662A               	tstfsz	___fttol@exp1,c
  2387  00092E  D7F8               	goto	l1014
  2388  000930                     l1018:
  2389  000930  5025               	movf	___fttol@sign1,w,c
  2390  000932  B4D8               	btfsc	status,2,c
  2391  000934  D008               	goto	l1022
  2392  000936  1E29               	comf	___fttol@lval+3,f,c
  2393  000938  1E28               	comf	___fttol@lval+2,f,c
  2394  00093A  1E27               	comf	___fttol@lval+1,f,c
  2395  00093C  6C26               	negf	___fttol@lval,c
  2396  00093E  0E00               	movlw	0
  2397  000940  2227               	addwfc	___fttol@lval+1,f,c
  2398  000942  2228               	addwfc	___fttol@lval+2,f,c
  2399  000944  2229               	addwfc	___fttol@lval+3,f,c
  2400  000946                     l1022:
  2401  000946  C026  F01C         	movff	___fttol@lval,?___fttol
  2402  00094A  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  2403  00094E  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  2404  000952  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  2405  000956  0012               	return	
  2406  000958                     __end_of___fttol:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           wreg	equ	0xFE8
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function ___ftmul *****************
  2416 ;; Defined at:
  2417 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  f1              3   12[COMRAM] float 
  2420 ;;  f2              3   15[COMRAM] float 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  2423 ;;  sign            1   26[COMRAM] unsigned char 
  2424 ;;  cntr            1   25[COMRAM] unsigned char 
  2425 ;;  exp             1   24[COMRAM] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  3   12[COMRAM] float 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2435 ;;      Params:         6       0       0       0       0       0       0
  2436 ;;      Locals:         6       0       0       0       0       0       0
  2437 ;;      Temps:          3       0       0       0       0       0       0
  2438 ;;      Totals:        15       0       0       0       0       0       0
  2439 ;;Total ram usage:       15 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    1
  2442 ;; This function calls:
  2443 ;;		___ftpack
  2444 ;; This function is called by:
  2445 ;;		_EPWM1_LoadDutyValue
  2446 ;;		_EPWM2_LoadDutyValue
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text22
  2451  000958                     __ptext22:
  2452                           	opt stack 0
  2453  000958                     ___ftmul:
  2454                           	opt stack 27
  2455                           
  2456                           ;incstack = 0
  2457  000958  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  2458  00095C  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2459  00095E  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2460  000960  340E               	rlcf	___ftmul@f1+1,w,c
  2461  000962  3613               	rlcf	??___ftmul& (0+255),f,c
  2462  000964  E301               	bnc	u101
  2463  000966  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2464  000968                     u101:
  2465  000968  5013               	movf	??___ftmul,w,c
  2466  00096A  6E19               	movwf	___ftmul@exp,c
  2467  00096C  6619               	tstfsz	___ftmul@exp& (0+255),c
  2468  00096E  D007               	goto	l926
  2469  000970  0E00               	movlw	0
  2470  000972  6E0D               	movwf	?___ftmul,c
  2471  000974  0E00               	movlw	0
  2472  000976  6E0E               	movwf	?___ftmul+1,c
  2473  000978  0E00               	movlw	0
  2474  00097A  6E0F               	movwf	?___ftmul+2,c
  2475  00097C  0012               	return	
  2476  00097E                     l926:
  2477  00097E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  2478  000982  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2479  000984  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2480  000986  3411               	rlcf	___ftmul@f2+1,w,c
  2481  000988  3613               	rlcf	??___ftmul& (0+255),f,c
  2482  00098A  E301               	bnc	u121
  2483  00098C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2484  00098E                     u121:
  2485  00098E  5013               	movf	??___ftmul,w,c
  2486  000990  6E1B               	movwf	___ftmul@sign,c
  2487  000992  661B               	tstfsz	___ftmul@sign& (0+255),c
  2488  000994  D007               	goto	l932
  2489  000996  0E00               	movlw	0
  2490  000998  6E0D               	movwf	?___ftmul,c
  2491  00099A  0E00               	movlw	0
  2492  00099C  6E0E               	movwf	?___ftmul+1,c
  2493  00099E  0E00               	movlw	0
  2494  0009A0  6E0F               	movwf	?___ftmul+2,c
  2495  0009A2  0012               	return	
  2496  0009A4                     l932:
  2497  0009A4  501B               	movf	___ftmul@sign,w,c
  2498  0009A6  0F7B               	addlw	123
  2499  0009A8  2619               	addwf	___ftmul@exp,f,c
  2500  0009AA  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  2501  0009AE  5012               	movf	___ftmul@f2+2,w,c
  2502  0009B0  1A1B               	xorwf	___ftmul@sign,f,c
  2503  0009B2  0E80               	movlw	128
  2504  0009B4  161B               	andwf	___ftmul@sign,f,c
  2505  0009B6  8E0E               	bsf	___ftmul@f1+1,7,c
  2506  0009B8  8E11               	bsf	___ftmul@f2+1,7,c
  2507  0009BA  0EFF               	movlw	255
  2508  0009BC  1610               	andwf	___ftmul@f2,f,c
  2509  0009BE  0EFF               	movlw	255
  2510  0009C0  1611               	andwf	___ftmul@f2+1,f,c
  2511  0009C2  0E00               	movlw	0
  2512  0009C4  1612               	andwf	___ftmul@f2+2,f,c
  2513  0009C6  0E00               	movlw	0
  2514  0009C8  6E16               	movwf	___ftmul@f3_as_product,c
  2515  0009CA  0E00               	movlw	0
  2516  0009CC  6E17               	movwf	___ftmul@f3_as_product+1,c
  2517  0009CE  0E00               	movlw	0
  2518  0009D0  6E18               	movwf	___ftmul@f3_as_product+2,c
  2519  0009D2  0E07               	movlw	7
  2520  0009D4  6E1A               	movwf	___ftmul@cntr,c
  2521  0009D6                     l946:
  2522  0009D6  A00D               	btfss	___ftmul@f1,0,c
  2523  0009D8  D006               	goto	l950
  2524  0009DA  5010               	movf	___ftmul@f2,w,c
  2525  0009DC  2616               	addwf	___ftmul@f3_as_product,f,c
  2526  0009DE  5011               	movf	___ftmul@f2+1,w,c
  2527  0009E0  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  2528  0009E2  5012               	movf	___ftmul@f2+2,w,c
  2529  0009E4  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  2530  0009E6                     l950:
  2531  0009E6  90D8               	bcf	status,0,c
  2532  0009E8  320F               	rrcf	___ftmul@f1+2,f,c
  2533  0009EA  320E               	rrcf	___ftmul@f1+1,f,c
  2534  0009EC  320D               	rrcf	___ftmul@f1,f,c
  2535  0009EE  90D8               	bcf	status,0,c
  2536  0009F0  3610               	rlcf	___ftmul@f2,f,c
  2537  0009F2  3611               	rlcf	___ftmul@f2+1,f,c
  2538  0009F4  3612               	rlcf	___ftmul@f2+2,f,c
  2539  0009F6  2E1A               	decfsz	___ftmul@cntr,f,c
  2540  0009F8  D7EE               	goto	l946
  2541  0009FA  0E09               	movlw	9
  2542  0009FC  6E1A               	movwf	___ftmul@cntr,c
  2543  0009FE                     l956:
  2544  0009FE  A00D               	btfss	___ftmul@f1,0,c
  2545  000A00  D006               	goto	l960
  2546  000A02  5010               	movf	___ftmul@f2,w,c
  2547  000A04  2616               	addwf	___ftmul@f3_as_product,f,c
  2548  000A06  5011               	movf	___ftmul@f2+1,w,c
  2549  000A08  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  2550  000A0A  5012               	movf	___ftmul@f2+2,w,c
  2551  000A0C  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  2552  000A0E                     l960:
  2553  000A0E  90D8               	bcf	status,0,c
  2554  000A10  320F               	rrcf	___ftmul@f1+2,f,c
  2555  000A12  320E               	rrcf	___ftmul@f1+1,f,c
  2556  000A14  320D               	rrcf	___ftmul@f1,f,c
  2557  000A16  90D8               	bcf	status,0,c
  2558  000A18  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  2559  000A1A  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  2560  000A1C  3216               	rrcf	___ftmul@f3_as_product,f,c
  2561  000A1E  2E1A               	decfsz	___ftmul@cntr,f,c
  2562  000A20  D7EE               	goto	l956
  2563  000A22  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2564  000A26  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2565  000A2A  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2566  000A2E  C019  F004         	movff	___ftmul@exp,___ftpack@exp
  2567  000A32  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  2568  000A36  EC89  F005         	call	___ftpack	;wreg free
  2569  000A3A  C001  F00D         	movff	?___ftpack,?___ftmul
  2570  000A3E  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  2571  000A42  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  2572  000A46  0012               	return	
  2573  000A48                     __end_of___ftmul:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           wreg	equ	0xFE8
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function ___awtoft *****************
  2583 ;; Defined at:
  2584 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  c               2    8[COMRAM] int 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  sign            1   11[COMRAM] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  3    8[COMRAM] float 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0, prodl, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2598 ;;      Params:         3       0       0       0       0       0       0
  2599 ;;      Locals:         1       0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0
  2601 ;;      Totals:         4       0       0       0       0       0       0
  2602 ;;Total ram usage:        4 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    1
  2605 ;; This function calls:
  2606 ;;		___ftpack
  2607 ;; This function is called by:
  2608 ;;		_EPWM1_LoadDutyValue
  2609 ;;		_EPWM2_LoadDutyValue
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text23
  2614  001042                     __ptext23:
  2615                           	opt stack 0
  2616  001042                     ___awtoft:
  2617                           	opt stack 27
  2618                           
  2619                           ;incstack = 0
  2620  001042  0E00               	movlw	0
  2621  001044  6E0C               	movwf	___awtoft@sign,c
  2622  001046  500A               	movf	___awtoft@c+1,w,c
  2623  001048  0A80               	xorlw	128
  2624  00104A  6EF3               	movwf	prodl,c
  2625  00104C  0E80               	movlw	128
  2626  00104E  5CF3               	subwf	prodl,w,c
  2627  001050  0E00               	movlw	0
  2628  001052  B4D8               	btfsc	status,2,c
  2629  001054  5C09               	subwf	___awtoft@c,w,c
  2630  001056  B0D8               	btfsc	status,0,c
  2631  001058  D006               	goto	l976
  2632  00105A  6C09               	negf	___awtoft@c,c
  2633  00105C  1E0A               	comf	___awtoft@c+1,f,c
  2634  00105E  B0D8               	btfsc	status,0,c
  2635  001060  2A0A               	incf	___awtoft@c+1,f,c
  2636  001062  0E01               	movlw	1
  2637  001064  6E0C               	movwf	___awtoft@sign,c
  2638  001066                     l976:
  2639  001066  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2640  00106A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2641  00106E  6A03               	clrf	___ftpack@arg+2,c
  2642  001070  0E8E               	movlw	142
  2643  001072  6E04               	movwf	___ftpack@exp,c
  2644  001074  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  2645  001078  EC89  F005         	call	___ftpack	;wreg free
  2646  00107C  C001  F009         	movff	?___ftpack,?___awtoft
  2647  001080  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2648  001084  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2649  001088  0012               	return	
  2650  00108A                     __end_of___awtoft:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           prodl	equ	0xFF3
  2657                           wreg	equ	0xFE8
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function ___ftpack *****************
  2661 ;; Defined at:
  2662 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  arg             3    0[COMRAM] unsigned um
  2665 ;;  exp             1    3[COMRAM] unsigned char 
  2666 ;;  sign            1    4[COMRAM] unsigned char 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  3    0[COMRAM] float 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2678 ;;      Params:         5       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0
  2680 ;;      Temps:          3       0       0       0       0       0       0
  2681 ;;      Totals:         8       0       0       0       0       0       0
  2682 ;;Total ram usage:        8 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		___awtoft
  2688 ;;		___ftmul
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text24
  2693  000B12                     __ptext24:
  2694                           	opt stack 0
  2695  000B12                     ___ftpack:
  2696                           	opt stack 27
  2697                           
  2698                           ;incstack = 0
  2699  000B12  5004               	movf	___ftpack@exp,w,c
  2700  000B14  B4D8               	btfsc	status,2,c
  2701  000B16  D005               	goto	l884
  2702  000B18  5001               	movf	___ftpack@arg,w,c
  2703  000B1A  1002               	iorwf	___ftpack@arg+1,w,c
  2704  000B1C  1003               	iorwf	___ftpack@arg+2,w,c
  2705  000B1E  A4D8               	btfss	status,2,c
  2706  000B20  D00C               	goto	l890
  2707  000B22                     l884:
  2708  000B22  0E00               	movlw	0
  2709  000B24  6E01               	movwf	?___ftpack,c
  2710  000B26  0E00               	movlw	0
  2711  000B28  6E02               	movwf	?___ftpack+1,c
  2712  000B2A  0E00               	movlw	0
  2713  000B2C  6E03               	movwf	?___ftpack+2,c
  2714  000B2E  0012               	return	
  2715  000B30                     l888:
  2716  000B30  2A04               	incf	___ftpack@exp,f,c
  2717  000B32  90D8               	bcf	status,0,c
  2718  000B34  3203               	rrcf	___ftpack@arg+2,f,c
  2719  000B36  3202               	rrcf	___ftpack@arg+1,f,c
  2720  000B38  3201               	rrcf	___ftpack@arg,f,c
  2721  000B3A                     l890:
  2722  000B3A  0E00               	movlw	0
  2723  000B3C  1401               	andwf	___ftpack@arg,w,c
  2724  000B3E  6E06               	movwf	??___ftpack& (0+255),c
  2725  000B40  0E00               	movlw	0
  2726  000B42  1402               	andwf	___ftpack@arg+1,w,c
  2727  000B44  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2728  000B46  0EFE               	movlw	254
  2729  000B48  1403               	andwf	___ftpack@arg+2,w,c
  2730  000B4A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2731  000B4C  5006               	movf	??___ftpack,w,c
  2732  000B4E  1007               	iorwf	??___ftpack+1,w,c
  2733  000B50  1008               	iorwf	??___ftpack+2,w,c
  2734  000B52  B4D8               	btfsc	status,2,c
  2735  000B54  D00C               	goto	l896
  2736  000B56  D7EC               	goto	l888
  2737  000B58                     l892:
  2738  000B58  2A04               	incf	___ftpack@exp,f,c
  2739  000B5A  0E01               	movlw	1
  2740  000B5C  2601               	addwf	___ftpack@arg,f,c
  2741  000B5E  0E00               	movlw	0
  2742  000B60  2202               	addwfc	___ftpack@arg+1,f,c
  2743  000B62  0E00               	movlw	0
  2744  000B64  2203               	addwfc	___ftpack@arg+2,f,c
  2745  000B66  90D8               	bcf	status,0,c
  2746  000B68  3203               	rrcf	___ftpack@arg+2,f,c
  2747  000B6A  3202               	rrcf	___ftpack@arg+1,f,c
  2748  000B6C  3201               	rrcf	___ftpack@arg,f,c
  2749  000B6E                     l896:
  2750  000B6E  0E00               	movlw	0
  2751  000B70  1401               	andwf	___ftpack@arg,w,c
  2752  000B72  6E06               	movwf	??___ftpack& (0+255),c
  2753  000B74  0E00               	movlw	0
  2754  000B76  1402               	andwf	___ftpack@arg+1,w,c
  2755  000B78  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2756  000B7A  0EFF               	movlw	255
  2757  000B7C  1403               	andwf	___ftpack@arg+2,w,c
  2758  000B7E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2759  000B80  5006               	movf	??___ftpack,w,c
  2760  000B82  1007               	iorwf	??___ftpack+1,w,c
  2761  000B84  1008               	iorwf	??___ftpack+2,w,c
  2762  000B86  B4D8               	btfsc	status,2,c
  2763  000B88  D006               	goto	l900
  2764  000B8A  D7E6               	goto	l892
  2765  000B8C                     l898:
  2766  000B8C  0604               	decf	___ftpack@exp,f,c
  2767  000B8E  90D8               	bcf	status,0,c
  2768  000B90  3601               	rlcf	___ftpack@arg,f,c
  2769  000B92  3602               	rlcf	___ftpack@arg+1,f,c
  2770  000B94  3603               	rlcf	___ftpack@arg+2,f,c
  2771  000B96                     l900:
  2772  000B96  AE02               	btfss	___ftpack@arg+1,7,c
  2773  000B98  D7F9               	goto	l898
  2774  000B9A  A004               	btfss	___ftpack@exp,0,c
  2775  000B9C  9E02               	bcf	___ftpack@arg+1,7,c
  2776  000B9E  90D8               	bcf	status,0,c
  2777  000BA0  3204               	rrcf	___ftpack@exp,f,c
  2778  000BA2  5004               	movf	___ftpack@exp,w,c
  2779  000BA4  1203               	iorwf	___ftpack@arg+2,f,c
  2780  000BA6  5005               	movf	___ftpack@sign,w,c
  2781  000BA8  A4D8               	btfss	status,2,c
  2782  000BAA  8E03               	bsf	___ftpack@arg+2,7,c
  2783  000BAC  C001  F001         	movff	___ftpack@arg,?___ftpack
  2784  000BB0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2785  000BB4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2786  000BB8  0012               	return	
  2787  000BBA                     __end_of___ftpack:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           prodl	equ	0xFF3
  2794                           wreg	equ	0xFE8
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _LCD_write *****************
  2798 ;; Defined at:
  2799 ;;		line 82 in file "../LCD.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  data            2    4[COMRAM] PTR unsigned char 
  2802 ;;		 -> STR_1(6), 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  i               2    8[COMRAM] int 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;		None               void
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2814 ;;      Params:         2       0       0       0       0       0       0
  2815 ;;      Locals:         2       0       0       0       0       0       0
  2816 ;;      Temps:          2       0       0       0       0       0       0
  2817 ;;      Totals:         6       0       0       0       0       0       0
  2818 ;;Total ram usage:        6 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    1
  2821 ;; This function calls:
  2822 ;;		_LCD_writeChar
  2823 ;;		_place_lcd_cursor
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text25
  2830  000D74                     __ptext25:
  2831                           	opt stack 0
  2832  000D74                     _LCD_write:
  2833                           	opt stack 29
  2834                           
  2835                           ;LCD.c: 86: for(int i=0; data[i]!='\0'; i++)
  2836                           
  2837                           ;incstack = 0
  2838  000D74  0E00               	movlw	0
  2839  000D76  6E0A               	movwf	LCD_write@i+1,c
  2840  000D78  0E00               	movlw	0
  2841  000D7A  6E09               	movwf	LCD_write@i,c
  2842  000D7C  D02B               	goto	l1824
  2843  000D7E                     l1814:
  2844                           
  2845                           ;LCD.c: 87: {
  2846                           ;LCD.c: 88: if(data[i] == '\n')
  2847  000D7E  C005  F007         	movff	LCD_write@data,??_LCD_write
  2848  000D82  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  2849  000D86  5009               	movf	LCD_write@i,w,c
  2850  000D88  2607               	addwf	??_LCD_write,f,c
  2851  000D8A  500A               	movf	LCD_write@i+1,w,c
  2852  000D8C  2208               	addwfc	??_LCD_write+1,f,c
  2853  000D8E  C007  FFF6         	movff	??_LCD_write,tblptrl
  2854  000D92  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  2855  000D96                     	if	0	;tblptru may be non-zero
  2856  000D96                     	endif
  2857  000D96                     	if	0	;tblptru may be non-zero
  2858  000D96                     	endif
  2859  000D96  0008               	tblrd		*
  2860  000D98  50F5               	movf	tablat,w,c
  2861  000D9A  0A0A               	xorlw	10
  2862  000D9C  A4D8               	btfss	status,2,c
  2863  000D9E  D008               	goto	l1820
  2864                           
  2865                           ;LCD.c: 89: {
  2866                           ;LCD.c: 91: ++yPos;
  2867  000DA0  4A31               	infsnz	_yPos,f,c
  2868  000DA2  2A32               	incf	_yPos+1,f,c
  2869                           
  2870                           ;LCD.c: 92: place_lcd_cursor(0,yPos);
  2871  000DA4  C031  F001         	movff	_yPos,place_lcd_cursor@y
  2872  000DA8  0E00               	movlw	0
  2873  000DAA  ECD5  F007         	call	_place_lcd_cursor
  2874                           
  2875                           ;LCD.c: 93: }
  2876  000DAE  D010               	goto	l1822
  2877  000DB0                     l1820:
  2878                           
  2879                           ;LCD.c: 94: else
  2880                           ;LCD.c: 95: {
  2881                           ;LCD.c: 97: LCD_writeChar(data[i]);
  2882  000DB0  C005  F007         	movff	LCD_write@data,??_LCD_write
  2883  000DB4  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  2884  000DB8  5009               	movf	LCD_write@i,w,c
  2885  000DBA  2607               	addwf	??_LCD_write,f,c
  2886  000DBC  500A               	movf	LCD_write@i+1,w,c
  2887  000DBE  2208               	addwfc	??_LCD_write+1,f,c
  2888  000DC0  C007  FFF6         	movff	??_LCD_write,tblptrl
  2889  000DC4  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  2890  000DC8                     	if	0	;tblptru may be non-zero
  2891  000DC8                     	endif
  2892  000DC8                     	if	0	;tblptru may be non-zero
  2893  000DC8                     	endif
  2894  000DC8  0008               	tblrd		*
  2895  000DCA  50F5               	movf	tablat,w,c
  2896  000DCC  EC66  F008         	call	_LCD_writeChar
  2897  000DD0                     l1822:
  2898  000DD0  4A09               	infsnz	LCD_write@i,f,c
  2899  000DD2  2A0A               	incf	LCD_write@i+1,f,c
  2900  000DD4                     l1824:
  2901  000DD4  C005  F007         	movff	LCD_write@data,??_LCD_write
  2902  000DD8  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
  2903  000DDC  5009               	movf	LCD_write@i,w,c
  2904  000DDE  2607               	addwf	??_LCD_write,f,c
  2905  000DE0  500A               	movf	LCD_write@i+1,w,c
  2906  000DE2  2208               	addwfc	??_LCD_write+1,f,c
  2907  000DE4  C007  FFF6         	movff	??_LCD_write,tblptrl
  2908  000DE8  C008  FFF7         	movff	??_LCD_write+1,tblptrh
  2909  000DEC                     	if	0	;tblptru may be non-zero
  2910  000DEC                     	endif
  2911  000DEC                     	if	0	;tblptru may be non-zero
  2912  000DEC                     	endif
  2913  000DEC  0008               	tblrd		*
  2914  000DEE  50F5               	movf	tablat,w,c
  2915  000DF0  0900               	iorlw	0
  2916  000DF2  B4D8               	btfsc	status,2,c
  2917  000DF4  0012               	return	
  2918  000DF6  D7C3               	goto	l1814
  2919  000DF8                     __end_of_LCD_write:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodl	equ	0xFF3
  2926                           wreg	equ	0xFE8
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _LCD_init *****************
  2930 ;; Defined at:
  2931 ;;		line 18 in file "../LCD.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;		None               void
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2945 ;;      Params:         0       0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0
  2947 ;;      Temps:          1       0       0       0       0       0       0
  2948 ;;      Totals:         1       0       0       0       0       0       0
  2949 ;;Total ram usage:        1 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    1
  2952 ;; This function calls:
  2953 ;;		_Delay100ms
  2954 ;;		_place_lcd_cursor
  2955 ;; This function is called by:
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text26
  2961  000608                     __ptext26:
  2962                           	opt stack 0
  2963  000608                     _LCD_init:
  2964                           	opt stack 29
  2965                           
  2966                           ;LCD.c: 21: LATCbits.LC3 = 0;
  2967                           
  2968                           ;incstack = 0
  2969  000608  968B               	bcf	3979,3,c	;volatile
  2970                           
  2971                           ;LCD.c: 22: LATCbits.LC2 = 0;
  2972  00060A  948B               	bcf	3979,2,c	;volatile
  2973                           
  2974                           ;LCD.c: 23: LATCbits.LC4 = 0;
  2975  00060C  988B               	bcf	3979,4,c	;volatile
  2976                           
  2977                           ;LCD.c: 24: LATCbits.LC5 = 0;
  2978  00060E  9A8B               	bcf	3979,5,c	;volatile
  2979                           
  2980                           ;LCD.c: 25: LATCbits.LC6 = 0;
  2981  000610  9C8B               	bcf	3979,6,c	;volatile
  2982                           
  2983                           ;LCD.c: 26: LATCbits.LC7 = 0;
  2984  000612  9E8B               	bcf	3979,7,c	;volatile
  2985                           
  2986                           ;LCD.c: 29: TRISCbits.RC3 = 0;
  2987  000614  9694               	bcf	3988,3,c	;volatile
  2988                           
  2989                           ;LCD.c: 30: TRISCbits.RC2 = 0;
  2990  000616  9494               	bcf	3988,2,c	;volatile
  2991                           
  2992                           ;LCD.c: 31: TRISCbits.RC4 = 0;
  2993  000618  9894               	bcf	3988,4,c	;volatile
  2994                           
  2995                           ;LCD.c: 32: TRISCbits.RC5 = 0;
  2996  00061A  9A94               	bcf	3988,5,c	;volatile
  2997                           
  2998                           ;LCD.c: 33: TRISCbits.RC6 = 0;
  2999  00061C  9C94               	bcf	3988,6,c	;volatile
  3000                           
  3001                           ;LCD.c: 34: TRISCbits.RC7 = 0;
  3002  00061E  9E94               	bcf	3988,7,c	;volatile
  3003                           
  3004                           ;LCD.c: 37: Delay100ms();
  3005  000620  ECB5  F008         	call	_Delay100ms	;wreg free
  3006                           
  3007                           ;LCD.c: 40: PORTCbits.RC3 = 0;
  3008  000624  9682               	bcf	3970,3,c	;volatile
  3009                           
  3010                           ;LCD.c: 43: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  3011  000626  8482               	bsf	3970,2,c	;volatile
  3012  000628  5082               	movf	3970,w,c	;volatile
  3013  00062A  0B0F               	andlw	15
  3014  00062C  0930               	iorlw	48
  3015  00062E  6E82               	movwf	3970,c	;volatile
  3016  000630  9482               	bcf	3970,2,c	;volatile
  3017                           
  3018                           ;LCD.c: 44: _delay((unsigned long)((10)*(10000000/4000.0)));
  3019  000632  0E21               	movlw	33
  3020  000634  6E05               	movwf	??_LCD_init& (0+255),c
  3021  000636  0E76               	movlw	118
  3022  000638                     u847:
  3023  000638  2EE8               	decfsz	wreg,f,c
  3024  00063A  D7FE               	goto	u847
  3025  00063C  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3026  00063E  D7FC               	goto	u847
  3027  000640  D000               	nop2	
  3028                           
  3029                           ;LCD.c: 47: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  3030  000642  8482               	bsf	3970,2,c	;volatile
  3031  000644  5082               	movf	3970,w,c	;volatile
  3032  000646  0B0F               	andlw	15
  3033  000648  0930               	iorlw	48
  3034  00064A  6E82               	movwf	3970,c	;volatile
  3035  00064C  9482               	bcf	3970,2,c	;volatile
  3036                           
  3037                           ;LCD.c: 48: _delay((unsigned long)((10)*(10000000/4000.0)));
  3038  00064E  0E21               	movlw	33
  3039  000650  6E05               	movwf	??_LCD_init& (0+255),c
  3040  000652  0E76               	movlw	118
  3041  000654                     u857:
  3042  000654  2EE8               	decfsz	wreg,f,c
  3043  000656  D7FE               	goto	u857
  3044  000658  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3045  00065A  D7FC               	goto	u857
  3046  00065C  D000               	nop2	
  3047                           
  3048                           ;LCD.c: 51: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  3049  00065E  8482               	bsf	3970,2,c	;volatile
  3050  000660  5082               	movf	3970,w,c	;volatile
  3051  000662  0B0F               	andlw	15
  3052  000664  0930               	iorlw	48
  3053  000666  6E82               	movwf	3970,c	;volatile
  3054  000668  9482               	bcf	3970,2,c	;volatile
  3055                           
  3056                           ;LCD.c: 52: _delay((unsigned long)((10)*(10000000/4000.0)));
  3057  00066A  0E21               	movlw	33
  3058  00066C  6E05               	movwf	??_LCD_init& (0+255),c
  3059  00066E  0E76               	movlw	118
  3060  000670                     u867:
  3061  000670  2EE8               	decfsz	wreg,f,c
  3062  000672  D7FE               	goto	u867
  3063  000674  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3064  000676  D7FC               	goto	u867
  3065  000678  D000               	nop2	
  3066                           
  3067                           ;LCD.c: 55: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  3068  00067A  8482               	bsf	3970,2,c	;volatile
  3069  00067C  5082               	movf	3970,w,c	;volatile
  3070  00067E  0B0F               	andlw	15
  3071  000680  0920               	iorlw	32
  3072  000682  6E82               	movwf	3970,c	;volatile
  3073  000684  9482               	bcf	3970,2,c	;volatile
  3074                           
  3075                           ;LCD.c: 56: _delay((unsigned long)((10)*(10000000/4000.0)));
  3076  000686  0E21               	movlw	33
  3077  000688  6E05               	movwf	??_LCD_init& (0+255),c
  3078  00068A  0E76               	movlw	118
  3079  00068C                     u877:
  3080  00068C  2EE8               	decfsz	wreg,f,c
  3081  00068E  D7FE               	goto	u877
  3082  000690  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3083  000692  D7FC               	goto	u877
  3084  000694  D000               	nop2	
  3085                           
  3086                           ;LCD.c: 59: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  3087  000696  8482               	bsf	3970,2,c	;volatile
  3088  000698  5082               	movf	3970,w,c	;volatile
  3089  00069A  0B0F               	andlw	15
  3090  00069C  0920               	iorlw	32
  3091  00069E  6E82               	movwf	3970,c	;volatile
  3092  0006A0  9482               	bcf	3970,2,c	;volatile
  3093                           
  3094                           ;LCD.c: 60: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x80; PORTCbits.RC2 = 0;
  3095  0006A2  8482               	bsf	3970,2,c	;volatile
  3096  0006A4  5082               	movf	3970,w,c	;volatile
  3097  0006A6  0B0F               	andlw	15
  3098  0006A8  0980               	iorlw	128
  3099  0006AA  6E82               	movwf	3970,c	;volatile
  3100  0006AC  9482               	bcf	3970,2,c	;volatile
  3101                           
  3102                           ;LCD.c: 61: _delay((unsigned long)((10)*(10000000/4000.0)));
  3103  0006AE  0E21               	movlw	33
  3104  0006B0  6E05               	movwf	??_LCD_init& (0+255),c
  3105  0006B2  0E76               	movlw	118
  3106  0006B4                     u887:
  3107  0006B4  2EE8               	decfsz	wreg,f,c
  3108  0006B6  D7FE               	goto	u887
  3109  0006B8  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3110  0006BA  D7FC               	goto	u887
  3111  0006BC  D000               	nop2	
  3112                           
  3113                           ;LCD.c: 64: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  3114  0006BE  8482               	bsf	3970,2,c	;volatile
  3115  0006C0  5082               	movf	3970,w,c	;volatile
  3116  0006C2  0B0F               	andlw	15
  3117  0006C4  6E82               	movwf	3970,c	;volatile
  3118  0006C6  9482               	bcf	3970,2,c	;volatile
  3119                           
  3120                           ;LCD.c: 65: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0xF0; PORTCbits.RC2 = 0;
  3121  0006C8  8482               	bsf	3970,2,c	;volatile
  3122  0006CA  5082               	movf	3970,w,c	;volatile
  3123  0006CC  0B0F               	andlw	15
  3124  0006CE  09F0               	iorlw	240
  3125  0006D0  6E82               	movwf	3970,c	;volatile
  3126  0006D2  9482               	bcf	3970,2,c	;volatile
  3127                           
  3128                           ;LCD.c: 66: _delay((unsigned long)((10)*(10000000/4000.0)));
  3129  0006D4  0E21               	movlw	33
  3130  0006D6  6E05               	movwf	??_LCD_init& (0+255),c
  3131  0006D8  0E76               	movlw	118
  3132  0006DA                     u897:
  3133  0006DA  2EE8               	decfsz	wreg,f,c
  3134  0006DC  D7FE               	goto	u897
  3135  0006DE  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3136  0006E0  D7FC               	goto	u897
  3137  0006E2  D000               	nop2	
  3138                           
  3139                           ;LCD.c: 69: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  3140  0006E4  8482               	bsf	3970,2,c	;volatile
  3141  0006E6  5082               	movf	3970,w,c	;volatile
  3142  0006E8  0B0F               	andlw	15
  3143  0006EA  6E82               	movwf	3970,c	;volatile
  3144  0006EC  9482               	bcf	3970,2,c	;volatile
  3145                           
  3146                           ;LCD.c: 70: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x10; PORTCbits.RC2 = 0;
  3147  0006EE  8482               	bsf	3970,2,c	;volatile
  3148  0006F0  5082               	movf	3970,w,c	;volatile
  3149  0006F2  0B0F               	andlw	15
  3150  0006F4  0910               	iorlw	16
  3151  0006F6  6E82               	movwf	3970,c	;volatile
  3152  0006F8  9482               	bcf	3970,2,c	;volatile
  3153                           
  3154                           ;LCD.c: 71: _delay((unsigned long)((10)*(10000000/4000.0)));
  3155  0006FA  0E21               	movlw	33
  3156  0006FC  6E05               	movwf	??_LCD_init& (0+255),c
  3157  0006FE  0E76               	movlw	118
  3158  000700                     u907:
  3159  000700  2EE8               	decfsz	wreg,f,c
  3160  000702  D7FE               	goto	u907
  3161  000704  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3162  000706  D7FC               	goto	u907
  3163  000708  D000               	nop2	
  3164                           
  3165                           ;LCD.c: 74: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  3166  00070A  8482               	bsf	3970,2,c	;volatile
  3167  00070C  5082               	movf	3970,w,c	;volatile
  3168  00070E  0B0F               	andlw	15
  3169  000710  6E82               	movwf	3970,c	;volatile
  3170  000712  9482               	bcf	3970,2,c	;volatile
  3171                           
  3172                           ;LCD.c: 75: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x60; PORTCbits.RC2 = 0;
  3173  000714  8482               	bsf	3970,2,c	;volatile
  3174  000716  5082               	movf	3970,w,c	;volatile
  3175  000718  0B0F               	andlw	15
  3176  00071A  0960               	iorlw	96
  3177  00071C  6E82               	movwf	3970,c	;volatile
  3178  00071E  9482               	bcf	3970,2,c	;volatile
  3179                           
  3180                           ;LCD.c: 76: _delay((unsigned long)((10)*(10000000/4000.0)));
  3181  000720  0E21               	movlw	33
  3182  000722  6E05               	movwf	??_LCD_init& (0+255),c
  3183  000724  0E76               	movlw	118
  3184  000726                     u917:
  3185  000726  2EE8               	decfsz	wreg,f,c
  3186  000728  D7FE               	goto	u917
  3187  00072A  2E05               	decfsz	??_LCD_init& (0+255),f,c
  3188  00072C  D7FC               	goto	u917
  3189  00072E  D000               	nop2	
  3190                           
  3191                           ;LCD.c: 79: place_lcd_cursor(0,0);
  3192  000730  0E00               	movlw	0
  3193  000732  6E01               	movwf	place_lcd_cursor@y,c
  3194  000734  0E00               	movlw	0
  3195  000736  ECD5  F007         	call	_place_lcd_cursor
  3196  00073A  0012               	return	
  3197  00073C                     __end_of_LCD_init:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodl	equ	0xFF3
  3204                           wreg	equ	0xFE8
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _place_lcd_cursor *****************
  3208 ;; Defined at:
  3209 ;;		line 125 in file "../LCD.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  x               1    wreg     unsigned char 
  3212 ;;  y               1    0[COMRAM] unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  x               1    2[COMRAM] unsigned char 
  3215 ;;  position        1    3[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, prodl, prodh
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3225 ;;      Params:         1       0       0       0       0       0       0
  3226 ;;      Locals:         2       0       0       0       0       0       0
  3227 ;;      Temps:          1       0       0       0       0       0       0
  3228 ;;      Totals:         4       0       0       0       0       0       0
  3229 ;;Total ram usage:        4 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_main
  3235 ;;		_LCD_init
  3236 ;;		_LCD_write
  3237 ;;		_i2c_Read
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text27
  3242  000FAA                     __ptext27:
  3243                           	opt stack 0
  3244  000FAA                     _place_lcd_cursor:
  3245                           	opt stack 30
  3246                           
  3247                           ;incstack = 0
  3248                           ;place_lcd_cursor@x stored from wreg
  3249  000FAA  6E03               	movwf	place_lcd_cursor@x,c
  3250                           
  3251                           ;LCD.c: 128: yPos = y;
  3252  000FAC  C001  F031         	movff	place_lcd_cursor@y,_yPos
  3253  000FB0  6A32               	clrf	_yPos+1,c
  3254                           
  3255                           ;LCD.c: 131: unsigned char position = (0x40*y)+x;
  3256  000FB2  5001               	movf	place_lcd_cursor@y,w,c
  3257  000FB4  0D40               	mullw	64
  3258  000FB6  50F3               	movf	prodl,w,c
  3259  000FB8  2403               	addwf	place_lcd_cursor@x,w,c
  3260  000FBA  6E04               	movwf	place_lcd_cursor@position,c
  3261                           
  3262                           ;LCD.c: 132: LATCbits.LC3 = 0;
  3263  000FBC  968B               	bcf	3979,3,c	;volatile
  3264                           
  3265                           ;LCD.c: 135: LATCbits.LC2 = 1;
  3266  000FBE  848B               	bsf	3979,2,c	;volatile
  3267                           
  3268                           ;LCD.c: 136: LATC = LATC & 0b00001111;
  3269  000FC0  508B               	movf	3979,w,c	;volatile
  3270  000FC2  0B0F               	andlw	15
  3271  000FC4  6E8B               	movwf	3979,c	;volatile
  3272                           
  3273                           ;LCD.c: 137: LATC = (LATC | (position & 0b11110000)) | 0b10000000;
  3274  000FC6  5004               	movf	place_lcd_cursor@position,w,c
  3275  000FC8  0BF0               	andlw	240
  3276  000FCA  108B               	iorwf	3979,w,c	;volatile
  3277  000FCC  0980               	iorlw	128
  3278  000FCE  6E8B               	movwf	3979,c	;volatile
  3279                           
  3280                           ;LCD.c: 138: LATCbits.LC2 = 0;
  3281  000FD0  948B               	bcf	3979,2,c	;volatile
  3282                           
  3283                           ;LCD.c: 141: LATCbits.LC2 = 1;
  3284  000FD2  848B               	bsf	3979,2,c	;volatile
  3285                           
  3286                           ;LCD.c: 142: LATC = (LATC & 0b00001111) | (position << 4);
  3287  000FD4  C004  F002         	movff	place_lcd_cursor@position,??_place_lcd_cursor
  3288  000FD8  3A02               	swapf	??_place_lcd_cursor,f,c
  3289  000FDA  0EF0               	movlw	240
  3290  000FDC  1602               	andwf	??_place_lcd_cursor,f,c
  3291  000FDE  508B               	movf	3979,w,c	;volatile
  3292  000FE0  0B0F               	andlw	15
  3293  000FE2  1002               	iorwf	??_place_lcd_cursor,w,c
  3294  000FE4  6E8B               	movwf	3979,c	;volatile
  3295                           
  3296                           ;LCD.c: 143: LATCbits.LC2 = 0;
  3297  000FE6  948B               	bcf	3979,2,c	;volatile
  3298                           
  3299                           ;LCD.c: 144: _delay((unsigned long)((1)*(10000000/4000.0)));
  3300  000FE8  0E04               	movlw	4
  3301  000FEA  6E02               	movwf	??_place_lcd_cursor& (0+255),c
  3302  000FEC  0E3E               	movlw	62
  3303  000FEE                     u927:
  3304  000FEE  2EE8               	decfsz	wreg,f,c
  3305  000FF0  D7FE               	goto	u927
  3306  000FF2  2E02               	decfsz	??_place_lcd_cursor& (0+255),f,c
  3307  000FF4  D7FC               	goto	u927
  3308  000FF6  0012               	return	
  3309  000FF8                     __end_of_place_lcd_cursor:
  3310                           	opt stack 0
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodl	equ	0xFF3
  3316                           wreg	equ	0xFE8
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _Delay100ms *****************
  3320 ;; Defined at:
  3321 ;;		line 147 in file "../LCD.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  i               2    1[COMRAM] int 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         0       0       0       0       0       0       0
  3336 ;;      Locals:         2       0       0       0       0       0       0
  3337 ;;      Temps:          1       0       0       0       0       0       0
  3338 ;;      Totals:         3       0       0       0       0       0       0
  3339 ;;Total ram usage:        3 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_LCD_init
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text28
  3349  00116A                     __ptext28:
  3350                           	opt stack 0
  3351  00116A                     _Delay100ms:
  3352                           	opt stack 29
  3353                           
  3354                           ;LCD.c: 149: for(i=0;i<100;i++)
  3355                           
  3356                           ;incstack = 0
  3357  00116A  0E00               	movlw	0
  3358  00116C  6E03               	movwf	Delay100ms@i+1,c
  3359  00116E  0E00               	movlw	0
  3360  001170  6E02               	movwf	Delay100ms@i,c
  3361  001172  5003               	movf	Delay100ms@i+1,w,c
  3362  001174  0A80               	xorlw	128
  3363  001176  0F80               	addlw	-128
  3364  001178  0E64               	movlw	100
  3365  00117A  B4D8               	btfsc	status,2,c
  3366  00117C  5C02               	subwf	Delay100ms@i,w,c
  3367  00117E  B0D8               	btfsc	status,0,c
  3368  001180  0012               	return	
  3369                           
  3370                           ;LCD.c: 150: {
  3371                           ;LCD.c: 151: _delay((unsigned long)((1)*(10000000/4000.0)));
  3372  001182  0E04               	movlw	4
  3373  001184  6E01               	movwf	??_Delay100ms& (0+255),c
  3374  001186  0E3E               	movlw	62
  3375  001188                     u937:
  3376  001188  2EE8               	decfsz	wreg,f,c
  3377  00118A  D7FE               	goto	u937
  3378  00118C  2E01               	decfsz	??_Delay100ms& (0+255),f,c
  3379  00118E  D7FC               	goto	u937
  3380  001190  4A02               	infsnz	Delay100ms@i,f,c
  3381  001192  2A03               	incf	Delay100ms@i+1,f,c
  3382  001194  D7EE               	goto	L1
  3383  001196                     __end_of_Delay100ms:
  3384                           	opt stack 0
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodl	equ	0xFF3
  3390                           wreg	equ	0xFE8
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _LCD_convertWrite *****************
  3394 ;; Defined at:
  3395 ;;		line 117 in file "../LCD.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  data            1    wreg     unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  data            1   16[COMRAM] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;		None               void
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, prodl, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3409 ;;      Params:         0       0       0       0       0       0       0
  3410 ;;      Locals:         3       0       0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0
  3412 ;;      Totals:         3       0       0       0       0       0       0
  3413 ;;Total ram usage:        3 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    1
  3416 ;; This function calls:
  3417 ;;		_LCD_writeChar
  3418 ;;		___awdiv
  3419 ;;		___awmod
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text29
  3426  000DF8                     __ptext29:
  3427                           	opt stack 0
  3428  000DF8                     _LCD_convertWrite:
  3429                           	opt stack 29
  3430                           
  3431                           ;incstack = 0
  3432                           ;LCD_convertWrite@data stored from wreg
  3433  000DF8  6E11               	movwf	LCD_convertWrite@data,c
  3434                           
  3435                           ;LCD.c: 119: LCD_writeChar((data / 100) + 0x30);
  3436  000DFA  C011  F007         	movff	LCD_convertWrite@data,___awdiv@dividend
  3437  000DFE  6A08               	clrf	___awdiv@dividend+1,c
  3438  000E00  0E00               	movlw	0
  3439  000E02  6E0A               	movwf	___awdiv@divisor+1,c
  3440  000E04  0E64               	movlw	100
  3441  000E06  6E09               	movwf	___awdiv@divisor,c
  3442  000E08  ECDD  F005         	call	___awdiv	;wreg free
  3443  000E0C  5007               	movf	?___awdiv,w,c
  3444  000E0E  0F30               	addlw	48
  3445  000E10  EC66  F008         	call	_LCD_writeChar
  3446                           
  3447                           ;LCD.c: 120: LCD_writeChar(((data % 100) / 10) + 0x30);
  3448  000E14  0E00               	movlw	0
  3449  000E16  6E04               	movwf	___awmod@divisor+1,c
  3450  000E18  0E64               	movlw	100
  3451  000E1A  6E03               	movwf	___awmod@divisor,c
  3452  000E1C  C011  F001         	movff	LCD_convertWrite@data,___awmod@dividend
  3453  000E20  6A02               	clrf	___awmod@dividend+1,c
  3454  000E22  EC2F  F006         	call	___awmod	;wreg free
  3455  000E26  C001  F007         	movff	?___awmod,___awdiv@dividend
  3456  000E2A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3457  000E2E  0E00               	movlw	0
  3458  000E30  6E0A               	movwf	___awdiv@divisor+1,c
  3459  000E32  0E0A               	movlw	10
  3460  000E34  6E09               	movwf	___awdiv@divisor,c
  3461  000E36  ECDD  F005         	call	___awdiv	;wreg free
  3462  000E3A  5007               	movf	?___awdiv,w,c
  3463  000E3C  0F30               	addlw	48
  3464  000E3E  EC66  F008         	call	_LCD_writeChar
  3465                           
  3466                           ;LCD.c: 121: LCD_writeChar(((data % 100) % 10) + 0x30);
  3467  000E42  0E00               	movlw	0
  3468  000E44  6E04               	movwf	___awmod@divisor+1,c
  3469  000E46  0E64               	movlw	100
  3470  000E48  6E03               	movwf	___awmod@divisor,c
  3471  000E4A  C011  F001         	movff	LCD_convertWrite@data,___awmod@dividend
  3472  000E4E  6A02               	clrf	___awmod@dividend+1,c
  3473  000E50  EC2F  F006         	call	___awmod	;wreg free
  3474  000E54  C001  F00F         	movff	?___awmod,_LCD_convertWrite$1663
  3475  000E58  C002  F010         	movff	?___awmod+1,_LCD_convertWrite$1663+1
  3476                           
  3477                           ;LCD.c: 121: LCD_writeChar(((data % 100) % 10) + 0x30);
  3478  000E5C  C00F  F001         	movff	_LCD_convertWrite$1663,___awmod@dividend
  3479  000E60  C010  F002         	movff	_LCD_convertWrite$1663+1,___awmod@dividend+1
  3480  000E64  0E00               	movlw	0
  3481  000E66  6E04               	movwf	___awmod@divisor+1,c
  3482  000E68  0E0A               	movlw	10
  3483  000E6A  6E03               	movwf	___awmod@divisor,c
  3484  000E6C  EC2F  F006         	call	___awmod	;wreg free
  3485  000E70  5001               	movf	?___awmod,w,c
  3486  000E72  0F30               	addlw	48
  3487  000E74  EC66  F008         	call	_LCD_writeChar
  3488  000E78  0012               	return	
  3489  000E7A                     __end_of_LCD_convertWrite:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodl	equ	0xFF3
  3496                           wreg	equ	0xFE8
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function ___awmod *****************
  3500 ;; Defined at:
  3501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  dividend        2    0[COMRAM] int 
  3504 ;;  divisor         2    2[COMRAM] int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  sign            1    5[COMRAM] unsigned char 
  3507 ;;  counter         1    4[COMRAM] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  2    0[COMRAM] int 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0, prodl
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3517 ;;      Params:         4       0       0       0       0       0       0
  3518 ;;      Locals:         2       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0
  3520 ;;      Totals:         6       0       0       0       0       0       0
  3521 ;;Total ram usage:        6 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_LCD_convertWrite
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text30
  3531  000C5E                     __ptext30:
  3532                           	opt stack 0
  3533  000C5E                     ___awmod:
  3534                           	opt stack 29
  3535                           
  3536                           ;incstack = 0
  3537  000C5E  0E00               	movlw	0
  3538  000C60  6E06               	movwf	___awmod@sign,c
  3539  000C62  5002               	movf	___awmod@dividend+1,w,c
  3540  000C64  0A80               	xorlw	128
  3541  000C66  6EF3               	movwf	prodl,c
  3542  000C68  0E80               	movlw	128
  3543  000C6A  5CF3               	subwf	prodl,w,c
  3544  000C6C  0E00               	movlw	0
  3545  000C6E  B4D8               	btfsc	status,2,c
  3546  000C70  5C01               	subwf	___awmod@dividend,w,c
  3547  000C72  B0D8               	btfsc	status,0,c
  3548  000C74  D006               	goto	l1650
  3549  000C76  6C01               	negf	___awmod@dividend,c
  3550  000C78  1E02               	comf	___awmod@dividend+1,f,c
  3551  000C7A  B0D8               	btfsc	status,0,c
  3552  000C7C  2A02               	incf	___awmod@dividend+1,f,c
  3553  000C7E  0E01               	movlw	1
  3554  000C80  6E06               	movwf	___awmod@sign,c
  3555  000C82                     l1650:
  3556  000C82  5004               	movf	___awmod@divisor+1,w,c
  3557  000C84  0A80               	xorlw	128
  3558  000C86  6EF3               	movwf	prodl,c
  3559  000C88  0E80               	movlw	128
  3560  000C8A  5CF3               	subwf	prodl,w,c
  3561  000C8C  0E00               	movlw	0
  3562  000C8E  B4D8               	btfsc	status,2,c
  3563  000C90  5C03               	subwf	___awmod@divisor,w,c
  3564  000C92  B0D8               	btfsc	status,0,c
  3565  000C94  D004               	goto	l1654
  3566  000C96  6C03               	negf	___awmod@divisor,c
  3567  000C98  1E04               	comf	___awmod@divisor+1,f,c
  3568  000C9A  B0D8               	btfsc	status,0,c
  3569  000C9C  2A04               	incf	___awmod@divisor+1,f,c
  3570  000C9E                     l1654:
  3571  000C9E  5004               	movf	___awmod@divisor+1,w,c
  3572  000CA0  1003               	iorwf	___awmod@divisor,w,c
  3573  000CA2  B4D8               	btfsc	status,2,c
  3574  000CA4  D018               	goto	l1670
  3575  000CA6  0E01               	movlw	1
  3576  000CA8  6E05               	movwf	___awmod@counter,c
  3577  000CAA  D004               	goto	l1660
  3578  000CAC                     l1658:
  3579  000CAC  90D8               	bcf	status,0,c
  3580  000CAE  3603               	rlcf	___awmod@divisor,f,c
  3581  000CB0  3604               	rlcf	___awmod@divisor+1,f,c
  3582  000CB2  2A05               	incf	___awmod@counter,f,c
  3583  000CB4                     l1660:
  3584  000CB4  AE04               	btfss	___awmod@divisor+1,7,c
  3585  000CB6  D7FA               	goto	l1658
  3586  000CB8                     l1662:
  3587  000CB8  5003               	movf	___awmod@divisor,w,c
  3588  000CBA  5C01               	subwf	___awmod@dividend,w,c
  3589  000CBC  5004               	movf	___awmod@divisor+1,w,c
  3590  000CBE  5802               	subwfb	___awmod@dividend+1,w,c
  3591  000CC0  A0D8               	btfss	status,0,c
  3592  000CC2  D004               	goto	l1666
  3593  000CC4  5003               	movf	___awmod@divisor,w,c
  3594  000CC6  5E01               	subwf	___awmod@dividend,f,c
  3595  000CC8  5004               	movf	___awmod@divisor+1,w,c
  3596  000CCA  5A02               	subwfb	___awmod@dividend+1,f,c
  3597  000CCC                     l1666:
  3598  000CCC  90D8               	bcf	status,0,c
  3599  000CCE  3204               	rrcf	___awmod@divisor+1,f,c
  3600  000CD0  3203               	rrcf	___awmod@divisor,f,c
  3601  000CD2  2E05               	decfsz	___awmod@counter,f,c
  3602  000CD4  D7F1               	goto	l1662
  3603  000CD6                     l1670:
  3604  000CD6  5006               	movf	___awmod@sign,w,c
  3605  000CD8  B4D8               	btfsc	status,2,c
  3606  000CDA  D004               	goto	l1674
  3607  000CDC  6C01               	negf	___awmod@dividend,c
  3608  000CDE  1E02               	comf	___awmod@dividend+1,f,c
  3609  000CE0  B0D8               	btfsc	status,0,c
  3610  000CE2  2A02               	incf	___awmod@dividend+1,f,c
  3611  000CE4                     l1674:
  3612  000CE4  C001  F001         	movff	___awmod@dividend,?___awmod
  3613  000CE8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3614  000CEC  0012               	return	
  3615  000CEE                     __end_of___awmod:
  3616                           	opt stack 0
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodl	equ	0xFF3
  3622                           wreg	equ	0xFE8
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function ___awdiv *****************
  3626 ;; Defined at:
  3627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  dividend        2    6[COMRAM] int 
  3630 ;;  divisor         2    8[COMRAM] int 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  quotient        2   12[COMRAM] int 
  3633 ;;  sign            1   11[COMRAM] unsigned char 
  3634 ;;  counter         1   10[COMRAM] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  2    6[COMRAM] int 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0, prodl
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3644 ;;      Params:         4       0       0       0       0       0       0
  3645 ;;      Locals:         4       0       0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0
  3647 ;;      Totals:         8       0       0       0       0       0       0
  3648 ;;Total ram usage:        8 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_LCD_convertWrite
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text31
  3658  000BBA                     __ptext31:
  3659                           	opt stack 0
  3660  000BBA                     ___awdiv:
  3661                           	opt stack 29
  3662                           
  3663                           ;incstack = 0
  3664  000BBA  0E00               	movlw	0
  3665  000BBC  6E0C               	movwf	___awdiv@sign,c
  3666  000BBE  500A               	movf	___awdiv@divisor+1,w,c
  3667  000BC0  0A80               	xorlw	128
  3668  000BC2  6EF3               	movwf	prodl,c
  3669  000BC4  0E80               	movlw	128
  3670  000BC6  5CF3               	subwf	prodl,w,c
  3671  000BC8  0E00               	movlw	0
  3672  000BCA  B4D8               	btfsc	status,2,c
  3673  000BCC  5C09               	subwf	___awdiv@divisor,w,c
  3674  000BCE  B0D8               	btfsc	status,0,c
  3675  000BD0  D006               	goto	l1606
  3676  000BD2  6C09               	negf	___awdiv@divisor,c
  3677  000BD4  1E0A               	comf	___awdiv@divisor+1,f,c
  3678  000BD6  B0D8               	btfsc	status,0,c
  3679  000BD8  2A0A               	incf	___awdiv@divisor+1,f,c
  3680  000BDA  0E01               	movlw	1
  3681  000BDC  6E0C               	movwf	___awdiv@sign,c
  3682  000BDE                     l1606:
  3683  000BDE  5008               	movf	___awdiv@dividend+1,w,c
  3684  000BE0  0A80               	xorlw	128
  3685  000BE2  6EF3               	movwf	prodl,c
  3686  000BE4  0E80               	movlw	128
  3687  000BE6  5CF3               	subwf	prodl,w,c
  3688  000BE8  0E00               	movlw	0
  3689  000BEA  B4D8               	btfsc	status,2,c
  3690  000BEC  5C07               	subwf	___awdiv@dividend,w,c
  3691  000BEE  B0D8               	btfsc	status,0,c
  3692  000BF0  D006               	goto	l1612
  3693  000BF2  6C07               	negf	___awdiv@dividend,c
  3694  000BF4  1E08               	comf	___awdiv@dividend+1,f,c
  3695  000BF6  B0D8               	btfsc	status,0,c
  3696  000BF8  2A08               	incf	___awdiv@dividend+1,f,c
  3697  000BFA  0E01               	movlw	1
  3698  000BFC  1A0C               	xorwf	___awdiv@sign,f,c
  3699  000BFE                     l1612:
  3700  000BFE  0E00               	movlw	0
  3701  000C00  6E0E               	movwf	___awdiv@quotient+1,c
  3702  000C02  0E00               	movlw	0
  3703  000C04  6E0D               	movwf	___awdiv@quotient,c
  3704  000C06  500A               	movf	___awdiv@divisor+1,w,c
  3705  000C08  1009               	iorwf	___awdiv@divisor,w,c
  3706  000C0A  B4D8               	btfsc	status,2,c
  3707  000C0C  D01C               	goto	l1634
  3708  000C0E  0E01               	movlw	1
  3709  000C10  6E0B               	movwf	___awdiv@counter,c
  3710  000C12  D004               	goto	l1620
  3711  000C14                     l1618:
  3712  000C14  90D8               	bcf	status,0,c
  3713  000C16  3609               	rlcf	___awdiv@divisor,f,c
  3714  000C18  360A               	rlcf	___awdiv@divisor+1,f,c
  3715  000C1A  2A0B               	incf	___awdiv@counter,f,c
  3716  000C1C                     l1620:
  3717  000C1C  AE0A               	btfss	___awdiv@divisor+1,7,c
  3718  000C1E  D7FA               	goto	l1618
  3719  000C20                     l1622:
  3720  000C20  90D8               	bcf	status,0,c
  3721  000C22  360D               	rlcf	___awdiv@quotient,f,c
  3722  000C24  360E               	rlcf	___awdiv@quotient+1,f,c
  3723  000C26  5009               	movf	___awdiv@divisor,w,c
  3724  000C28  5C07               	subwf	___awdiv@dividend,w,c
  3725  000C2A  500A               	movf	___awdiv@divisor+1,w,c
  3726  000C2C  5808               	subwfb	___awdiv@dividend+1,w,c
  3727  000C2E  A0D8               	btfss	status,0,c
  3728  000C30  D005               	goto	l1630
  3729  000C32  5009               	movf	___awdiv@divisor,w,c
  3730  000C34  5E07               	subwf	___awdiv@dividend,f,c
  3731  000C36  500A               	movf	___awdiv@divisor+1,w,c
  3732  000C38  5A08               	subwfb	___awdiv@dividend+1,f,c
  3733  000C3A  800D               	bsf	___awdiv@quotient,0,c
  3734  000C3C                     l1630:
  3735  000C3C  90D8               	bcf	status,0,c
  3736  000C3E  320A               	rrcf	___awdiv@divisor+1,f,c
  3737  000C40  3209               	rrcf	___awdiv@divisor,f,c
  3738  000C42  2E0B               	decfsz	___awdiv@counter,f,c
  3739  000C44  D7ED               	goto	l1622
  3740  000C46                     l1634:
  3741  000C46  500C               	movf	___awdiv@sign,w,c
  3742  000C48  B4D8               	btfsc	status,2,c
  3743  000C4A  D004               	goto	l1638
  3744  000C4C  6C0D               	negf	___awdiv@quotient,c
  3745  000C4E  1E0E               	comf	___awdiv@quotient+1,f,c
  3746  000C50  B0D8               	btfsc	status,0,c
  3747  000C52  2A0E               	incf	___awdiv@quotient+1,f,c
  3748  000C54                     l1638:
  3749  000C54  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3750  000C58  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3751  000C5C  0012               	return	
  3752  000C5E                     __end_of___awdiv:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodl	equ	0xFF3
  3759                           wreg	equ	0xFE8
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _LCD_writeChar *****************
  3763 ;; Defined at:
  3764 ;;		line 103 in file "../LCD.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  data            1    wreg     unsigned char 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  data            1    3[COMRAM] unsigned char 
  3769 ;;  lower           1    2[COMRAM] unsigned char 
  3770 ;;  upper           1    1[COMRAM] unsigned char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3780 ;;      Params:         0       0       0       0       0       0       0
  3781 ;;      Locals:         3       0       0       0       0       0       0
  3782 ;;      Temps:          1       0       0       0       0       0       0
  3783 ;;      Totals:         4       0       0       0       0       0       0
  3784 ;;Total ram usage:        4 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_main
  3790 ;;		_LCD_write
  3791 ;;		_LCD_convertWrite
  3792 ;;		_i2c_Read
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text32
  3797  0010CC                     __ptext32:
  3798                           	opt stack 0
  3799  0010CC                     _LCD_writeChar:
  3800                           	opt stack 29
  3801                           
  3802                           ;incstack = 0
  3803                           ;LCD_writeChar@data stored from wreg
  3804  0010CC  6E04               	movwf	LCD_writeChar@data,c
  3805                           
  3806                           ;LCD.c: 106: unsigned char upper = data & 0b11110000;
  3807  0010CE  5004               	movf	LCD_writeChar@data,w,c
  3808  0010D0  0BF0               	andlw	240
  3809  0010D2  6E02               	movwf	LCD_writeChar@upper,c
  3810                           
  3811                           ;LCD.c: 107: unsigned char lower = (data << 4);
  3812  0010D4  3804               	swapf	LCD_writeChar@data,w,c
  3813  0010D6  0BF0               	andlw	240
  3814  0010D8  6E03               	movwf	LCD_writeChar@lower,c
  3815                           
  3816                           ;LCD.c: 110: LATCbits.LC3 = 1;
  3817  0010DA  868B               	bsf	3979,3,c	;volatile
  3818                           
  3819                           ;LCD.c: 111: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | upper; LATCbits.LC2 = 0;
  3820  0010DC  848B               	bsf	3979,2,c	;volatile
  3821  0010DE  508B               	movf	3979,w,c	;volatile
  3822  0010E0  0B0F               	andlw	15
  3823  0010E2  1002               	iorwf	LCD_writeChar@upper,w,c
  3824  0010E4  6E8B               	movwf	3979,c	;volatile
  3825  0010E6  948B               	bcf	3979,2,c	;volatile
  3826                           
  3827                           ;LCD.c: 112: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | lower; LATCbits.LC2 = 0;
  3828  0010E8  848B               	bsf	3979,2,c	;volatile
  3829  0010EA  508B               	movf	3979,w,c	;volatile
  3830  0010EC  0B0F               	andlw	15
  3831  0010EE  1003               	iorwf	LCD_writeChar@lower,w,c
  3832  0010F0  6E8B               	movwf	3979,c	;volatile
  3833  0010F2  948B               	bcf	3979,2,c	;volatile
  3834                           
  3835                           ;LCD.c: 113: _delay((unsigned long)((1)*(10000000/4000.0)));
  3836  0010F4  0E04               	movlw	4
  3837  0010F6  6E01               	movwf	??_LCD_writeChar& (0+255),c
  3838  0010F8  0E3E               	movlw	62
  3839  0010FA                     u947:
  3840  0010FA  2EE8               	decfsz	wreg,f,c
  3841  0010FC  D7FE               	goto	u947
  3842  0010FE  2E01               	decfsz	??_LCD_writeChar& (0+255),f,c
  3843  001100  D7FC               	goto	u947
  3844                           
  3845                           ;LCD.c: 114: LATCbits.LC3 = 0;
  3846  001102  968B               	bcf	3979,3,c	;volatile
  3847  001104  0012               	return	
  3848  001106                     __end_of_LCD_writeChar:
  3849                           	opt stack 0
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodl	equ	0xFF3
  3855                           wreg	equ	0xFE8
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _EPWM_Port_Init *****************
  3859 ;; Defined at:
  3860 ;;		line 6 in file "../DCMotor.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;		None               void
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3874 ;;      Params:         0       0       0       0       0       0       0
  3875 ;;      Locals:         0       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0
  3877 ;;      Totals:         0       0       0       0       0       0       0
  3878 ;;Total ram usage:        0 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_main
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text33
  3888  000EFA                     __ptext33:
  3889                           	opt stack 0
  3890  000EFA                     _EPWM_Port_Init:
  3891                           	opt stack 30
  3892                           
  3893                           ;DCMotor.c: 8: LATA = LATA & 0x00;
  3894                           
  3895                           ;incstack = 0
  3896  000EFA  0E00               	movlw	0
  3897  000EFC  6E89               	movwf	3977,c	;volatile
  3898                           
  3899                           ;DCMotor.c: 9: TRISA = TRISA & 0xFF;
  3900  000EFE  CF92 FF92          	movff	3986,3986	;volatile
  3901                           
  3902                           ;DCMotor.c: 10: ANSELA = ANSELA & 0x2F;
  3903  000F02  010F               	movlb	15	; () banked
  3904  000F04  5138               	movf	56,w,b	;volatile
  3905  000F06  0B2F               	andlw	47
  3906  000F08  010F               	movlb	15	; () banked
  3907  000F0A  6F38               	movwf	56,b	;volatile
  3908                           
  3909                           ; BSR set to: 15
  3910                           ;DCMotor.c: 12: LATB = LATB & 0x00;
  3911  000F0C  0E00               	movlw	0
  3912  000F0E  6E8A               	movwf	3978,c	;volatile
  3913                           
  3914                           ;DCMotor.c: 13: TRISB = TRISB & 0xDF;
  3915  000F10  5093               	movf	3987,w,c	;volatile
  3916  000F12  0BDF               	andlw	223
  3917  000F14  6E93               	movwf	3987,c	;volatile
  3918                           
  3919                           ;DCMotor.c: 14: ANSELB = ANSELB & 0x1F;
  3920  000F16  010F               	movlb	15	; () banked
  3921  000F18  5139               	movf	57,w,b	;volatile
  3922  000F1A  0B1F               	andlw	31
  3923  000F1C  010F               	movlb	15	; () banked
  3924  000F1E  6F39               	movwf	57,b	;volatile
  3925                           
  3926                           ; BSR set to: 15
  3927                           ;DCMotor.c: 15: WPUB = 0x00;
  3928  000F20  0E00               	movlw	0
  3929  000F22  6E61               	movwf	3937,c	;volatile
  3930                           
  3931                           ; BSR set to: 15
  3932                           ;DCMotor.c: 17: LATCbits.LC1 = 0;
  3933  000F24  928B               	bcf	3979,1,c	;volatile
  3934                           
  3935                           ; BSR set to: 15
  3936                           ;DCMotor.c: 18: TRISCbits.RC1 = 0;
  3937  000F26  9294               	bcf	3988,1,c	;volatile
  3938                           
  3939                           ; BSR set to: 15
  3940                           ;DCMotor.c: 19: ANSELCbits.ANSC2 = 0;
  3941  000F28  010F               	movlb	15	; () banked
  3942  000F2A  953A               	bcf	58,2,b	;volatile
  3943                           
  3944                           ; BSR set to: 15
  3945                           ;DCMotor.c: 21: LATD = LATD & 0x00;
  3946  000F2C  0E00               	movlw	0
  3947  000F2E  6E8C               	movwf	3980,c	;volatile
  3948                           
  3949                           ;DCMotor.c: 22: TRISD = TRISD & 0xFB;
  3950  000F30  5095               	movf	3989,w,c	;volatile
  3951  000F32  0BFB               	andlw	251
  3952  000F34  6E95               	movwf	3989,c	;volatile
  3953                           
  3954                           ;DCMotor.c: 23: ANSELD = ANSELD & 0xFB;
  3955  000F36  010F               	movlb	15	; () banked
  3956  000F38  513B               	movf	59,w,b	;volatile
  3957  000F3A  0BFB               	andlw	251
  3958  000F3C  010F               	movlb	15	; () banked
  3959  000F3E  6F3B               	movwf	59,b	;volatile
  3960                           
  3961                           ; BSR set to: 15
  3962                           ;DCMotor.c: 25: LATE = LATE & 0x00;
  3963  000F40  0E00               	movlw	0
  3964  000F42  6E8D               	movwf	3981,c	;volatile
  3965                           
  3966                           ; BSR set to: 15
  3967                           ;DCMotor.c: 26: TRISE = TRISE & 0x05;
  3968  000F44  5096               	movf	3990,w,c	;volatile
  3969  000F46  0B05               	andlw	5
  3970  000F48  6E96               	movwf	3990,c	;volatile
  3971                           
  3972                           ; BSR set to: 15
  3973                           ;DCMotor.c: 27: ANSELE = ANSELE & 0x05;
  3974  000F4A  010F               	movlb	15	; () banked
  3975  000F4C  513C               	movf	60,w,b	;volatile
  3976  000F4E  0B05               	andlw	5
  3977  000F50  010F               	movlb	15	; () banked
  3978  000F52  6F3C               	movwf	60,b	;volatile
  3979                           
  3980                           ; BSR set to: 15
  3981                           ;DCMotor.c: 29: INTCON2bits.nRBPU = 0x01;
  3982  000F54  8EF1               	bsf	intcon2,7,c	;volatile
  3983                           
  3984                           ; BSR set to: 15
  3985  000F56  0012               	return	
  3986  000F58                     __end_of_EPWM_Port_Init:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodl	equ	0xFF3
  3993                           intcon2	equ	0xFF1
  3994                           wreg	equ	0xFE8
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _EPWM2_Initialize *****************
  3998 ;; Defined at:
  3999 ;;		line 104 in file "../DCMotor.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		wreg, status,2
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4013 ;;      Params:         0       0       0       0       0       0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0
  4016 ;;      Totals:         0       0       0       0       0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text34
  4027  001196                     __ptext34:
  4028                           	opt stack 0
  4029  001196                     _EPWM2_Initialize:
  4030                           	opt stack 30
  4031                           
  4032                           ;DCMotor.c: 109: CCP2CON = 0xBC;
  4033                           
  4034                           ; BSR set to: 15
  4035                           ;incstack = 0
  4036  001196  0EBC               	movlw	188
  4037  001198  6E66               	movwf	3942,c	;volatile
  4038                           
  4039                           ;DCMotor.c: 112: ECCP2AS = 0x00;
  4040  00119A  0E00               	movlw	0
  4041  00119C  6E64               	movwf	3940,c	;volatile
  4042                           
  4043                           ;DCMotor.c: 115: PWM2CON = 0x80;
  4044  00119E  0E80               	movlw	128
  4045  0011A0  6E65               	movwf	3941,c	;volatile
  4046                           
  4047                           ;DCMotor.c: 118: PSTR2CON = 0x00;
  4048  0011A2  0E00               	movlw	0
  4049  0011A4  6E63               	movwf	3939,c	;volatile
  4050                           
  4051                           ;DCMotor.c: 121: CCPR2L = 0x7F;
  4052  0011A6  0E7F               	movlw	127
  4053  0011A8  6E67               	movwf	3943,c	;volatile
  4054                           
  4055                           ;DCMotor.c: 124: CCPR2H = 0x00;
  4056  0011AA  0E00               	movlw	0
  4057  0011AC  6E68               	movwf	3944,c	;volatile
  4058                           
  4059                           ;DCMotor.c: 127: CCPTMRS0bits.C2TSEL = 0x1;
  4060  0011AE  010F               	movlb	15	; () banked
  4061  0011B0  5149               	movf	73,w,b	;volatile
  4062  0011B2  0BE7               	andlw	-25
  4063  0011B4  0908               	iorlw	8
  4064  0011B6  010F               	movlb	15	; () banked
  4065  0011B8  6F49               	movwf	73,b	;volatile
  4066                           
  4067                           ;DCMotor.c: 130: CCP2CON = 0b01001100;
  4068  0011BA  0E4C               	movlw	76
  4069  0011BC  6E66               	movwf	3942,c	;volatile
  4070                           
  4071                           ; BSR set to: 15
  4072  0011BE  0012               	return	
  4073  0011C0                     __end_of_EPWM2_Initialize:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodl	equ	0xFF3
  4080                           intcon2	equ	0xFF1
  4081                           wreg	equ	0xFE8
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function _EPWM1_Initialize *****************
  4085 ;; Defined at:
  4086 ;;		line 33 in file "../DCMotor.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;		None               void
  4093 ;; Registers used:
  4094 ;;		wreg, status,2
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4100 ;;      Params:         0       0       0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_main
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text35
  4114  001138                     __ptext35:
  4115                           	opt stack 0
  4116  001138                     _EPWM1_Initialize:
  4117                           	opt stack 30
  4118                           
  4119                           ;DCMotor.c: 38: CCP3CON = 0xBC;
  4120                           
  4121                           ; BSR set to: 15
  4122                           ;incstack = 0
  4123  001138  0EBC               	movlw	188
  4124  00113A  010F               	movlb	15	; () banked
  4125  00113C  6F5D               	movwf	93,b	;volatile
  4126                           
  4127                           ;DCMotor.c: 41: ECCP3AS = 0x00;
  4128  00113E  0E00               	movlw	0
  4129  001140  010F               	movlb	15	; () banked
  4130  001142  6F5B               	movwf	91,b	;volatile
  4131                           
  4132                           ;DCMotor.c: 44: PWM3CON = 0x80;
  4133  001144  0E80               	movlw	128
  4134  001146  010F               	movlb	15	; () banked
  4135  001148  6F5C               	movwf	92,b	;volatile
  4136                           
  4137                           ;DCMotor.c: 47: PSTR3CON = 0x00;
  4138  00114A  0E00               	movlw	0
  4139  00114C  010F               	movlb	15	; () banked
  4140  00114E  6F5A               	movwf	90,b	;volatile
  4141                           
  4142                           ;DCMotor.c: 50: CCPR3L = 0x7F;
  4143  001150  0E7F               	movlw	127
  4144  001152  010F               	movlb	15	; () banked
  4145  001154  6F5E               	movwf	94,b	;volatile
  4146                           
  4147                           ;DCMotor.c: 53: CCPR3H = 0x00;
  4148  001156  0E00               	movlw	0
  4149  001158  010F               	movlb	15	; () banked
  4150  00115A  6F5F               	movwf	95,b	;volatile
  4151                           
  4152                           ;DCMotor.c: 56: CCPTMRS0bits.C3TSEL = 0x0;
  4153  00115C  0E3F               	movlw	-193
  4154  00115E  010F               	movlb	15	; () banked
  4155  001160  1749               	andwf	73,f,b	;volatile
  4156                           
  4157                           ;DCMotor.c: 59: CCP3CON = 0b01001100;
  4158  001162  0E4C               	movlw	76
  4159  001164  010F               	movlb	15	; () banked
  4160  001166  6F5D               	movwf	93,b	;volatile
  4161                           
  4162                           ; BSR set to: 15
  4163  001168  0012               	return	
  4164  00116A                     __end_of_EPWM1_Initialize:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodl	equ	0xFF3
  4171                           intcon2	equ	0xFF1
  4172                           wreg	equ	0xFE8
  4173                           status	equ	0xFD8
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           prodl	equ	0xFF3
  4179                           intcon2	equ	0xFF1
  4180                           wreg	equ	0xFE8
  4181                           status	equ	0xFD8
  4182                           
  4183                           	psect	rparam
  4184  0000                     tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodl	equ	0xFF3
  4189                           intcon2	equ	0xFF1
  4190                           wreg	equ	0xFE8
  4191                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      51
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_write@data	PTR unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_EPWM1_LoadDutyValue
    _main->_EPWM2_LoadDutyValue
    _lineSensor_isWhiteLine1->_lineSensor_read
    _i2c_Read->___lwdiv
    _i2c_Restart->_i2c_Wait
    ___lwdiv->___lwmod
    _i2c_Command->_i2c_Write
    _i2c_Write->_i2c_Wait
    _i2c_Stop->_i2c_Wait
    _i2c_Start->_i2c_Wait
    _Switch_Direction2->_EPWM2_LoadDutyValue
    _EPWM2_LoadDutyValue->___fttol
    _Switch_Direction1->_EPWM1_LoadDutyValue
    _EPWM1_LoadDutyValue->___fttol
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _LCD_write->_LCD_writeChar
    _LCD_write->_place_lcd_cursor
    _LCD_init->_place_lcd_cursor
    _LCD_convertWrite->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20384
                   _EPWM1_Initialize
                _EPWM1_LoadDutyValue
                   _EPWM2_Initialize
                _EPWM2_LoadDutyValue
                     _EPWM_Port_Init
                   _LCD_convertWrite
                           _LCD_init
                          _LCD_write
                      _LCD_writeChar
                  _Switch_Direction1
                  _Switch_Direction2
                    _TMR2_Initialize
                    _TMR4_Initialize
                        _i2c_Command
                           _i2c_Init
                      _i2c_Port_Init
                           _i2c_Read
                    _lineSensor_init
            _lineSensor_isWhiteLine1
                    _lineSensor_read
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _lineSensor_isWhiteLine1                              4     4      0     159
                                              2 COMRAM     4     4      0
                    _lineSensor_read
 ---------------------------------------------------------------------------------
 (1) _lineSensor_read                                      2     0      2     144
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _lineSensor_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Read                                            10     9      1    1784
                                             12 COMRAM     9     8      1
                      _LCD_writeChar
                            ___lwdiv
                            ___lwmod
                        _i2c_Restart
                          _i2c_Start
                           _i2c_Stop
                           _i2c_Wait
                          _i2c_Write
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (2) _i2c_Restart                                          0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     477
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _i2c_Port_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Command                                          4     2      2     194
                                              2 COMRAM     4     2      2
                          _i2c_Start
                           _i2c_Stop
                           _i2c_Wait
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (2) _i2c_Write                                            1     1      0      22
                                              1 COMRAM     1     1      0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Stop                                             0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (2) _i2c_Start                                            0     0      0       0
                           _i2c_Wait
 ---------------------------------------------------------------------------------
 (3) _i2c_Wait                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Direction2                                    0     0      0    3699
                _EPWM2_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _EPWM2_LoadDutyValue                                  6     4      2    3699
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _Switch_Direction1                                    0     0      0    3699
                _EPWM1_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  6     4      2    3699
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     251
                                             27 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    1790
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    1484
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1338
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_write                                            6     4      2     812
                                              4 COMRAM     6     4      2
                      _LCD_writeChar
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0     565
                                              4 COMRAM     1     1      0
                         _Delay100ms
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _place_lcd_cursor                                     4     3      1     535
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Delay100ms                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_convertWrite                                     3     3      0    1305
                                             14 COMRAM     3     3      0
                      _LCD_writeChar
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     614
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     512
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_Port_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_Initialize
   _EPWM1_LoadDutyValue
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _EPWM2_Initialize
   _EPWM2_LoadDutyValue
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _EPWM_Port_Init
   _LCD_convertWrite
     _LCD_writeChar
     ___awdiv
       ___awmod (ARG)
     ___awmod
   _LCD_init
     _Delay100ms
     _place_lcd_cursor
   _LCD_write
     _LCD_writeChar
     _place_lcd_cursor
   _LCD_writeChar
   _Switch_Direction1
     _EPWM1_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Switch_Direction2
     _EPWM2_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _TMR2_Initialize
   _TMR4_Initialize
   _i2c_Command
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Wait
     _i2c_Write
       _i2c_Wait
   _i2c_Init
   _i2c_Port_Init
   _i2c_Read
     _LCD_writeChar
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _i2c_Restart
       _i2c_Wait
     _i2c_Start
       _i2c_Wait
     _i2c_Stop
       _i2c_Wait
     _i2c_Wait
     _i2c_Write
       _i2c_Wait
     _place_lcd_cursor
   _lineSensor_init
   _lineSensor_isWhiteLine1
     _lineSensor_read
   _lineSensor_read
   _place_lcd_cursor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     30      33       1       53.7%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      33       9        0.0%
DATA                 0      0      33      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 05 08:51:02 2015

      __size_of_EPWM2_LoadDutyValue 0080                        ___awdiv@sign 000C  
                    ?_i2c_Port_Init 0001                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                         __CFG_LVP$ON 000000  
                     ??_i2c_Command 0005                                 l243 12BA  
                               l255 12AE                                 l249 1296  
                               l291 1134                         i2c_Read@reg 000D  
                               l285 11F4                                 l811 0FA0  
                               l900 0B96                                 l821 10C2  
                               l932 09A4                                 l950 09E6  
                               l926 097E                                 l960 0A0E  
                               l890 0B3A                                 l946 09D6  
                               l892 0B58                                 l884 0B22  
                               l956 09FE                                 l896 0B6E  
                               l888 0B30                                 l976 1066  
                               l898 0B8C                                 l986 088C  
                      __CFG_CPB$OFF 000000                                 u101 0968  
                               u121 098E                                 u171 0872  
                               u190 08AA                                 _PR2 000FBB  
                               _PR4 000F52                        __CFG_CPD$OFF 000000  
                               u195 08A2                                 u807 0846  
                               u817 0856                                 u907 0700  
                               u827 1026                                 u917 0726  
                               u837 1036                                 u927 0FEE  
                               u847 0638                                 u937 1188  
                               u857 0654                                 u947 10FA  
                               u867 0670                                 u877 068C  
                               u887 06B4                                 u897 06DA  
                      ___awmod@sign 0006                     _TMR2_Initialize 1280  
                               wreg 000FE8            __end_of_EPWM2_Initialize 11C0  
                     ??_i2c_Restart 0002                          _Delay100ms 116A  
                              l1004 08F8                                l1022 0946  
                              l1014 0920                                l1016 092C  
                              l1008 0908                                l1018 0930  
                              l1620 0C1C                                l1612 0BFE  
                              l1540 1270                                l1630 0C3C  
                              l1622 0C20                                l1606 0BDE  
                              l1712 10B8                                l1704 1098  
                              l1618 0C14                                l1634 0C46  
                              l1650 0C82                                l1706 10A0  
                              l1660 0CB4                                l1820 0DB0  
                              l1708 10A4                                l1638 0C54  
                              l1662 0CB8                                l1670 0CD6  
                              l1654 0C9E                                l1822 0DD0  
                              l1814 0D7E                                l1824 0DD4  
                              l1674 0CE4                                l1666 0CCC  
                              l1658 0CAC                                l1684 0F6E  
                              l1932 0ABA                                l1686 0F76  
                              l1696 0F96                                l1688 0F7A  
                              l1946 0B0A                                _ADON 007E10  
                              STR_1 0601                LCD_convertWrite@data 0011  
                              _LATA 000F89                                _LATB 000F8A  
                              _LATC 000F8B                                _LATD 000F8C  
                              _LATE 000F8D                                _TMR2 000FBC  
                              _TMR4 000F53                                _WPUB 000F61  
                              _main 0A48                        ___ftpack@arg 0001  
                              _yPos 0031                        ___ftpack@exp 0004  
                     __CFG_BORV$190 000000                                prodl 000FF3  
                              start 0000                       __CFG_IESO$OFF 000000  
             ??_EPWM1_LoadDutyValue 002D                        ___ftmul@cntr 001A  
                      ___ftmul@sign 001B                  __size_of_LCD_write 0084  
                      ___fttol@exp1 002A                        ___fttol@lval 0026  
                  __end_of_LCD_init 073C                               ?_main 0001  
                   __end_of___awdiv 0C5E                     __end_of___awmod 0CEE  
                     i2c_Read@range 0014                     __end_of___ftmul 0A48  
                   ___awdiv@divisor 0009                     __end_of___fttol 0958  
                             _T2CON 000FBA                               _T4CON 000F51  
                   __end_of___lwdiv 0FAA                     __end_of___lwmod 10CC  
                   ___awdiv@counter 000B                               _PORTC 000F82  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISD 000F95                               _TRISE 000F96  
                     __CFG_WRT0$OFF 000000                     _TMR4_Initialize 121A  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000              __size_of_LCD_writeChar 003A  
                    __CFG_EBTRB$OFF 000000                       ___awtoft@sign 000C  
                    i2c_Command@reg 0003                 __end_of_i2c_Command 1042  
                __CFG_MCLRE$EXTMCLR 000000                       ___ftpack@sign 0005  
                             tablat 000FF5             __end_of_lineSensor_init 12C6  
           __end_of_lineSensor_read 1202                 __end_of_i2c_Restart 129C  
                             status 000FD8                      __CFG_HFOFST$ON 000000  
                    __CFG_FOSC$HSHP 000000                      __CFG_PBADEN$ON 000000  
                   __initialization 11C0                        __end_of_main 0B12  
                  __end_of_i2c_Init 121A                    __end_of_i2c_Read 0862  
                  __end_of_i2c_Wait 1280                     ??_i2c_Port_Init 0001  
                  __end_of_i2c_Stop 12B4             __end_of_TMR2_Initialize 1290  
           __size_of_EPWM_Port_Init 005E                              ??_main 0031  
                     ___fttol@sign1 0025                       __activetblptr 000001  
           _lineSensor_isWhiteLine1 1106                         ?_Delay100ms 0001  
                 __end_of_LCD_write 0DF8                              _ADCON0 000FC2  
                            _ADCON2 000FC0                              _ADRESL 000FC3  
                            _CCPR2H 000F68                              _CCPR3H 000F5F  
                            _CCPR2L 000F67                              _CCPR3L 000F5E  
                  ___awdiv@dividend 0007                   place_lcd_cursor@x 0003  
                 place_lcd_cursor@y 0001                    __end_of___awtoft 108A  
                            _ANSELA 000F38                              _ANSELB 000F39  
                            _ANSELD 000F3B                              _ANSELE 000F3C  
                  __end_of___ftpack 0BBA                              _GODONE 007E11  
                __size_of_i2c_Start 000C                  __size_of_i2c_Write 000C  
                    __CFG_WDTEN$OFF 000000                      __CFG_XINST$OFF 000000  
                     _LCD_writeChar 10CC                        _CCPTMRS0bits 000F49  
                         ??___awdiv 000B                      __CFG_STVREN$ON 000000  
                         ??___awmod 0005                           ??___ftmul 0013  
                         ??___fttol 0020                           ??___lwdiv 000A  
                         ??___lwmod 0005             __end_of_TMR4_Initialize 1232  
                  ___awdiv@quotient 000D                     ___awmod@divisor 0003  
          __end_of_LCD_convertWrite 0E7A                     ___awmod@counter 0005  
             ___ftmul@f3_as_product 0016                         _i2c_Command 0FF8  
                     i2c_Write@data 0002                        __pdataCOMRAM 0033  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                       _i2c_Restart 1290                 _EPWM2_LoadDutyValue 0E7A  
          i2c_Command@deviceAddress 0006                    ?_lineSensor_init 0001  
                  ?_lineSensor_read 0001                          __accesstop 0060  
           __end_of__initialization 11D6                           ?_LCD_init 0001  
                        ___awtoft@c 0009                      ?_LCD_writeChar 0001  
         __size_of_place_lcd_cursor 004E                          ___ftmul@f1 000D  
                        ___ftmul@f2 0010                   ?_EPWM1_Initialize 0001  
                        ___fttol@f1 001C                      __pcstackCOMRAM 0001  
              ?_EPWM2_LoadDutyValue 002B                 __size_of_Delay100ms 002C  
                ??_EPWM1_Initialize 0001                   __end_of_i2c_Start 12C0  
                  ?_TMR2_Initialize 0001                   __end_of_i2c_Write 12A8  
         ??_lineSensor_isWhiteLine1 0003                   ?_EPWM2_Initialize 0001  
                ??_EPWM2_Initialize 0001                           ?_i2c_Init 0001  
                         ?_i2c_Read 000D                           ?_i2c_Wait 0001  
                         ?_i2c_Stop 0001                     __CFG_PLLCFG$OFF 000000  
                        ??_LCD_init 0005                  __CFG_CCP2MX$PORTC1 000000  
             ??_EPWM2_LoadDutyValue 002D                  __CFG_CCP3MX$PORTB5 000000  
                           _CCP2CON 000F66                             _CCP3CON 000F5D  
                           _ECCP2AS 000F64                             _ECCP3AS 000F5B  
                    _EPWM_Port_Init 0EFA                    ?_TMR4_Initialize 0001  
                         ?___awtoft 0009                           ?___ftpack 0001  
                           _PWM2CON 000F65                             _PWM3CON 000F5C  
                           _SSP2ADD 000F6E                             _SSP2BUF 000F6F  
                        ??_i2c_Init 0001                          ??_i2c_Read 000E  
                        ??_i2c_Wait 0001                          ??_i2c_Stop 0002  
       __end_of_EPWM1_LoadDutyValue 0D74     __end_of_lineSensor_isWhiteLine1 1138  
                _whiteLineThreshold 0033                     ??_LCD_writeChar 0001  
                   __CFG_PWRTEN$OFF 000000                             __Hparam 0000  
                           __Lparam 0000                   i2c_Read@rangeInCm 0012  
            __end_of_EPWM_Port_Init 0F58                             ___awdiv 0BBA  
                           ___awmod 0C5E                             ___ftmul 0958  
                           ___fttol 0862                             ___lwdiv 0F58  
                           ___lwmod 108A                        __psmallconst 0600  
                           __pcinit 11C0                          ??___awtoft 000C  
                        ??___ftpack 0006                             __ramtop 0600  
                           __ptext0 0A48                             __ptext1 1106  
                           __ptext2 11E4                             __ptext3 12C0  
                           __ptext4 073C                             __ptext5 1290  
                           __ptext6 108A                             __ptext7 0F58  
                           __ptext8 125E                             __ptext9 1202  
                         _T2CONbits 000FBA                    ___awmod@dividend 0001  
                         _T4CONbits 000F51                        ??_Delay100ms 0001  
              end_of_initialization 11D6              lineSensor_read@Channel 0001  
                         _LCD_write 0D74               _LCD_convertWrite$1663 000F  
                  _place_lcd_cursor 0FAA                     ?_EPWM_Port_Init 0001  
                __end_of_Delay100ms 1196               __end_of_i2c_Port_Init 1270  
                LCD_writeChar@lower 0003                  LCD_writeChar@upper 0002  
                         _PORTCbits 000F82                   ?_LCD_convertWrite 0001  
                      ?_i2c_Command 0003                  ??_LCD_convertWrite 000F  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                      ?_i2c_Restart 0001                          ?_LCD_write 0005  
                 __size_of_LCD_init 0134                         ___ftmul@exp 0019  
                     __pidataCOMRAM 12C6            place_lcd_cursor@position 0004  
                         _i2c_Start 12B4                           _i2c_Write 129C  
               start_initialization 11C0           __size_of_EPWM1_Initialize 0032  
      EPWM1_LoadDutyValue@dutyValue 002B                          LCD_write@i 0009  
                 __size_of_i2c_Init 0018                   __size_of_i2c_Read 0126  
                 __size_of_i2c_Wait 0010                   __size_of_i2c_Stop 000C  
         __size_of_EPWM2_Initialize 002A            __size_of_lineSensor_init 0006  
          __size_of_lineSensor_read 001E                   __size_of___awtoft 0048  
                 __size_of___ftpack 00A8                          ?_i2c_Start 0001  
                        ?_i2c_Write 0001                         __pbssCOMRAM 0031  
          __size_of_TMR2_Initialize 0010                 __end_of__stringdata 0607  
                       ??_LCD_write 0007         __end_of_EPWM2_LoadDutyValue 0EFA  
                i2c_Command@command 0004                    ___lwdiv@dividend 0006  
                     LCD_write@data 0005                            ?___awdiv 0007  
                          ?___awmod 0001            ?_lineSensor_isWhiteLine1 0001  
                          ?___ftmul 000D                            ?___fttol 001C  
                          ?___lwdiv 0006                   _Switch_Direction1 1232  
                 _Switch_Direction2 124A                            ?___lwmod 0001  
                  __CFG_PRICLKEN$ON 000000                  ?_Switch_Direction1 0001  
                ?_Switch_Direction2 0001                         __smallconst 0600  
          __end_of_place_lcd_cursor 0FF8                __size_of_i2c_Command 004A  
               ??_Switch_Direction1 0031                 ??_Switch_Direction2 0031  
          __size_of_TMR4_Initialize 0018                    ___lwdiv@quotient 000A  
                       Delay100ms@i 0002                __size_of_i2c_Restart 000C  
                          _LATCbits 000F8B                            _LATDbits 000F8C  
                          _LCD_init 0608                    ??_EPWM_Port_Init 0001  
             __end_of_LCD_writeChar 1106                            _PIR1bits 000F9E  
                          _PIR5bits 000F7E        __size_of_EPWM1_LoadDutyValue 0086  
         __end_of_Switch_Direction1 124A           __end_of_Switch_Direction2 125E  
                  __CFG_WDTPS$32768 000000                   LCD_writeChar@data 0004  
                          _SSP2CON1 000F6C                            _SSP2CON2 000F6B  
                          _PSTR2CON 000F63                            _PSTR3CON 000F5A  
                          _SSP2STAT 000F6D                         __stringdata 0601  
                 ??_lineSensor_init 0001                   ??_lineSensor_read 0003  
                       ??_i2c_Start 0002                         ??_i2c_Write 0002  
                  _EPWM1_Initialize 1138               i2c_Read@deviceAddress 0013  
                       _INTCON2bits 000FF1                            _i2c_Init 1202  
                          _i2c_Read 073C                            _i2c_Wait 1270  
                          _i2c_Stop 12A8  lineSensor_isWhiteLine1@isWhiteLine 0006  
         __size_of_LCD_convertWrite 0082                   ??_TMR2_Initialize 0001  
                          __Hrparam 0000                    _EPWM2_Initialize 1196  
                          __Lrparam 0000                  i2c_Read@rangeInCm1 0011  
                      __Lsmallconst 0600                  __CFG_BOREN$SBORDIS 000000  
                 __CFG_P2BMX$PORTD2 000000                    __size_of___awdiv 00A4  
                  __size_of___awmod 0090                    __size_of___ftmul 00F0  
                  __size_of___fttol 00F6                    __size_of___lwdiv 0052  
                  __size_of___lwmod 0042                            ___awtoft 1042  
                          ___ftpack 0B12                          _ANSELCbits 000F3A  
                        _ANSELDbits 000F3B                     ___lwdiv@divisor 0008  
                   ___lwdiv@counter 000C                            __ptext10 0FF8  
                          __ptext11 129C                            __ptext20 0CEE  
                          __ptext12 12A8                            __ptext21 0862  
                          __ptext13 12B4                            __ptext30 0C5E  
                          __ptext22 0958                            __ptext14 1270  
                          __ptext31 0BBA                            __ptext23 1042  
                          __ptext15 121A                            __ptext32 10CC  
                          __ptext24 0B12                            __ptext16 1280  
                          __ptext33 0EFA                            __ptext25 0D74  
                          __ptext17 124A                            __ptext34 1196  
                          __ptext26 0608                            __ptext18 0E7A  
                          __ptext35 1138                            __ptext27 0FAA  
                          __ptext19 1232                            __ptext28 116A  
                          __ptext29 0DF8                        _SSP2CON1bits 000F6C  
                      _SSP2CON2bits 000F6B                   ??_TMR4_Initialize 0001  
            __size_of_i2c_Port_Init 0012                       __size_of_main 00CA  
        __size_of_Switch_Direction1 0018          __size_of_Switch_Direction2 0014  
                     _i2c_Read$1664 000F                    ___lwmod@dividend 0001  
      EPWM2_LoadDutyValue@dutyValue 002B                       _i2c_Port_Init 125E  
                   ___lwmod@divisor 0003                     ___lwmod@counter 0005  
                 __CFG_T3CMX$PORTC0 000000                 _EPWM1_LoadDutyValue 0CEE  
                 ?_place_lcd_cursor 0001    __size_of_lineSensor_isWhiteLine1 0032  
                ??_place_lcd_cursor 0002                    _LCD_convertWrite 0DF8  
                   _lineSensor_init 12C0                     _lineSensor_read 11E4  
          __end_of_EPWM1_Initialize 116A                ?_EPWM1_LoadDutyValue 002B  
