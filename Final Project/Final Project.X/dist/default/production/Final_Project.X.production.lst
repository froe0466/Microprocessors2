

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri May 08 11:56:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  000E3A                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _whiteLineThreshold
    41  000E3A  7D                 	db	125
    42  0000                     _ADCON0	set	4034
    43  0000                     _ADCON2	set	4032
    44  0000                     _ADRESL	set	4035
    45  0000                     _ANSELA	set	3896
    46  0000                     _ANSELB	set	3897
    47  0000                     _ANSELCbits	set	3898
    48  0000                     _ANSELD	set	3899
    49  0000                     _ANSELDbits	set	3899
    50  0000                     _ANSELE	set	3900
    51  0000                     _CCP2CON	set	3942
    52  0000                     _CCP3CON	set	3933
    53  0000                     _CCPR2H	set	3944
    54  0000                     _CCPR2L	set	3943
    55  0000                     _CCPR3H	set	3935
    56  0000                     _CCPR3L	set	3934
    57  0000                     _CCPTMRS0bits	set	3913
    58  0000                     _ECCP2AS	set	3940
    59  0000                     _ECCP3AS	set	3931
    60  0000                     _INTCON2bits	set	4081
    61  0000                     _LATA	set	3977
    62  0000                     _LATAbits	set	3977
    63  0000                     _LATB	set	3978
    64  0000                     _LATC	set	3979
    65  0000                     _LATCbits	set	3979
    66  0000                     _LATD	set	3980
    67  0000                     _LATDbits	set	3980
    68  0000                     _LATE	set	3981
    69  0000                     _PIR1bits	set	3998
    70  0000                     _PIR5bits	set	3966
    71  0000                     _PORTAbits	set	3968
    72  0000                     _PORTC	set	3970
    73  0000                     _PORTCbits	set	3970
    74  0000                     _PR2	set	4027
    75  0000                     _PR4	set	3922
    76  0000                     _PSTR2CON	set	3939
    77  0000                     _PSTR3CON	set	3930
    78  0000                     _PWM2CON	set	3941
    79  0000                     _PWM3CON	set	3932
    80  0000                     _SSP2ADD	set	3950
    81  0000                     _SSP2BUF	set	3951
    82  0000                     _SSP2CON1	set	3948
    83  0000                     _SSP2CON1bits	set	3948
    84  0000                     _SSP2CON2	set	3947
    85  0000                     _SSP2CON2bits	set	3947
    86  0000                     _SSP2STAT	set	3949
    87  0000                     _T2CON	set	4026
    88  0000                     _T2CONbits	set	4026
    89  0000                     _T4CON	set	3921
    90  0000                     _T4CONbits	set	3921
    91  0000                     _T6CON	set	3914
    92  0000                     _TMR2	set	4028
    93  0000                     _TMR4	set	3923
    94  0000                     _TMR6	set	3916
    95  0000                     _TRISA	set	3986
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISD	set	3989
   100  0000                     _TRISDbits	set	3989
   101  0000                     _TRISE	set	3990
   102  0000                     _WPUB	set	3937
   103  0000                     _ADON	set	32272
   104  0000                     _GODONE	set	32273
   105                           
   106                           	psect	smallconst
   107  000600                     __psmallconst:
   108                           	opt stack 0
   109  000600  00                 	db	0
   110  000601                     __stringdata:
   111                           	opt stack 0
   112  000601                     STR_1:
   113  000601  53                 	db	83	;'S'
   114  000602  74                 	db	116	;'t'
   115  000603  61                 	db	97	;'a'
   116  000604  72                 	db	114	;'r'
   117  000605  74                 	db	116	;'t'
   118  000606  00                 	db	0
   119  000607                     __end_of__stringdata:
   120                           	opt stack 0
   121                           
   122                           ; #config settings
   123  000607  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  000D9A                     __pcinit:
   127                           	opt stack 0
   128  000D9A                     start_initialization:
   129                           	opt stack 0
   130  000D9A                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to COMRAM (2 bytes)
   134  000D9A  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   135  000D9C  6A35               	clrf	__pbssCOMRAM& (0+255),c
   136                           
   137                           ; Initialize objects allocated to COMRAM (1 bytes)
   138                           ; load TBLPTR registers with __pidataCOMRAM
   139  000D9E  0E3A               	movlw	low __pidataCOMRAM
   140  000DA0  6EF6               	movwf	tblptrl,c
   141  000DA2  0E0E               	movlw	high __pidataCOMRAM
   142  000DA4  6EF7               	movwf	tblptrh,c
   143  000DA6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   144  000DA8  6EF8               	movwf	tblptru,c
   145  000DAA  0009               	tblrd		*+	;fetch initializer
   146  000DAC  CFF5 F037          	movff	tablat,__pdataCOMRAM
   147  000DB0                     end_of_initialization:
   148                           	opt stack 0
   149  000DB0                     __end_of__initialization:
   150                           	opt stack 0
   151  000DB0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   152  000DB2  6EF8               	movwf	tblptru,c
   153  000DB4  0E06               	movlw	high __Lsmallconst
   154  000DB6  6EF7               	movwf	tblptrh,c
   155  000DB8  0100               	movlb	0
   156  000DBA  EFD9  F005         	goto	_main	;jump to C main() function
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           
   162                           	psect	bssCOMRAM
   163  000035                     __pbssCOMRAM:
   164                           	opt stack 0
   165  000035                     _yPos:
   166                           	opt stack 0
   167  000035                     	ds	2
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           
   173                           	psect	dataCOMRAM
   174  000037                     __pdataCOMRAM:
   175                           	opt stack 0
   176  000037                     _whiteLineThreshold:
   177                           	opt stack 0
   178  000037                     	ds	1
   179                           tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           tblptrl	equ	0xFF6
   182                           tablat	equ	0xFF5
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt stack 0
   187  000001                     ??_Delay100ms:
   188  000001                     ??_LCD_writeChar:
   189  000001                     ?___ftpack:
   190                           	opt stack 0
   191  000001                     place_lcd_cursor@y:
   192                           	opt stack 0
   193  000001                     ___ftpack@arg:
   194                           	opt stack 0
   195                           
   196                           ; 3 bytes @ 0x0
   197  000001                     	ds	1
   198  000002                     ??_place_lcd_cursor:
   199  000002                     LCD_writeChar@upper:
   200                           	opt stack 0
   201  000002                     Delay100ms@i:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x1
   205  000002                     	ds	1
   206  000003                     LCD_writeChar@lower:
   207                           	opt stack 0
   208  000003                     place_lcd_cursor@x:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0x2
   212  000003                     	ds	1
   213  000004                     LCD_writeChar@data:
   214                           	opt stack 0
   215  000004                     place_lcd_cursor@position:
   216                           	opt stack 0
   217  000004                     ___ftpack@exp:
   218                           	opt stack 0
   219                           
   220                           ; 1 bytes @ 0x3
   221  000004                     	ds	1
   222  000005                     ??_LCD_init:
   223  000005                     ___ftpack@sign:
   224                           	opt stack 0
   225  000005                     LCD_write@data:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x4
   229  000005                     	ds	1
   230  000006                     ??___ftpack:
   231                           
   232                           ; 0 bytes @ 0x5
   233  000006                     	ds	1
   234  000007                     ??_LCD_write:
   235                           
   236                           ; 0 bytes @ 0x6
   237  000007                     	ds	2
   238  000009                     ?___awtoft:
   239                           	opt stack 0
   240  000009                     LCD_write@i:
   241                           	opt stack 0
   242  000009                     ___awtoft@c:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x8
   246  000009                     	ds	3
   247  00000C                     ___awtoft@sign:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0xB
   251  00000C                     	ds	1
   252  00000D                     ?___ftmul:
   253                           	opt stack 0
   254  00000D                     ___ftmul@f1:
   255                           	opt stack 0
   256                           
   257                           ; 3 bytes @ 0xC
   258  00000D                     	ds	3
   259  000010                     ___ftmul@f2:
   260                           	opt stack 0
   261                           
   262                           ; 3 bytes @ 0xF
   263  000010                     	ds	3
   264  000013                     ??___ftmul:
   265                           
   266                           ; 0 bytes @ 0x12
   267  000013                     	ds	3
   268  000016                     ___ftmul@f3_as_product:
   269                           	opt stack 0
   270                           
   271                           ; 3 bytes @ 0x15
   272  000016                     	ds	3
   273  000019                     ___ftmul@exp:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x18
   277  000019                     	ds	1
   278  00001A                     ___ftmul@cntr:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x19
   282  00001A                     	ds	1
   283  00001B                     ___ftmul@sign:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x1A
   287  00001B                     	ds	1
   288  00001C                     ?___fttol:
   289                           	opt stack 0
   290  00001C                     ___fttol@f1:
   291                           	opt stack 0
   292                           
   293                           ; 3 bytes @ 0x1B
   294  00001C                     	ds	4
   295  000020                     ??___fttol:
   296                           
   297                           ; 0 bytes @ 0x1F
   298  000020                     	ds	5
   299  000025                     ___fttol@sign1:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x24
   303  000025                     	ds	1
   304  000026                     ___fttol@lval:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x25
   308  000026                     	ds	4
   309  00002A                     ___fttol@exp1:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x29
   313  00002A                     	ds	1
   314  00002B                     EPWM1_LoadDutyValue@dutyValue:
   315                           	opt stack 0
   316  00002B                     EPWM2_LoadDutyValue@dutyValue:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x2A
   320  00002B                     	ds	2
   321  00002D                     ??_EPWM1_LoadDutyValue:
   322  00002D                     ??_EPWM2_LoadDutyValue:
   323                           
   324                           ; 0 bytes @ 0x2C
   325  00002D                     	ds	4
   326  000031                     Drive_Forward@speed:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x30
   330  000031                     	ds	2
   331  000033                     ??_Drive_Forward:
   332                           
   333                           ; 0 bytes @ 0x32
   334  000033                     	ds	1
   335  000034                     Drive_Forward@distance:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x33
   339  000034                     	ds	1
   340  000035                     tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           
   345                           ; 0 bytes @ 0x34
   346 ;;
   347 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   348 ;;
   349 ;; *************** function _main *****************
   350 ;; Defined at:
   351 ;;		line 17 in file "../Driver.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;		None               void
   358 ;; Registers used:
   359 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   365 ;;      Params:         0       0       0       0       0       0       0
   366 ;;      Locals:         0       0       0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0       0       0
   368 ;;      Totals:         0       0       0       0       0       0       0
   369 ;;Total ram usage:        0 bytes
   370 ;; Hardware stack levels required when called:    5
   371 ;; This function calls:
   372 ;;		_Drive_Forward
   373 ;;		_EPWM1_Initialize
   374 ;;		_EPWM2_Initialize
   375 ;;		_EPWM_Port_Init
   376 ;;		_LCD_init
   377 ;;		_LCD_write
   378 ;;		_Stop
   379 ;;		_TMR2_Initialize
   380 ;;		_TMR4_Initialize
   381 ;;		_i2c_Init
   382 ;;		_i2c_Port_Init
   383 ;;		_lineSensor_init
   384 ;;		_place_lcd_cursor
   385 ;; This function is called by:
   386 ;;		Startup code after reset
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text0
   391  000BB2                     __ptext0:
   392                           	opt stack 0
   393  000BB2                     _main:
   394                           	opt stack 26
   395                           
   396                           ;Driver.c: 20: EPWM_Port_Init();
   397                           
   398                           ;incstack = 0
   399  000BB2  ECAA  F005         	call	_EPWM_Port_Init	;wreg free
   400                           
   401                           ;Driver.c: 23: EPWM1_Initialize();
   402  000BB6  EC89  F006         	call	_EPWM1_Initialize	;wreg free
   403                           
   404                           ;Driver.c: 24: TMR2_Initialize();
   405  000BBA  EC12  F007         	call	_TMR2_Initialize	;wreg free
   406                           
   407                           ;Driver.c: 27: EPWM2_Initialize();
   408  000BBE  ECB8  F006         	call	_EPWM2_Initialize	;wreg free
   409                           
   410                           ;Driver.c: 28: TMR4_Initialize();
   411  000BC2  ECFD  F006         	call	_TMR4_Initialize	;wreg free
   412                           
   413                           ;Driver.c: 30: Stop();
   414  000BC6  ECDF  F006         	call	_Stop	;wreg free
   415                           
   416                           ;Driver.c: 33: LCD_init();
   417  000BCA  EC04  F003         	call	_LCD_init	;wreg free
   418                           
   419                           ;Driver.c: 34: place_lcd_cursor(0,0);
   420  000BCE  0E00               	movlw	0
   421  000BD0  6E01               	movwf	place_lcd_cursor@y,c
   422  000BD2  0E00               	movlw	0
   423  000BD4  EC00  F006         	call	_place_lcd_cursor
   424                           
   425                           ;Driver.c: 37: i2c_Port_Init();
   426  000BD8  EC09  F007         	call	_i2c_Port_Init	;wreg free
   427                           
   428                           ;Driver.c: 38: i2c_Init();
   429  000BDC  ECF1  F006         	call	_i2c_Init	;wreg free
   430                           
   431                           ;Driver.c: 41: lineSensor_init();
   432  000BE0  EC1A  F007         	call	_lineSensor_init	;wreg free
   433                           
   434                           ;Driver.c: 44: LCD_write("Start");
   435  000BE4  0E06               	movlw	high STR_1
   436  000BE6  6E06               	movwf	LCD_write@data+1,c
   437  000BE8  0E01               	movlw	low STR_1
   438  000BEA  6E05               	movwf	LCD_write@data,c
   439  000BEC  EC28  F005         	call	_LCD_write	;wreg free
   440                           
   441                           ;Driver.c: 46: Drive_Forward(500,45);
   442  000BF0  0E00               	movlw	0
   443  000BF2  6E32               	movwf	Drive_Forward@speed+1,c
   444  000BF4  0E2D               	movlw	45
   445  000BF6  6E31               	movwf	Drive_Forward@speed,c
   446  000BF8  0EF4               	movlw	244
   447  000BFA  EC4B  F006         	call	_Drive_Forward
   448  000BFE                     l161:
   449                           
   450                           ;Driver.c: 51: {
   451  000BFE  D7FF               	goto	l161
   452  000C00                     __end_of_main:
   453                           	opt stack 0
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           
   459 ;; *************** function _lineSensor_init *****************
   460 ;; Defined at:
   461 ;;		line 7 in file "../LineSensor.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;		None               void
   468 ;; Registers used:
   469 ;;		wreg, status,2
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   475 ;;      Params:         0       0       0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0       0       0
   477 ;;      Temps:          0       0       0       0       0       0       0
   478 ;;      Totals:         0       0       0       0       0       0       0
   479 ;;Total ram usage:        0 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; This function calls:
   482 ;;		Nothing
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text1
   489  000E34                     __ptext1:
   490                           	opt stack 0
   491  000E34                     _lineSensor_init:
   492                           	opt stack 30
   493                           
   494                           ;LineSensor.c: 9: ADCON2=0b10001010;
   495                           
   496                           ;incstack = 0
   497  000E34  0E8A               	movlw	138
   498  000E36  6EC0               	movwf	4032,c	;volatile
   499  000E38  0012               	return	
   500  000E3A                     __end_of_lineSensor_init:
   501                           	opt stack 0
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           
   507 ;; *************** function _i2c_Port_Init *****************
   508 ;; Defined at:
   509 ;;		line 17 in file "../i2c.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;		None
   512 ;; Auto vars:     Size  Location     Type
   513 ;;		None
   514 ;; Return value:  Size  Location     Type
   515 ;;		None               void
   516 ;; Registers used:
   517 ;;		None
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   523 ;;      Params:         0       0       0       0       0       0       0
   524 ;;      Locals:         0       0       0       0       0       0       0
   525 ;;      Temps:          0       0       0       0       0       0       0
   526 ;;      Totals:         0       0       0       0       0       0       0
   527 ;;Total ram usage:        0 bytes
   528 ;; Hardware stack levels used:    1
   529 ;; This function calls:
   530 ;;		Nothing
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text2
   537  000E12                     __ptext2:
   538                           	opt stack 0
   539  000E12                     _i2c_Port_Init:
   540                           	opt stack 30
   541                           
   542                           ;i2c.c: 33: LATDbits.LD0 = 0;
   543                           
   544                           ;incstack = 0
   545  000E12  908C               	bcf	3980,0,c	;volatile
   546                           
   547                           ;i2c.c: 34: LATDbits.LD1 = 0;
   548  000E14  928C               	bcf	3980,1,c	;volatile
   549                           
   550                           ;i2c.c: 35: TRISDbits.RD0 = 0;
   551  000E16  9095               	bcf	3989,0,c	;volatile
   552                           
   553                           ;i2c.c: 36: TRISDbits.RD1 = 0;
   554  000E18  9295               	bcf	3989,1,c	;volatile
   555                           
   556                           ;i2c.c: 37: ANSELDbits.ANSD0 = 0;
   557  000E1A  010F               	movlb	15	; () banked
   558  000E1C  913B               	bcf	59,0,b	;volatile
   559                           
   560                           ;i2c.c: 38: ANSELDbits.ANSD1 = 0;
   561  000E1E  010F               	movlb	15	; () banked
   562  000E20  933B               	bcf	59,1,b	;volatile
   563                           
   564                           ; BSR set to: 15
   565  000E22  0012               	return	
   566  000E24                     __end_of_i2c_Port_Init:
   567                           	opt stack 0
   568                           tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           
   573 ;; *************** function _i2c_Init *****************
   574 ;; Defined at:
   575 ;;		line 51 in file "../i2c.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;		None               void
   582 ;; Registers used:
   583 ;;		wreg, status,2
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   589 ;;      Params:         0       0       0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0
   592 ;;      Totals:         0       0       0       0       0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text3
   603  000DE2                     __ptext3:
   604                           	opt stack 0
   605  000DE2                     _i2c_Init:
   606                           	opt stack 30
   607                           
   608                           ;i2c.c: 55: TRISDbits.TRISD0=1;
   609                           
   610                           ; BSR set to: 15
   611                           ;incstack = 0
   612  000DE2  8095               	bsf	3989,0,c	;volatile
   613                           
   614                           ;i2c.c: 56: TRISDbits.TRISD1=1;
   615  000DE4  8295               	bsf	3989,1,c	;volatile
   616                           
   617                           ;i2c.c: 57: SSP2CON1bits.SSPEN = 1;
   618  000DE6  8A6C               	bsf	3948,5,c	;volatile
   619                           
   620                           ;i2c.c: 58: SSP2CON1 = 0b00101000;
   621  000DE8  0E28               	movlw	40
   622  000DEA  6E6C               	movwf	3948,c	;volatile
   623                           
   624                           ;i2c.c: 59: SSP2CON2 = 0;
   625  000DEC  0E00               	movlw	0
   626  000DEE  6E6B               	movwf	3947,c	;volatile
   627                           
   628                           ;i2c.c: 62: SSP2ADD = 39;
   629  000DF0  0E27               	movlw	39
   630  000DF2  6E6E               	movwf	3950,c	;volatile
   631                           
   632                           ;i2c.c: 64: SSP2STAT = 0b10000000;
   633  000DF4  0E80               	movlw	128
   634  000DF6  6E6D               	movwf	3949,c	;volatile
   635  000DF8  0012               	return	
   636  000DFA                     __end_of_i2c_Init:
   637                           	opt stack 0
   638                           tblptru	equ	0xFF8
   639                           tblptrh	equ	0xFF7
   640                           tblptrl	equ	0xFF6
   641                           tablat	equ	0xFF5
   642                           
   643 ;; *************** function _TMR4_Initialize *****************
   644 ;; Defined at:
   645 ;;		line 144 in file "../DCMotor.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;		None               void
   652 ;; Registers used:
   653 ;;		wreg, status,2
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   659 ;;      Params:         0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0
   662 ;;      Totals:         0       0       0       0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text4
   673  000DFA                     __ptext4:
   674                           	opt stack 0
   675  000DFA                     _TMR4_Initialize:
   676                           	opt stack 30
   677                           
   678                           ;DCMotor.c: 149: T4CON = 0x00;
   679                           
   680                           ;incstack = 0
   681  000DFA  0E00               	movlw	0
   682  000DFC  010F               	movlb	15	; () banked
   683  000DFE  6F51               	movwf	81,b	;volatile
   684                           
   685                           ;DCMotor.c: 152: PR4 = 0xA0;
   686  000E00  0EA0               	movlw	160
   687  000E02  010F               	movlb	15	; () banked
   688  000E04  6F52               	movwf	82,b	;volatile
   689                           
   690                           ; BSR set to: 15
   691                           ;DCMotor.c: 155: TMR4 = 0xFF;
   692  000E06  010F               	movlb	15	; () banked
   693  000E08  6953               	setf	83,b	;volatile
   694                           
   695                           ; BSR set to: 15
   696                           ;DCMotor.c: 158: PIR5bits.TMR4IF = 0;
   697  000E0A  907E               	bcf	3966,0,c	;volatile
   698                           
   699                           ; BSR set to: 15
   700                           ;DCMotor.c: 161: T4CONbits.TMR4ON = 1;
   701  000E0C  010F               	movlb	15	; () banked
   702  000E0E  8551               	bsf	81,2,b	;volatile
   703                           
   704                           ; BSR set to: 15
   705  000E10  0012               	return	
   706  000E12                     __end_of_TMR4_Initialize:
   707                           	opt stack 0
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           
   713 ;; *************** function _TMR2_Initialize *****************
   714 ;; Defined at:
   715 ;;		line 74 in file "../DCMotor.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;		None               void
   722 ;; Registers used:
   723 ;;		wreg, status,2
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   729 ;;      Params:         0       0       0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0
   732 ;;      Totals:         0       0       0       0       0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; This function calls:
   736 ;;		Nothing
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text5
   743  000E24                     __ptext5:
   744                           	opt stack 0
   745  000E24                     _TMR2_Initialize:
   746                           	opt stack 30
   747                           
   748                           ;DCMotor.c: 79: T2CON = 0x00;
   749                           
   750                           ; BSR set to: 15
   751                           ;incstack = 0
   752  000E24  0E00               	movlw	0
   753  000E26  6EBA               	movwf	4026,c	;volatile
   754                           
   755                           ;DCMotor.c: 82: PR2 = 0xA0;
   756  000E28  0EA0               	movlw	160
   757  000E2A  6EBB               	movwf	4027,c	;volatile
   758                           
   759                           ;DCMotor.c: 85: TMR2 = 0xFF;
   760  000E2C  68BC               	setf	4028,c	;volatile
   761                           
   762                           ;DCMotor.c: 88: PIR1bits.TMR2IF = 0;
   763  000E2E  929E               	bcf	3998,1,c	;volatile
   764                           
   765                           ;DCMotor.c: 91: T2CONbits.TMR2ON = 1;
   766  000E30  84BA               	bsf	4026,2,c	;volatile
   767  000E32  0012               	return	
   768  000E34                     __end_of_TMR2_Initialize:
   769                           	opt stack 0
   770                           tblptru	equ	0xFF8
   771                           tblptrh	equ	0xFF7
   772                           tblptrl	equ	0xFF6
   773                           tablat	equ	0xFF5
   774                           
   775 ;; *************** function _LCD_write *****************
   776 ;; Defined at:
   777 ;;		line 82 in file "../LCD.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  data            2    4[COMRAM] PTR unsigned char 
   780 ;;		 -> STR_1(6), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  i               2    8[COMRAM] int 
   783 ;; Return value:  Size  Location     Type
   784 ;;		None               void
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   792 ;;      Params:         2       0       0       0       0       0       0
   793 ;;      Locals:         2       0       0       0       0       0       0
   794 ;;      Temps:          2       0       0       0       0       0       0
   795 ;;      Totals:         6       0       0       0       0       0       0
   796 ;;Total ram usage:        6 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    1
   799 ;; This function calls:
   800 ;;		_LCD_writeChar
   801 ;;		_place_lcd_cursor
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text6
   808  000A50                     __ptext6:
   809                           	opt stack 0
   810  000A50                     _LCD_write:
   811                           	opt stack 29
   812                           
   813                           ;LCD.c: 86: for(int i=0; data[i]!='\0'; i++)
   814                           
   815                           ;incstack = 0
   816  000A50  0E00               	movlw	0
   817  000A52  6E0A               	movwf	LCD_write@i+1,c
   818  000A54  0E00               	movlw	0
   819  000A56  6E09               	movwf	LCD_write@i,c
   820  000A58  D02B               	goto	l1289
   821  000A5A                     l1279:
   822                           
   823                           ;LCD.c: 87: {
   824                           ;LCD.c: 88: if(data[i] == '\n')
   825  000A5A  C005  F007         	movff	LCD_write@data,??_LCD_write
   826  000A5E  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
   827  000A62  5009               	movf	LCD_write@i,w,c
   828  000A64  2607               	addwf	??_LCD_write,f,c
   829  000A66  500A               	movf	LCD_write@i+1,w,c
   830  000A68  2208               	addwfc	??_LCD_write+1,f,c
   831  000A6A  C007  FFF6         	movff	??_LCD_write,tblptrl
   832  000A6E  C008  FFF7         	movff	??_LCD_write+1,tblptrh
   833  000A72                     	if	0	;tblptru may be non-zero
   834  000A72                     	endif
   835  000A72                     	if	0	;tblptru may be non-zero
   836  000A72                     	endif
   837  000A72  0008               	tblrd		*
   838  000A74  50F5               	movf	tablat,w,c
   839  000A76  0A0A               	xorlw	10
   840  000A78  A4D8               	btfss	status,2,c
   841  000A7A  D008               	goto	l1285
   842                           
   843                           ;LCD.c: 89: {
   844                           ;LCD.c: 91: ++yPos;
   845  000A7C  4A35               	infsnz	_yPos,f,c
   846  000A7E  2A36               	incf	_yPos+1,f,c
   847                           
   848                           ;LCD.c: 92: place_lcd_cursor(0,yPos);
   849  000A80  C035  F001         	movff	_yPos,place_lcd_cursor@y
   850  000A84  0E00               	movlw	0
   851  000A86  EC00  F006         	call	_place_lcd_cursor
   852                           
   853                           ;LCD.c: 93: }
   854  000A8A  D010               	goto	l1287
   855  000A8C                     l1285:
   856                           
   857                           ;LCD.c: 94: else
   858                           ;LCD.c: 95: {
   859                           ;LCD.c: 97: LCD_writeChar(data[i]);
   860  000A8C  C005  F007         	movff	LCD_write@data,??_LCD_write
   861  000A90  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
   862  000A94  5009               	movf	LCD_write@i,w,c
   863  000A96  2607               	addwf	??_LCD_write,f,c
   864  000A98  500A               	movf	LCD_write@i+1,w,c
   865  000A9A  2208               	addwfc	??_LCD_write+1,f,c
   866  000A9C  C007  FFF6         	movff	??_LCD_write,tblptrl
   867  000AA0  C008  FFF7         	movff	??_LCD_write+1,tblptrh
   868  000AA4                     	if	0	;tblptru may be non-zero
   869  000AA4                     	endif
   870  000AA4                     	if	0	;tblptru may be non-zero
   871  000AA4                     	endif
   872  000AA4  0008               	tblrd		*
   873  000AA6  50F5               	movf	tablat,w,c
   874  000AA8  EC6C  F006         	call	_LCD_writeChar
   875  000AAC                     l1287:
   876  000AAC  4A09               	infsnz	LCD_write@i,f,c
   877  000AAE  2A0A               	incf	LCD_write@i+1,f,c
   878  000AB0                     l1289:
   879  000AB0  C005  F007         	movff	LCD_write@data,??_LCD_write
   880  000AB4  C006  F008         	movff	LCD_write@data+1,??_LCD_write+1
   881  000AB8  5009               	movf	LCD_write@i,w,c
   882  000ABA  2607               	addwf	??_LCD_write,f,c
   883  000ABC  500A               	movf	LCD_write@i+1,w,c
   884  000ABE  2208               	addwfc	??_LCD_write+1,f,c
   885  000AC0  C007  FFF6         	movff	??_LCD_write,tblptrl
   886  000AC4  C008  FFF7         	movff	??_LCD_write+1,tblptrh
   887  000AC8                     	if	0	;tblptru may be non-zero
   888  000AC8                     	endif
   889  000AC8                     	if	0	;tblptru may be non-zero
   890  000AC8                     	endif
   891  000AC8  0008               	tblrd		*
   892  000ACA  50F5               	movf	tablat,w,c
   893  000ACC  0900               	iorlw	0
   894  000ACE  B4D8               	btfsc	status,2,c
   895  000AD0  0012               	return	
   896  000AD2  D7C3               	goto	l1279
   897  000AD4                     __end_of_LCD_write:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           status	equ	0xFD8
   904                           
   905 ;; *************** function _LCD_writeChar *****************
   906 ;; Defined at:
   907 ;;		line 103 in file "../LCD.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  data            1    wreg     unsigned char 
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  data            1    3[COMRAM] unsigned char 
   912 ;;  lower           1    2[COMRAM] unsigned char 
   913 ;;  upper           1    1[COMRAM] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;		None               void
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   923 ;;      Params:         0       0       0       0       0       0       0
   924 ;;      Locals:         3       0       0       0       0       0       0
   925 ;;      Temps:          1       0       0       0       0       0       0
   926 ;;      Totals:         4       0       0       0       0       0       0
   927 ;;Total ram usage:        4 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_LCD_write
   933 ;;		_LCD_convertWrite
   934 ;;		_i2c_Read
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text7
   939  000CD8                     __ptext7:
   940                           	opt stack 0
   941  000CD8                     _LCD_writeChar:
   942                           	opt stack 29
   943                           
   944                           ;incstack = 0
   945                           ;LCD_writeChar@data stored from wreg
   946  000CD8  6E04               	movwf	LCD_writeChar@data,c
   947                           
   948                           ;LCD.c: 106: unsigned char upper = data & 0b11110000;
   949  000CDA  5004               	movf	LCD_writeChar@data,w,c
   950  000CDC  0BF0               	andlw	240
   951  000CDE  6E02               	movwf	LCD_writeChar@upper,c
   952                           
   953                           ;LCD.c: 107: unsigned char lower = (data << 4);
   954  000CE0  3804               	swapf	LCD_writeChar@data,w,c
   955  000CE2  0BF0               	andlw	240
   956  000CE4  6E03               	movwf	LCD_writeChar@lower,c
   957                           
   958                           ;LCD.c: 110: LATCbits.LC3 = 1;
   959  000CE6  868B               	bsf	3979,3,c	;volatile
   960                           
   961                           ;LCD.c: 111: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | upper; LATCbits.LC2 = 0;
   962  000CE8  848B               	bsf	3979,2,c	;volatile
   963  000CEA  508B               	movf	3979,w,c	;volatile
   964  000CEC  0B0F               	andlw	15
   965  000CEE  1002               	iorwf	LCD_writeChar@upper,w,c
   966  000CF0  6E8B               	movwf	3979,c	;volatile
   967  000CF2  948B               	bcf	3979,2,c	;volatile
   968                           
   969                           ;LCD.c: 112: LATCbits.LC2 = 1; LATC = (LATC & 0b00001111) | lower; LATCbits.LC2 = 0;
   970  000CF4  848B               	bsf	3979,2,c	;volatile
   971  000CF6  508B               	movf	3979,w,c	;volatile
   972  000CF8  0B0F               	andlw	15
   973  000CFA  1003               	iorwf	LCD_writeChar@lower,w,c
   974  000CFC  6E8B               	movwf	3979,c	;volatile
   975  000CFE  948B               	bcf	3979,2,c	;volatile
   976                           
   977                           ;LCD.c: 113: _delay((unsigned long)((1)*(10000000/4000.0)));
   978  000D00  0E04               	movlw	4
   979  000D02  6E01               	movwf	??_LCD_writeChar& (0+255),c
   980  000D04  0E3E               	movlw	62
   981  000D06                     u377:
   982  000D06  2EE8               	decfsz	wreg,f,c
   983  000D08  D7FE               	goto	u377
   984  000D0A  2E01               	decfsz	??_LCD_writeChar& (0+255),f,c
   985  000D0C  D7FC               	goto	u377
   986                           
   987                           ;LCD.c: 114: LATCbits.LC3 = 0;
   988  000D0E  968B               	bcf	3979,3,c	;volatile
   989  000D10  0012               	return	
   990  000D12                     __end_of_LCD_writeChar:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           wreg	equ	0xFE8
   997                           status	equ	0xFD8
   998                           
   999 ;; *************** function _LCD_init *****************
  1000 ;; Defined at:
  1001 ;;		line 18 in file "../LCD.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;		None               void
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1015 ;;      Params:         0       0       0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0       0       0
  1017 ;;      Temps:          1       0       0       0       0       0       0
  1018 ;;      Totals:         1       0       0       0       0       0       0
  1019 ;;Total ram usage:        1 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    1
  1022 ;; This function calls:
  1023 ;;		_Delay100ms
  1024 ;;		_place_lcd_cursor
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text8
  1031  000608                     __ptext8:
  1032                           	opt stack 0
  1033  000608                     _LCD_init:
  1034                           	opt stack 29
  1035                           
  1036                           ;LCD.c: 21: LATCbits.LC3 = 0;
  1037                           
  1038                           ;incstack = 0
  1039  000608  968B               	bcf	3979,3,c	;volatile
  1040                           
  1041                           ;LCD.c: 22: LATCbits.LC2 = 0;
  1042  00060A  948B               	bcf	3979,2,c	;volatile
  1043                           
  1044                           ;LCD.c: 23: LATCbits.LC4 = 0;
  1045  00060C  988B               	bcf	3979,4,c	;volatile
  1046                           
  1047                           ;LCD.c: 24: LATCbits.LC5 = 0;
  1048  00060E  9A8B               	bcf	3979,5,c	;volatile
  1049                           
  1050                           ;LCD.c: 25: LATCbits.LC6 = 0;
  1051  000610  9C8B               	bcf	3979,6,c	;volatile
  1052                           
  1053                           ;LCD.c: 26: LATCbits.LC7 = 0;
  1054  000612  9E8B               	bcf	3979,7,c	;volatile
  1055                           
  1056                           ;LCD.c: 29: TRISCbits.RC3 = 0;
  1057  000614  9694               	bcf	3988,3,c	;volatile
  1058                           
  1059                           ;LCD.c: 30: TRISCbits.RC2 = 0;
  1060  000616  9494               	bcf	3988,2,c	;volatile
  1061                           
  1062                           ;LCD.c: 31: TRISCbits.RC4 = 0;
  1063  000618  9894               	bcf	3988,4,c	;volatile
  1064                           
  1065                           ;LCD.c: 32: TRISCbits.RC5 = 0;
  1066  00061A  9A94               	bcf	3988,5,c	;volatile
  1067                           
  1068                           ;LCD.c: 33: TRISCbits.RC6 = 0;
  1069  00061C  9C94               	bcf	3988,6,c	;volatile
  1070                           
  1071                           ;LCD.c: 34: TRISCbits.RC7 = 0;
  1072  00061E  9E94               	bcf	3988,7,c	;volatile
  1073                           
  1074                           ;LCD.c: 37: Delay100ms();
  1075  000620  ECA2  F006         	call	_Delay100ms	;wreg free
  1076                           
  1077                           ;LCD.c: 40: PORTCbits.RC3 = 0;
  1078  000624  9682               	bcf	3970,3,c	;volatile
  1079                           
  1080                           ;LCD.c: 43: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  1081  000626  8482               	bsf	3970,2,c	;volatile
  1082  000628  5082               	movf	3970,w,c	;volatile
  1083  00062A  0B0F               	andlw	15
  1084  00062C  0930               	iorlw	48
  1085  00062E  6E82               	movwf	3970,c	;volatile
  1086  000630  9482               	bcf	3970,2,c	;volatile
  1087                           
  1088                           ;LCD.c: 44: _delay((unsigned long)((10)*(10000000/4000.0)));
  1089  000632  0E21               	movlw	33
  1090  000634  6E05               	movwf	??_LCD_init& (0+255),c
  1091  000636  0E76               	movlw	118
  1092  000638                     u387:
  1093  000638  2EE8               	decfsz	wreg,f,c
  1094  00063A  D7FE               	goto	u387
  1095  00063C  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1096  00063E  D7FC               	goto	u387
  1097  000640  D000               	nop2	
  1098                           
  1099                           ;LCD.c: 47: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  1100  000642  8482               	bsf	3970,2,c	;volatile
  1101  000644  5082               	movf	3970,w,c	;volatile
  1102  000646  0B0F               	andlw	15
  1103  000648  0930               	iorlw	48
  1104  00064A  6E82               	movwf	3970,c	;volatile
  1105  00064C  9482               	bcf	3970,2,c	;volatile
  1106                           
  1107                           ;LCD.c: 48: _delay((unsigned long)((10)*(10000000/4000.0)));
  1108  00064E  0E21               	movlw	33
  1109  000650  6E05               	movwf	??_LCD_init& (0+255),c
  1110  000652  0E76               	movlw	118
  1111  000654                     u397:
  1112  000654  2EE8               	decfsz	wreg,f,c
  1113  000656  D7FE               	goto	u397
  1114  000658  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1115  00065A  D7FC               	goto	u397
  1116  00065C  D000               	nop2	
  1117                           
  1118                           ;LCD.c: 51: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x30; PORTCbits.RC2 = 0;
  1119  00065E  8482               	bsf	3970,2,c	;volatile
  1120  000660  5082               	movf	3970,w,c	;volatile
  1121  000662  0B0F               	andlw	15
  1122  000664  0930               	iorlw	48
  1123  000666  6E82               	movwf	3970,c	;volatile
  1124  000668  9482               	bcf	3970,2,c	;volatile
  1125                           
  1126                           ;LCD.c: 52: _delay((unsigned long)((10)*(10000000/4000.0)));
  1127  00066A  0E21               	movlw	33
  1128  00066C  6E05               	movwf	??_LCD_init& (0+255),c
  1129  00066E  0E76               	movlw	118
  1130  000670                     u407:
  1131  000670  2EE8               	decfsz	wreg,f,c
  1132  000672  D7FE               	goto	u407
  1133  000674  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1134  000676  D7FC               	goto	u407
  1135  000678  D000               	nop2	
  1136                           
  1137                           ;LCD.c: 55: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  1138  00067A  8482               	bsf	3970,2,c	;volatile
  1139  00067C  5082               	movf	3970,w,c	;volatile
  1140  00067E  0B0F               	andlw	15
  1141  000680  0920               	iorlw	32
  1142  000682  6E82               	movwf	3970,c	;volatile
  1143  000684  9482               	bcf	3970,2,c	;volatile
  1144                           
  1145                           ;LCD.c: 56: _delay((unsigned long)((10)*(10000000/4000.0)));
  1146  000686  0E21               	movlw	33
  1147  000688  6E05               	movwf	??_LCD_init& (0+255),c
  1148  00068A  0E76               	movlw	118
  1149  00068C                     u417:
  1150  00068C  2EE8               	decfsz	wreg,f,c
  1151  00068E  D7FE               	goto	u417
  1152  000690  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1153  000692  D7FC               	goto	u417
  1154  000694  D000               	nop2	
  1155                           
  1156                           ;LCD.c: 59: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x20; PORTCbits.RC2 = 0;
  1157  000696  8482               	bsf	3970,2,c	;volatile
  1158  000698  5082               	movf	3970,w,c	;volatile
  1159  00069A  0B0F               	andlw	15
  1160  00069C  0920               	iorlw	32
  1161  00069E  6E82               	movwf	3970,c	;volatile
  1162  0006A0  9482               	bcf	3970,2,c	;volatile
  1163                           
  1164                           ;LCD.c: 60: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x80; PORTCbits.RC2 = 0;
  1165  0006A2  8482               	bsf	3970,2,c	;volatile
  1166  0006A4  5082               	movf	3970,w,c	;volatile
  1167  0006A6  0B0F               	andlw	15
  1168  0006A8  0980               	iorlw	128
  1169  0006AA  6E82               	movwf	3970,c	;volatile
  1170  0006AC  9482               	bcf	3970,2,c	;volatile
  1171                           
  1172                           ;LCD.c: 61: _delay((unsigned long)((10)*(10000000/4000.0)));
  1173  0006AE  0E21               	movlw	33
  1174  0006B0  6E05               	movwf	??_LCD_init& (0+255),c
  1175  0006B2  0E76               	movlw	118
  1176  0006B4                     u427:
  1177  0006B4  2EE8               	decfsz	wreg,f,c
  1178  0006B6  D7FE               	goto	u427
  1179  0006B8  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1180  0006BA  D7FC               	goto	u427
  1181  0006BC  D000               	nop2	
  1182                           
  1183                           ;LCD.c: 64: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  1184  0006BE  8482               	bsf	3970,2,c	;volatile
  1185  0006C0  5082               	movf	3970,w,c	;volatile
  1186  0006C2  0B0F               	andlw	15
  1187  0006C4  6E82               	movwf	3970,c	;volatile
  1188  0006C6  9482               	bcf	3970,2,c	;volatile
  1189                           
  1190                           ;LCD.c: 65: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0xF0; PORTCbits.RC2 = 0;
  1191  0006C8  8482               	bsf	3970,2,c	;volatile
  1192  0006CA  5082               	movf	3970,w,c	;volatile
  1193  0006CC  0B0F               	andlw	15
  1194  0006CE  09F0               	iorlw	240
  1195  0006D0  6E82               	movwf	3970,c	;volatile
  1196  0006D2  9482               	bcf	3970,2,c	;volatile
  1197                           
  1198                           ;LCD.c: 66: _delay((unsigned long)((10)*(10000000/4000.0)));
  1199  0006D4  0E21               	movlw	33
  1200  0006D6  6E05               	movwf	??_LCD_init& (0+255),c
  1201  0006D8  0E76               	movlw	118
  1202  0006DA                     u437:
  1203  0006DA  2EE8               	decfsz	wreg,f,c
  1204  0006DC  D7FE               	goto	u437
  1205  0006DE  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1206  0006E0  D7FC               	goto	u437
  1207  0006E2  D000               	nop2	
  1208                           
  1209                           ;LCD.c: 69: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  1210  0006E4  8482               	bsf	3970,2,c	;volatile
  1211  0006E6  5082               	movf	3970,w,c	;volatile
  1212  0006E8  0B0F               	andlw	15
  1213  0006EA  6E82               	movwf	3970,c	;volatile
  1214  0006EC  9482               	bcf	3970,2,c	;volatile
  1215                           
  1216                           ;LCD.c: 70: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x10; PORTCbits.RC2 = 0;
  1217  0006EE  8482               	bsf	3970,2,c	;volatile
  1218  0006F0  5082               	movf	3970,w,c	;volatile
  1219  0006F2  0B0F               	andlw	15
  1220  0006F4  0910               	iorlw	16
  1221  0006F6  6E82               	movwf	3970,c	;volatile
  1222  0006F8  9482               	bcf	3970,2,c	;volatile
  1223                           
  1224                           ;LCD.c: 71: _delay((unsigned long)((10)*(10000000/4000.0)));
  1225  0006FA  0E21               	movlw	33
  1226  0006FC  6E05               	movwf	??_LCD_init& (0+255),c
  1227  0006FE  0E76               	movlw	118
  1228  000700                     u447:
  1229  000700  2EE8               	decfsz	wreg,f,c
  1230  000702  D7FE               	goto	u447
  1231  000704  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1232  000706  D7FC               	goto	u447
  1233  000708  D000               	nop2	
  1234                           
  1235                           ;LCD.c: 74: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x00; PORTCbits.RC2 = 0;
  1236  00070A  8482               	bsf	3970,2,c	;volatile
  1237  00070C  5082               	movf	3970,w,c	;volatile
  1238  00070E  0B0F               	andlw	15
  1239  000710  6E82               	movwf	3970,c	;volatile
  1240  000712  9482               	bcf	3970,2,c	;volatile
  1241                           
  1242                           ;LCD.c: 75: PORTCbits.RC2 = 1; PORTC = (PORTC & 0b00001111) | 0x60; PORTCbits.RC2 = 0;
  1243  000714  8482               	bsf	3970,2,c	;volatile
  1244  000716  5082               	movf	3970,w,c	;volatile
  1245  000718  0B0F               	andlw	15
  1246  00071A  0960               	iorlw	96
  1247  00071C  6E82               	movwf	3970,c	;volatile
  1248  00071E  9482               	bcf	3970,2,c	;volatile
  1249                           
  1250                           ;LCD.c: 76: _delay((unsigned long)((10)*(10000000/4000.0)));
  1251  000720  0E21               	movlw	33
  1252  000722  6E05               	movwf	??_LCD_init& (0+255),c
  1253  000724  0E76               	movlw	118
  1254  000726                     u457:
  1255  000726  2EE8               	decfsz	wreg,f,c
  1256  000728  D7FE               	goto	u457
  1257  00072A  2E05               	decfsz	??_LCD_init& (0+255),f,c
  1258  00072C  D7FC               	goto	u457
  1259  00072E  D000               	nop2	
  1260                           
  1261                           ;LCD.c: 79: place_lcd_cursor(0,0);
  1262  000730  0E00               	movlw	0
  1263  000732  6E01               	movwf	place_lcd_cursor@y,c
  1264  000734  0E00               	movlw	0
  1265  000736  EC00  F006         	call	_place_lcd_cursor
  1266  00073A  0012               	return	
  1267  00073C                     __end_of_LCD_init:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           wreg	equ	0xFE8
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _place_lcd_cursor *****************
  1277 ;; Defined at:
  1278 ;;		line 125 in file "../LCD.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  x               1    wreg     unsigned char 
  1281 ;;  y               1    0[COMRAM] unsigned char 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  x               1    2[COMRAM] unsigned char 
  1284 ;;  position        1    3[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;		None               void
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0, prodl, prodh
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1294 ;;      Params:         1       0       0       0       0       0       0
  1295 ;;      Locals:         2       0       0       0       0       0       0
  1296 ;;      Temps:          1       0       0       0       0       0       0
  1297 ;;      Totals:         4       0       0       0       0       0       0
  1298 ;;Total ram usage:        4 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;;		_LCD_init
  1305 ;;		_LCD_write
  1306 ;;		_i2c_Read
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text9
  1311  000C00                     __ptext9:
  1312                           	opt stack 0
  1313  000C00                     _place_lcd_cursor:
  1314                           	opt stack 30
  1315                           
  1316                           ;incstack = 0
  1317                           ;place_lcd_cursor@x stored from wreg
  1318  000C00  6E03               	movwf	place_lcd_cursor@x,c
  1319                           
  1320                           ;LCD.c: 128: yPos = y;
  1321  000C02  C001  F035         	movff	place_lcd_cursor@y,_yPos
  1322  000C06  6A36               	clrf	_yPos+1,c
  1323                           
  1324                           ;LCD.c: 131: unsigned char position = (0x40*y)+x;
  1325  000C08  5001               	movf	place_lcd_cursor@y,w,c
  1326  000C0A  0D40               	mullw	64
  1327  000C0C  50F3               	movf	prodl,w,c
  1328  000C0E  2403               	addwf	place_lcd_cursor@x,w,c
  1329  000C10  6E04               	movwf	place_lcd_cursor@position,c
  1330                           
  1331                           ;LCD.c: 132: LATCbits.LC3 = 0;
  1332  000C12  968B               	bcf	3979,3,c	;volatile
  1333                           
  1334                           ;LCD.c: 135: LATCbits.LC2 = 1;
  1335  000C14  848B               	bsf	3979,2,c	;volatile
  1336                           
  1337                           ;LCD.c: 136: LATC = LATC & 0b00001111;
  1338  000C16  508B               	movf	3979,w,c	;volatile
  1339  000C18  0B0F               	andlw	15
  1340  000C1A  6E8B               	movwf	3979,c	;volatile
  1341                           
  1342                           ;LCD.c: 137: LATC = (LATC | (position & 0b11110000)) | 0b10000000;
  1343  000C1C  5004               	movf	place_lcd_cursor@position,w,c
  1344  000C1E  0BF0               	andlw	240
  1345  000C20  108B               	iorwf	3979,w,c	;volatile
  1346  000C22  0980               	iorlw	128
  1347  000C24  6E8B               	movwf	3979,c	;volatile
  1348                           
  1349                           ;LCD.c: 138: LATCbits.LC2 = 0;
  1350  000C26  948B               	bcf	3979,2,c	;volatile
  1351                           
  1352                           ;LCD.c: 141: LATCbits.LC2 = 1;
  1353  000C28  848B               	bsf	3979,2,c	;volatile
  1354                           
  1355                           ;LCD.c: 142: LATC = (LATC & 0b00001111) | (position << 4);
  1356  000C2A  C004  F002         	movff	place_lcd_cursor@position,??_place_lcd_cursor
  1357  000C2E  3A02               	swapf	??_place_lcd_cursor,f,c
  1358  000C30  0EF0               	movlw	240
  1359  000C32  1602               	andwf	??_place_lcd_cursor,f,c
  1360  000C34  508B               	movf	3979,w,c	;volatile
  1361  000C36  0B0F               	andlw	15
  1362  000C38  1002               	iorwf	??_place_lcd_cursor,w,c
  1363  000C3A  6E8B               	movwf	3979,c	;volatile
  1364                           
  1365                           ;LCD.c: 143: LATCbits.LC2 = 0;
  1366  000C3C  948B               	bcf	3979,2,c	;volatile
  1367                           
  1368                           ;LCD.c: 144: _delay((unsigned long)((1)*(10000000/4000.0)));
  1369  000C3E  0E04               	movlw	4
  1370  000C40  6E02               	movwf	??_place_lcd_cursor& (0+255),c
  1371  000C42  0E3E               	movlw	62
  1372  000C44                     u467:
  1373  000C44  2EE8               	decfsz	wreg,f,c
  1374  000C46  D7FE               	goto	u467
  1375  000C48  2E02               	decfsz	??_place_lcd_cursor& (0+255),f,c
  1376  000C4A  D7FC               	goto	u467
  1377  000C4C  0012               	return	
  1378  000C4E                     __end_of_place_lcd_cursor:
  1379                           	opt stack 0
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           prodl	equ	0xFF3
  1385                           wreg	equ	0xFE8
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _Delay100ms *****************
  1389 ;; Defined at:
  1390 ;;		line 147 in file "../LCD.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  i               2    1[COMRAM] int 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;		None               void
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1404 ;;      Params:         0       0       0       0       0       0       0
  1405 ;;      Locals:         2       0       0       0       0       0       0
  1406 ;;      Temps:          1       0       0       0       0       0       0
  1407 ;;      Totals:         3       0       0       0       0       0       0
  1408 ;;Total ram usage:        3 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_LCD_init
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text10
  1418  000D44                     __ptext10:
  1419                           	opt stack 0
  1420  000D44                     _Delay100ms:
  1421                           	opt stack 29
  1422                           
  1423                           ;LCD.c: 149: for(i=0;i<100;i++)
  1424                           
  1425                           ;incstack = 0
  1426  000D44  0E00               	movlw	0
  1427  000D46  6E03               	movwf	Delay100ms@i+1,c
  1428  000D48  0E00               	movlw	0
  1429  000D4A  6E02               	movwf	Delay100ms@i,c
  1430  000D4C  5003               	movf	Delay100ms@i+1,w,c
  1431  000D4E  0A80               	xorlw	128
  1432  000D50  0F80               	addlw	-128
  1433  000D52  0E64               	movlw	100
  1434  000D54  B4D8               	btfsc	status,2,c
  1435  000D56  5C02               	subwf	Delay100ms@i,w,c
  1436  000D58  B0D8               	btfsc	status,0,c
  1437  000D5A  0012               	return	
  1438                           
  1439                           ;LCD.c: 150: {
  1440                           ;LCD.c: 151: _delay((unsigned long)((1)*(10000000/4000.0)));
  1441  000D5C  0E04               	movlw	4
  1442  000D5E  6E01               	movwf	??_Delay100ms& (0+255),c
  1443  000D60  0E3E               	movlw	62
  1444  000D62                     u477:
  1445  000D62  2EE8               	decfsz	wreg,f,c
  1446  000D64  D7FE               	goto	u477
  1447  000D66  2E01               	decfsz	??_Delay100ms& (0+255),f,c
  1448  000D68  D7FC               	goto	u477
  1449  000D6A  4A02               	infsnz	Delay100ms@i,f,c
  1450  000D6C  2A03               	incf	Delay100ms@i+1,f,c
  1451  000D6E  D7EE               	goto	L1
  1452  000D70                     __end_of_Delay100ms:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           prodl	equ	0xFF3
  1459                           wreg	equ	0xFE8
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _EPWM_Port_Init *****************
  1463 ;; Defined at:
  1464 ;;		line 6 in file "../DCMotor.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1478 ;;      Params:         0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text11
  1492  000B54                     __ptext11:
  1493                           	opt stack 0
  1494  000B54                     _EPWM_Port_Init:
  1495                           	opt stack 30
  1496                           
  1497                           ;DCMotor.c: 8: LATA = LATA & 0x00;
  1498                           
  1499                           ;incstack = 0
  1500  000B54  0E00               	movlw	0
  1501  000B56  6E89               	movwf	3977,c	;volatile
  1502                           
  1503                           ;DCMotor.c: 9: TRISA = TRISA & 0xFF;
  1504  000B58  CF92 FF92          	movff	3986,3986	;volatile
  1505                           
  1506                           ;DCMotor.c: 10: ANSELA = ANSELA & 0x2F;
  1507  000B5C  010F               	movlb	15	; () banked
  1508  000B5E  5138               	movf	56,w,b	;volatile
  1509  000B60  0B2F               	andlw	47
  1510  000B62  010F               	movlb	15	; () banked
  1511  000B64  6F38               	movwf	56,b	;volatile
  1512                           
  1513                           ; BSR set to: 15
  1514                           ;DCMotor.c: 12: LATB = LATB & 0x00;
  1515  000B66  0E00               	movlw	0
  1516  000B68  6E8A               	movwf	3978,c	;volatile
  1517                           
  1518                           ;DCMotor.c: 13: TRISB = TRISB & 0xDF;
  1519  000B6A  5093               	movf	3987,w,c	;volatile
  1520  000B6C  0BDF               	andlw	223
  1521  000B6E  6E93               	movwf	3987,c	;volatile
  1522                           
  1523                           ;DCMotor.c: 14: ANSELB = ANSELB & 0x1F;
  1524  000B70  010F               	movlb	15	; () banked
  1525  000B72  5139               	movf	57,w,b	;volatile
  1526  000B74  0B1F               	andlw	31
  1527  000B76  010F               	movlb	15	; () banked
  1528  000B78  6F39               	movwf	57,b	;volatile
  1529                           
  1530                           ; BSR set to: 15
  1531                           ;DCMotor.c: 15: WPUB = 0x00;
  1532  000B7A  0E00               	movlw	0
  1533  000B7C  6E61               	movwf	3937,c	;volatile
  1534                           
  1535                           ; BSR set to: 15
  1536                           ;DCMotor.c: 17: LATCbits.LC1 = 0;
  1537  000B7E  928B               	bcf	3979,1,c	;volatile
  1538                           
  1539                           ; BSR set to: 15
  1540                           ;DCMotor.c: 18: TRISCbits.RC1 = 0;
  1541  000B80  9294               	bcf	3988,1,c	;volatile
  1542                           
  1543                           ; BSR set to: 15
  1544                           ;DCMotor.c: 19: ANSELCbits.ANSC2 = 0;
  1545  000B82  010F               	movlb	15	; () banked
  1546  000B84  953A               	bcf	58,2,b	;volatile
  1547                           
  1548                           ; BSR set to: 15
  1549                           ;DCMotor.c: 21: LATD = LATD & 0x00;
  1550  000B86  0E00               	movlw	0
  1551  000B88  6E8C               	movwf	3980,c	;volatile
  1552                           
  1553                           ;DCMotor.c: 22: TRISD = TRISD & 0xFB;
  1554  000B8A  5095               	movf	3989,w,c	;volatile
  1555  000B8C  0BFB               	andlw	251
  1556  000B8E  6E95               	movwf	3989,c	;volatile
  1557                           
  1558                           ;DCMotor.c: 23: ANSELD = ANSELD & 0xFB;
  1559  000B90  010F               	movlb	15	; () banked
  1560  000B92  513B               	movf	59,w,b	;volatile
  1561  000B94  0BFB               	andlw	251
  1562  000B96  010F               	movlb	15	; () banked
  1563  000B98  6F3B               	movwf	59,b	;volatile
  1564                           
  1565                           ; BSR set to: 15
  1566                           ;DCMotor.c: 25: LATE = LATE & 0x00;
  1567  000B9A  0E00               	movlw	0
  1568  000B9C  6E8D               	movwf	3981,c	;volatile
  1569                           
  1570                           ; BSR set to: 15
  1571                           ;DCMotor.c: 26: TRISE = TRISE & 0x05;
  1572  000B9E  5096               	movf	3990,w,c	;volatile
  1573  000BA0  0B05               	andlw	5
  1574  000BA2  6E96               	movwf	3990,c	;volatile
  1575                           
  1576                           ; BSR set to: 15
  1577                           ;DCMotor.c: 27: ANSELE = ANSELE & 0x05;
  1578  000BA4  010F               	movlb	15	; () banked
  1579  000BA6  513C               	movf	60,w,b	;volatile
  1580  000BA8  0B05               	andlw	5
  1581  000BAA  010F               	movlb	15	; () banked
  1582  000BAC  6F3C               	movwf	60,b	;volatile
  1583                           
  1584                           ; BSR set to: 15
  1585                           ;DCMotor.c: 29: INTCON2bits.nRBPU = 0x01;
  1586  000BAE  8EF1               	bsf	intcon2,7,c	;volatile
  1587                           
  1588                           ; BSR set to: 15
  1589  000BB0  0012               	return	
  1590  000BB2                     __end_of_EPWM_Port_Init:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           prodl	equ	0xFF3
  1597                           intcon2	equ	0xFF1
  1598                           wreg	equ	0xFE8
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _EPWM2_Initialize *****************
  1602 ;; Defined at:
  1603 ;;		line 104 in file "../DCMotor.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;		None               void
  1610 ;; Registers used:
  1611 ;;		wreg, status,2
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text12
  1631  000D70                     __ptext12:
  1632                           	opt stack 0
  1633  000D70                     _EPWM2_Initialize:
  1634                           	opt stack 30
  1635                           
  1636                           ;DCMotor.c: 109: CCP2CON = 0xBC;
  1637                           
  1638                           ; BSR set to: 15
  1639                           ;incstack = 0
  1640  000D70  0EBC               	movlw	188
  1641  000D72  6E66               	movwf	3942,c	;volatile
  1642                           
  1643                           ;DCMotor.c: 112: ECCP2AS = 0x00;
  1644  000D74  0E00               	movlw	0
  1645  000D76  6E64               	movwf	3940,c	;volatile
  1646                           
  1647                           ;DCMotor.c: 115: PWM2CON = 0x80;
  1648  000D78  0E80               	movlw	128
  1649  000D7A  6E65               	movwf	3941,c	;volatile
  1650                           
  1651                           ;DCMotor.c: 118: PSTR2CON = 0x00;
  1652  000D7C  0E00               	movlw	0
  1653  000D7E  6E63               	movwf	3939,c	;volatile
  1654                           
  1655                           ;DCMotor.c: 121: CCPR2L = 0x7F;
  1656  000D80  0E7F               	movlw	127
  1657  000D82  6E67               	movwf	3943,c	;volatile
  1658                           
  1659                           ;DCMotor.c: 124: CCPR2H = 0x00;
  1660  000D84  0E00               	movlw	0
  1661  000D86  6E68               	movwf	3944,c	;volatile
  1662                           
  1663                           ;DCMotor.c: 127: CCPTMRS0bits.C2TSEL = 0x1;
  1664  000D88  010F               	movlb	15	; () banked
  1665  000D8A  5149               	movf	73,w,b	;volatile
  1666  000D8C  0BE7               	andlw	-25
  1667  000D8E  0908               	iorlw	8
  1668  000D90  010F               	movlb	15	; () banked
  1669  000D92  6F49               	movwf	73,b	;volatile
  1670                           
  1671                           ;DCMotor.c: 130: CCP2CON = 0b11001100;
  1672  000D94  0ECC               	movlw	204
  1673  000D96  6E66               	movwf	3942,c	;volatile
  1674                           
  1675                           ; BSR set to: 15
  1676  000D98  0012               	return	
  1677  000D9A                     __end_of_EPWM2_Initialize:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           prodl	equ	0xFF3
  1684                           intcon2	equ	0xFF1
  1685                           wreg	equ	0xFE8
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _EPWM1_Initialize *****************
  1689 ;; Defined at:
  1690 ;;		line 33 in file "../DCMotor.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;		None
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;		None
  1695 ;; Return value:  Size  Location     Type
  1696 ;;		None               void
  1697 ;; Registers used:
  1698 ;;		wreg, status,2
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1704 ;;      Params:         0       0       0       0       0       0       0
  1705 ;;      Locals:         0       0       0       0       0       0       0
  1706 ;;      Temps:          0       0       0       0       0       0       0
  1707 ;;      Totals:         0       0       0       0       0       0       0
  1708 ;;Total ram usage:        0 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text13
  1718  000D12                     __ptext13:
  1719                           	opt stack 0
  1720  000D12                     _EPWM1_Initialize:
  1721                           	opt stack 30
  1722                           
  1723                           ;DCMotor.c: 38: CCP3CON = 0xBC;
  1724                           
  1725                           ; BSR set to: 15
  1726                           ;incstack = 0
  1727  000D12  0EBC               	movlw	188
  1728  000D14  010F               	movlb	15	; () banked
  1729  000D16  6F5D               	movwf	93,b	;volatile
  1730                           
  1731                           ;DCMotor.c: 41: ECCP3AS = 0x00;
  1732  000D18  0E00               	movlw	0
  1733  000D1A  010F               	movlb	15	; () banked
  1734  000D1C  6F5B               	movwf	91,b	;volatile
  1735                           
  1736                           ;DCMotor.c: 44: PWM3CON = 0x80;
  1737  000D1E  0E80               	movlw	128
  1738  000D20  010F               	movlb	15	; () banked
  1739  000D22  6F5C               	movwf	92,b	;volatile
  1740                           
  1741                           ;DCMotor.c: 47: PSTR3CON = 0x00;
  1742  000D24  0E00               	movlw	0
  1743  000D26  010F               	movlb	15	; () banked
  1744  000D28  6F5A               	movwf	90,b	;volatile
  1745                           
  1746                           ;DCMotor.c: 50: CCPR3L = 0x7F;
  1747  000D2A  0E7F               	movlw	127
  1748  000D2C  010F               	movlb	15	; () banked
  1749  000D2E  6F5E               	movwf	94,b	;volatile
  1750                           
  1751                           ;DCMotor.c: 53: CCPR3H = 0x00;
  1752  000D30  0E00               	movlw	0
  1753  000D32  010F               	movlb	15	; () banked
  1754  000D34  6F5F               	movwf	95,b	;volatile
  1755                           
  1756                           ;DCMotor.c: 56: CCPTMRS0bits.C3TSEL = 0x0;
  1757  000D36  0E3F               	movlw	-193
  1758  000D38  010F               	movlb	15	; () banked
  1759  000D3A  1749               	andwf	73,f,b	;volatile
  1760                           
  1761                           ;DCMotor.c: 59: CCP3CON = 0b11001100;
  1762  000D3C  0ECC               	movlw	204
  1763  000D3E  010F               	movlb	15	; () banked
  1764  000D40  6F5D               	movwf	93,b	;volatile
  1765                           
  1766                           ; BSR set to: 15
  1767  000D42  0012               	return	
  1768  000D44                     __end_of_EPWM1_Initialize:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodl	equ	0xFF3
  1775                           intcon2	equ	0xFF1
  1776                           wreg	equ	0xFE8
  1777                           status	equ	0xFD8
  1778                           
  1779 ;; *************** function _Drive_Forward *****************
  1780 ;; Defined at:
  1781 ;;		line 192 in file "../DCMotor.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  distance        1    wreg     unsigned char 
  1784 ;;  speed           2   48[COMRAM] int 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  distance        1   51[COMRAM] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;		None               void
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, prodl, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1796 ;;      Params:         2       0       0       0       0       0       0
  1797 ;;      Locals:         1       0       0       0       0       0       0
  1798 ;;      Temps:          1       0       0       0       0       0       0
  1799 ;;      Totals:         4       0       0       0       0       0       0
  1800 ;;Total ram usage:        4 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    4
  1803 ;; This function calls:
  1804 ;;		_EPWM1_LoadDutyValue
  1805 ;;		_EPWM2_LoadDutyValue
  1806 ;;		_Stop
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text14
  1813  000C96                     __ptext14:
  1814                           	opt stack 0
  1815  000C96                     _Drive_Forward:
  1816                           	opt stack 26
  1817                           
  1818                           ; BSR set to: 15
  1819                           ;incstack = 0
  1820                           ;Drive_Forward@distance stored from wreg
  1821  000C96  6E34               	movwf	Drive_Forward@distance,c
  1822                           
  1823                           ;DCMotor.c: 194: CCP2CON = 0b11001100;
  1824  000C98  0ECC               	movlw	204
  1825  000C9A  6E66               	movwf	3942,c	;volatile
  1826                           
  1827                           ;DCMotor.c: 195: CCP3CON = 0b11001100;
  1828  000C9C  0ECC               	movlw	204
  1829  000C9E  010F               	movlb	15	; () banked
  1830  000CA0  6F5D               	movwf	93,b	;volatile
  1831                           
  1832                           ;DCMotor.c: 197: while(distance > 0)
  1833  000CA2  D015               	goto	l1169
  1834  000CA4                     l1163:
  1835                           
  1836                           ;DCMotor.c: 198: {
  1837                           ;DCMotor.c: 199: EPWM1_LoadDutyValue(speed);
  1838  000CA4  C031  F02B         	movff	Drive_Forward@speed,EPWM1_LoadDutyValue@dutyValue
  1839  000CA8  C032  F02C         	movff	Drive_Forward@speed+1,EPWM1_LoadDutyValue@dutyValue+1
  1840  000CAC  ECE5  F004         	call	_EPWM1_LoadDutyValue	;wreg free
  1841                           
  1842                           ;DCMotor.c: 200: EPWM2_LoadDutyValue(speed);
  1843  000CB0  C031  F02B         	movff	Drive_Forward@speed,EPWM2_LoadDutyValue@dutyValue
  1844  000CB4  C032  F02C         	movff	Drive_Forward@speed+1,EPWM2_LoadDutyValue@dutyValue+1
  1845  000CB8  EC6A  F005         	call	_EPWM2_LoadDutyValue	;wreg free
  1846                           
  1847                           ;DCMotor.c: 202: _delay((unsigned long)((10)*(10000000/4000.0)));
  1848  000CBC  0E21               	movlw	33
  1849  000CBE  6E33               	movwf	??_Drive_Forward& (0+255),c
  1850  000CC0  0E76               	movlw	118
  1851  000CC2                     u487:
  1852  000CC2  2EE8               	decfsz	wreg,f,c
  1853  000CC4  D7FE               	goto	u487
  1854  000CC6  2E33               	decfsz	??_Drive_Forward& (0+255),f,c
  1855  000CC8  D7FC               	goto	u487
  1856  000CCA  D000               	nop2	
  1857                           
  1858                           ;DCMotor.c: 203: distance--;
  1859  000CCC  0634               	decf	Drive_Forward@distance,f,c
  1860  000CCE                     l1169:
  1861  000CCE  6634               	tstfsz	Drive_Forward@distance,c
  1862  000CD0  D7E9               	goto	l1163
  1863                           
  1864                           ;DCMotor.c: 204: }
  1865                           ;DCMotor.c: 205: Stop();
  1866  000CD2  ECDF  F006         	call	_Stop	;wreg free
  1867  000CD6  0012               	return	
  1868  000CD8                     __end_of_Drive_Forward:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           prodl	equ	0xFF3
  1875                           intcon2	equ	0xFF1
  1876                           wreg	equ	0xFE8
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _Stop *****************
  1880 ;; Defined at:
  1881 ;;		line 224 in file "../DCMotor.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0, prodl, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         0       0       0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0
  1898 ;;      Totals:         0       0       0       0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    3
  1902 ;; This function calls:
  1903 ;;		_EPWM1_LoadDutyValue
  1904 ;;		_EPWM2_LoadDutyValue
  1905 ;; This function is called by:
  1906 ;;		_Drive_Forward
  1907 ;;		_main
  1908 ;;		_Drive_Reverse
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text15
  1913  000DBE                     __ptext15:
  1914                           	opt stack 0
  1915  000DBE                     _Stop:
  1916                           	opt stack 27
  1917                           
  1918                           ;DCMotor.c: 228: CCP2CON = 0b11001100;
  1919                           
  1920                           ;incstack = 0
  1921  000DBE  0ECC               	movlw	204
  1922  000DC0  6E66               	movwf	3942,c	;volatile
  1923                           
  1924                           ;DCMotor.c: 229: CCP3CON = 0b11001100;
  1925  000DC2  0ECC               	movlw	204
  1926  000DC4  010F               	movlb	15	; () banked
  1927  000DC6  6F5D               	movwf	93,b	;volatile
  1928                           
  1929                           ; BSR set to: 15
  1930                           ;DCMotor.c: 231: EPWM1_LoadDutyValue(00);
  1931  000DC8  0E00               	movlw	0
  1932  000DCA  6E2C               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
  1933  000DCC  0E00               	movlw	0
  1934  000DCE  6E2B               	movwf	EPWM1_LoadDutyValue@dutyValue,c
  1935  000DD0  ECE5  F004         	call	_EPWM1_LoadDutyValue	;wreg free
  1936                           
  1937                           ;DCMotor.c: 232: EPWM2_LoadDutyValue(00);
  1938  000DD4  0E00               	movlw	0
  1939  000DD6  6E2C               	movwf	EPWM2_LoadDutyValue@dutyValue+1,c
  1940  000DD8  0E00               	movlw	0
  1941  000DDA  6E2B               	movwf	EPWM2_LoadDutyValue@dutyValue,c
  1942  000DDC  EC6A  F005         	call	_EPWM2_LoadDutyValue	;wreg free
  1943  000DE0  0012               	return	
  1944  000DE2                     __end_of_Stop:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodl	equ	0xFF3
  1951                           intcon2	equ	0xFF1
  1952                           wreg	equ	0xFE8
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _EPWM2_LoadDutyValue *****************
  1956 ;; Defined at:
  1957 ;;		line 133 in file "../DCMotor.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  dutyValue       2   42[COMRAM] int 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;		None
  1962 ;; Return value:  Size  Location     Type
  1963 ;;		None               void
  1964 ;; Registers used:
  1965 ;;		wreg, status,2, status,0, prodl, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1971 ;;      Params:         2       0       0       0       0       0       0
  1972 ;;      Locals:         0       0       0       0       0       0       0
  1973 ;;      Temps:          4       0       0       0       0       0       0
  1974 ;;      Totals:         6       0       0       0       0       0       0
  1975 ;;Total ram usage:        6 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    2
  1978 ;; This function calls:
  1979 ;;		___awtoft
  1980 ;;		___ftmul
  1981 ;;		___fttol
  1982 ;; This function is called by:
  1983 ;;		_Drive_Forward
  1984 ;;		_Stop
  1985 ;;		_Switch_Direction2
  1986 ;;		_Turn_Right
  1987 ;;		_Turn_Left
  1988 ;;		_Drive_Reverse
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text16
  1993  000AD4                     __ptext16:
  1994                           	opt stack 0
  1995  000AD4                     _EPWM2_LoadDutyValue:
  1996                           	opt stack 27
  1997                           
  1998                           ;DCMotor.c: 135: dutyValue = dutyValue * 6.4;
  1999                           
  2000                           ;incstack = 0
  2001  000AD4  0ECD               	movlw	205
  2002  000AD6  6E10               	movwf	___ftmul@f2,c
  2003  000AD8  0ECC               	movlw	204
  2004  000ADA  6E11               	movwf	___ftmul@f2+1,c
  2005  000ADC  0E40               	movlw	64
  2006  000ADE  6E12               	movwf	___ftmul@f2+2,c
  2007  000AE0  C02B  F009         	movff	EPWM2_LoadDutyValue@dutyValue,___awtoft@c
  2008  000AE4  C02C  F00A         	movff	EPWM2_LoadDutyValue@dutyValue+1,___awtoft@c+1
  2009  000AE8  EC27  F006         	call	___awtoft	;wreg free
  2010  000AEC  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2011  000AF0  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2012  000AF4  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2013  000AF8  EC19  F004         	call	___ftmul	;wreg free
  2014  000AFC  C00D  F01C         	movff	?___ftmul,___fttol@f1
  2015  000B00  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  2016  000B04  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  2017  000B08  EC9E  F003         	call	___fttol	;wreg free
  2018  000B0C  C01C  F02D         	movff	?___fttol,??_EPWM2_LoadDutyValue
  2019  000B10  C01D  F02E         	movff	?___fttol+1,??_EPWM2_LoadDutyValue+1
  2020  000B14  C01E  F02F         	movff	?___fttol+2,??_EPWM2_LoadDutyValue+2
  2021  000B18  C01F  F030         	movff	?___fttol+3,??_EPWM2_LoadDutyValue+3
  2022  000B1C  C02D  F02B         	movff	??_EPWM2_LoadDutyValue,EPWM2_LoadDutyValue@dutyValue
  2023  000B20  C02E  F02C         	movff	??_EPWM2_LoadDutyValue+1,EPWM2_LoadDutyValue@dutyValue+1
  2024                           
  2025                           ;DCMotor.c: 138: CCPR2L = ((dutyValue & 0x03FC)>>2);
  2026  000B24  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  2027  000B28  C02C  F02E         	movff	EPWM2_LoadDutyValue@dutyValue+1,??_EPWM2_LoadDutyValue+1
  2028  000B2C  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  2029  000B2E  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  2030  000B30  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  2031  000B32  342E               	rlcf	??_EPWM2_LoadDutyValue+1,w,c
  2032  000B34  322E               	rrcf	??_EPWM2_LoadDutyValue+1,f,c
  2033  000B36  322D               	rrcf	??_EPWM2_LoadDutyValue,f,c
  2034  000B38  502D               	movf	??_EPWM2_LoadDutyValue,w,c
  2035  000B3A  6E67               	movwf	3943,c	;volatile
  2036                           
  2037                           ;DCMotor.c: 141: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  2038  000B3C  C02B  F02D         	movff	EPWM2_LoadDutyValue@dutyValue,??_EPWM2_LoadDutyValue
  2039  000B40  0E03               	movlw	3
  2040  000B42  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  2041  000B44  3A2D               	swapf	??_EPWM2_LoadDutyValue,f,c
  2042  000B46  0EF0               	movlw	240
  2043  000B48  162D               	andwf	??_EPWM2_LoadDutyValue,f,c
  2044  000B4A  5066               	movf	3942,w,c	;volatile
  2045  000B4C  0BCF               	andlw	207
  2046  000B4E  102D               	iorwf	??_EPWM2_LoadDutyValue,w,c
  2047  000B50  6E66               	movwf	3942,c	;volatile
  2048  000B52  0012               	return	
  2049  000B54                     __end_of_EPWM2_LoadDutyValue:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodl	equ	0xFF3
  2056                           intcon2	equ	0xFF1
  2057                           wreg	equ	0xFE8
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _EPWM1_LoadDutyValue *****************
  2061 ;; Defined at:
  2062 ;;		line 63 in file "../DCMotor.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  dutyValue       2   42[COMRAM] int 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;		None               void
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0, prodl, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2076 ;;      Params:         2       0       0       0       0       0       0
  2077 ;;      Locals:         0       0       0       0       0       0       0
  2078 ;;      Temps:          4       0       0       0       0       0       0
  2079 ;;      Totals:         6       0       0       0       0       0       0
  2080 ;;Total ram usage:        6 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    2
  2083 ;; This function calls:
  2084 ;;		___awtoft
  2085 ;;		___ftmul
  2086 ;;		___fttol
  2087 ;; This function is called by:
  2088 ;;		_Drive_Forward
  2089 ;;		_Stop
  2090 ;;		_Switch_Direction1
  2091 ;;		_Turn_Right
  2092 ;;		_Turn_Left
  2093 ;;		_Drive_Reverse
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text17
  2098  0009CA                     __ptext17:
  2099                           	opt stack 0
  2100  0009CA                     _EPWM1_LoadDutyValue:
  2101                           	opt stack 27
  2102                           
  2103                           ;DCMotor.c: 65: dutyValue = dutyValue * 6.4;
  2104                           
  2105                           ;incstack = 0
  2106  0009CA  0ECD               	movlw	205
  2107  0009CC  6E10               	movwf	___ftmul@f2,c
  2108  0009CE  0ECC               	movlw	204
  2109  0009D0  6E11               	movwf	___ftmul@f2+1,c
  2110  0009D2  0E40               	movlw	64
  2111  0009D4  6E12               	movwf	___ftmul@f2+2,c
  2112  0009D6  C02B  F009         	movff	EPWM1_LoadDutyValue@dutyValue,___awtoft@c
  2113  0009DA  C02C  F00A         	movff	EPWM1_LoadDutyValue@dutyValue+1,___awtoft@c+1
  2114  0009DE  EC27  F006         	call	___awtoft	;wreg free
  2115  0009E2  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2116  0009E6  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2117  0009EA  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2118  0009EE  EC19  F004         	call	___ftmul	;wreg free
  2119  0009F2  C00D  F01C         	movff	?___ftmul,___fttol@f1
  2120  0009F6  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  2121  0009FA  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  2122  0009FE  EC9E  F003         	call	___fttol	;wreg free
  2123  000A02  C01C  F02D         	movff	?___fttol,??_EPWM1_LoadDutyValue
  2124  000A06  C01D  F02E         	movff	?___fttol+1,??_EPWM1_LoadDutyValue+1
  2125  000A0A  C01E  F02F         	movff	?___fttol+2,??_EPWM1_LoadDutyValue+2
  2126  000A0E  C01F  F030         	movff	?___fttol+3,??_EPWM1_LoadDutyValue+3
  2127  000A12  C02D  F02B         	movff	??_EPWM1_LoadDutyValue,EPWM1_LoadDutyValue@dutyValue
  2128  000A16  C02E  F02C         	movff	??_EPWM1_LoadDutyValue+1,EPWM1_LoadDutyValue@dutyValue+1
  2129                           
  2130                           ;DCMotor.c: 68: CCPR3L = ((dutyValue & 0x03FC)>>2);
  2131  000A1A  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  2132  000A1E  C02C  F02E         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
  2133  000A22  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  2134  000A24  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  2135  000A26  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  2136  000A28  342E               	rlcf	??_EPWM1_LoadDutyValue+1,w,c
  2137  000A2A  322E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
  2138  000A2C  322D               	rrcf	??_EPWM1_LoadDutyValue,f,c
  2139  000A2E  502D               	movf	??_EPWM1_LoadDutyValue,w,c
  2140  000A30  010F               	movlb	15	; () banked
  2141  000A32  6F5E               	movwf	94,b	;volatile
  2142                           
  2143                           ; BSR set to: 15
  2144                           ;DCMotor.c: 71: CCP3CON = (CCP3CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  2145  000A34  C02B  F02D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
  2146  000A38  0E03               	movlw	3
  2147  000A3A  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  2148  000A3C  3A2D               	swapf	??_EPWM1_LoadDutyValue,f,c
  2149  000A3E  0EF0               	movlw	240
  2150  000A40  162D               	andwf	??_EPWM1_LoadDutyValue,f,c
  2151  000A42  010F               	movlb	15	; () banked
  2152  000A44  515D               	movf	93,w,b	;volatile
  2153  000A46  0BCF               	andlw	207
  2154  000A48  102D               	iorwf	??_EPWM1_LoadDutyValue,w,c
  2155  000A4A  010F               	movlb	15	; () banked
  2156  000A4C  6F5D               	movwf	93,b	;volatile
  2157                           
  2158                           ; BSR set to: 15
  2159  000A4E  0012               	return	
  2160  000A50                     __end_of_EPWM1_LoadDutyValue:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           prodl	equ	0xFF3
  2167                           intcon2	equ	0xFF1
  2168                           wreg	equ	0xFE8
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function ___fttol *****************
  2172 ;; Defined at:
  2173 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  f1              3   27[COMRAM] float 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  lval            4   37[COMRAM] unsigned long 
  2178 ;;  exp1            1   41[COMRAM] unsigned char 
  2179 ;;  sign1           1   36[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  4   27[COMRAM] long 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2189 ;;      Params:         4       0       0       0       0       0       0
  2190 ;;      Locals:         6       0       0       0       0       0       0
  2191 ;;      Temps:          5       0       0       0       0       0       0
  2192 ;;      Totals:        15       0       0       0       0       0       0
  2193 ;;Total ram usage:       15 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_EPWM1_LoadDutyValue
  2199 ;;		_EPWM2_LoadDutyValue
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text18
  2204  00073C                     __ptext18:
  2205                           	opt stack 0
  2206  00073C                     ___fttol:
  2207                           	opt stack 28
  2208                           
  2209                           ; BSR set to: 15
  2210                           ;incstack = 0
  2211  00073C  C01E  F020         	movff	___fttol@f1+2,??___fttol
  2212  000740  6A21               	clrf	(??___fttol+1)& (0+255),c
  2213  000742  6A22               	clrf	(??___fttol+2)& (0+255),c
  2214  000744  341D               	rlcf	___fttol@f1+1,w,c
  2215  000746  3620               	rlcf	??___fttol& (0+255),f,c
  2216  000748  E301               	bnc	u151
  2217  00074A  8021               	bsf	(??___fttol+1)& (0+255),0,c
  2218  00074C                     u151:
  2219  00074C  5020               	movf	??___fttol,w,c
  2220  00074E  6E2A               	movwf	___fttol@exp1,c
  2221  000750  662A               	tstfsz	___fttol@exp1& (0+255),c
  2222  000752  D009               	goto	l1003
  2223  000754  0E00               	movlw	0
  2224  000756  6E1C               	movwf	?___fttol,c
  2225  000758  0E00               	movlw	0
  2226  00075A  6E1D               	movwf	?___fttol+1,c
  2227  00075C  0E00               	movlw	0
  2228  00075E  6E1E               	movwf	?___fttol+2,c
  2229  000760  0E00               	movlw	0
  2230  000762  6E1F               	movwf	?___fttol+3,c
  2231  000764  0012               	return	
  2232  000766                     l1003:
  2233  000766  0E17               	movlw	23
  2234  000768  6E20               	movwf	??___fttol& (0+255),c
  2235  00076A  C01C  F021         	movff	___fttol@f1,??___fttol+1
  2236  00076E  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  2237  000772  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  2238  000776  2820               	incf	??___fttol,w,c
  2239  000778  6E24               	movwf	(??___fttol+4)& (0+255),c
  2240  00077A  D004               	goto	u170
  2241  00077C                     u175:
  2242  00077C  90D8               	bcf	status,0,c
  2243  00077E  3223               	rrcf	??___fttol+3,f,c
  2244  000780  3222               	rrcf	??___fttol+2,f,c
  2245  000782  3221               	rrcf	??___fttol+1,f,c
  2246  000784                     u170:
  2247  000784  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  2248  000786  D7FA               	goto	u175
  2249  000788  5021               	movf	??___fttol+1,w,c
  2250  00078A  6E25               	movwf	___fttol@sign1,c
  2251  00078C  8E1D               	bsf	___fttol@f1+1,7,c
  2252  00078E  0EFF               	movlw	255
  2253  000790  161C               	andwf	___fttol@f1,f,c
  2254  000792  0EFF               	movlw	255
  2255  000794  161D               	andwf	___fttol@f1+1,f,c
  2256  000796  0E00               	movlw	0
  2257  000798  161E               	andwf	___fttol@f1+2,f,c
  2258  00079A  501C               	movf	___fttol@f1,w,c
  2259  00079C  6E26               	movwf	___fttol@lval,c
  2260  00079E  501D               	movf	___fttol@f1+1,w,c
  2261  0007A0  6E27               	movwf	___fttol@lval+1,c
  2262  0007A2  501E               	movf	___fttol@f1+2,w,c
  2263  0007A4  6E28               	movwf	___fttol@lval+2,c
  2264  0007A6  6A29               	clrf	___fttol@lval+3,c
  2265  0007A8  0E8E               	movlw	142
  2266  0007AA  5E2A               	subwf	___fttol@exp1,f,c
  2267  0007AC  AE2A               	btfss	___fttol@exp1,7,c
  2268  0007AE  D019               	goto	l1025
  2269  0007B0  502A               	movf	___fttol@exp1,w,c
  2270  0007B2  0A80               	xorlw	128
  2271  0007B4  6E20               	movwf	??___fttol& (0+255),c
  2272  0007B6  0EF1               	movlw	241
  2273  0007B8  0A80               	xorlw	128
  2274  0007BA  5C20               	subwf	??___fttol,w,c
  2275  0007BC  B0D8               	btfsc	status,0,c
  2276  0007BE  D009               	goto	l1021
  2277  0007C0  0E00               	movlw	0
  2278  0007C2  6E1C               	movwf	?___fttol,c
  2279  0007C4  0E00               	movlw	0
  2280  0007C6  6E1D               	movwf	?___fttol+1,c
  2281  0007C8  0E00               	movlw	0
  2282  0007CA  6E1E               	movwf	?___fttol+2,c
  2283  0007CC  0E00               	movlw	0
  2284  0007CE  6E1F               	movwf	?___fttol+3,c
  2285  0007D0  0012               	return	
  2286  0007D2                     l1021:
  2287  0007D2  90D8               	bcf	status,0,c
  2288  0007D4  3229               	rrcf	___fttol@lval+3,f,c
  2289  0007D6  3228               	rrcf	___fttol@lval+2,f,c
  2290  0007D8  3227               	rrcf	___fttol@lval+1,f,c
  2291  0007DA  3226               	rrcf	___fttol@lval,f,c
  2292  0007DC  3E2A               	incfsz	___fttol@exp1,f,c
  2293  0007DE  D7F9               	goto	l1021
  2294  0007E0  D014               	goto	l1035
  2295  0007E2                     l1025:
  2296  0007E2  0E17               	movlw	23
  2297  0007E4  642A               	cpfsgt	___fttol@exp1,c
  2298  0007E6  D00F               	goto	l1033
  2299  0007E8  0E00               	movlw	0
  2300  0007EA  6E1C               	movwf	?___fttol,c
  2301  0007EC  0E00               	movlw	0
  2302  0007EE  6E1D               	movwf	?___fttol+1,c
  2303  0007F0  0E00               	movlw	0
  2304  0007F2  6E1E               	movwf	?___fttol+2,c
  2305  0007F4  0E00               	movlw	0
  2306  0007F6  6E1F               	movwf	?___fttol+3,c
  2307  0007F8  0012               	return	
  2308  0007FA                     l1031:
  2309  0007FA  90D8               	bcf	status,0,c
  2310  0007FC  3626               	rlcf	___fttol@lval,f,c
  2311  0007FE  3627               	rlcf	___fttol@lval+1,f,c
  2312  000800  3628               	rlcf	___fttol@lval+2,f,c
  2313  000802  3629               	rlcf	___fttol@lval+3,f,c
  2314  000804  062A               	decf	___fttol@exp1,f,c
  2315  000806                     l1033:
  2316  000806  662A               	tstfsz	___fttol@exp1,c
  2317  000808  D7F8               	goto	l1031
  2318  00080A                     l1035:
  2319  00080A  5025               	movf	___fttol@sign1,w,c
  2320  00080C  B4D8               	btfsc	status,2,c
  2321  00080E  D008               	goto	l1039
  2322  000810  1E29               	comf	___fttol@lval+3,f,c
  2323  000812  1E28               	comf	___fttol@lval+2,f,c
  2324  000814  1E27               	comf	___fttol@lval+1,f,c
  2325  000816  6C26               	negf	___fttol@lval,c
  2326  000818  0E00               	movlw	0
  2327  00081A  2227               	addwfc	___fttol@lval+1,f,c
  2328  00081C  2228               	addwfc	___fttol@lval+2,f,c
  2329  00081E  2229               	addwfc	___fttol@lval+3,f,c
  2330  000820                     l1039:
  2331  000820  C026  F01C         	movff	___fttol@lval,?___fttol
  2332  000824  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  2333  000828  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  2334  00082C  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  2335  000830  0012               	return	
  2336  000832                     __end_of___fttol:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           prodl	equ	0xFF3
  2343                           intcon2	equ	0xFF1
  2344                           wreg	equ	0xFE8
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function ___ftmul *****************
  2348 ;; Defined at:
  2349 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  f1              3   12[COMRAM] float 
  2352 ;;  f2              3   15[COMRAM] float 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  2355 ;;  sign            1   26[COMRAM] unsigned char 
  2356 ;;  cntr            1   25[COMRAM] unsigned char 
  2357 ;;  exp             1   24[COMRAM] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  3   12[COMRAM] float 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2367 ;;      Params:         6       0       0       0       0       0       0
  2368 ;;      Locals:         6       0       0       0       0       0       0
  2369 ;;      Temps:          3       0       0       0       0       0       0
  2370 ;;      Totals:        15       0       0       0       0       0       0
  2371 ;;Total ram usage:       15 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    1
  2374 ;; This function calls:
  2375 ;;		___ftpack
  2376 ;; This function is called by:
  2377 ;;		_EPWM1_LoadDutyValue
  2378 ;;		_EPWM2_LoadDutyValue
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text19
  2383  000832                     __ptext19:
  2384                           	opt stack 0
  2385  000832                     ___ftmul:
  2386                           	opt stack 27
  2387                           
  2388                           ;incstack = 0
  2389  000832  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  2390  000836  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2391  000838  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2392  00083A  340E               	rlcf	___ftmul@f1+1,w,c
  2393  00083C  3613               	rlcf	??___ftmul& (0+255),f,c
  2394  00083E  E301               	bnc	u81
  2395  000840  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2396  000842                     u81:
  2397  000842  5013               	movf	??___ftmul,w,c
  2398  000844  6E19               	movwf	___ftmul@exp,c
  2399  000846  6619               	tstfsz	___ftmul@exp& (0+255),c
  2400  000848  D007               	goto	l943
  2401  00084A  0E00               	movlw	0
  2402  00084C  6E0D               	movwf	?___ftmul,c
  2403  00084E  0E00               	movlw	0
  2404  000850  6E0E               	movwf	?___ftmul+1,c
  2405  000852  0E00               	movlw	0
  2406  000854  6E0F               	movwf	?___ftmul+2,c
  2407  000856  0012               	return	
  2408  000858                     l943:
  2409  000858  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  2410  00085C  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2411  00085E  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2412  000860  3411               	rlcf	___ftmul@f2+1,w,c
  2413  000862  3613               	rlcf	??___ftmul& (0+255),f,c
  2414  000864  E301               	bnc	u101
  2415  000866  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2416  000868                     u101:
  2417  000868  5013               	movf	??___ftmul,w,c
  2418  00086A  6E1B               	movwf	___ftmul@sign,c
  2419  00086C  661B               	tstfsz	___ftmul@sign& (0+255),c
  2420  00086E  D007               	goto	l949
  2421  000870  0E00               	movlw	0
  2422  000872  6E0D               	movwf	?___ftmul,c
  2423  000874  0E00               	movlw	0
  2424  000876  6E0E               	movwf	?___ftmul+1,c
  2425  000878  0E00               	movlw	0
  2426  00087A  6E0F               	movwf	?___ftmul+2,c
  2427  00087C  0012               	return	
  2428  00087E                     l949:
  2429  00087E  501B               	movf	___ftmul@sign,w,c
  2430  000880  0F7B               	addlw	123
  2431  000882  2619               	addwf	___ftmul@exp,f,c
  2432  000884  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  2433  000888  5012               	movf	___ftmul@f2+2,w,c
  2434  00088A  1A1B               	xorwf	___ftmul@sign,f,c
  2435  00088C  0E80               	movlw	128
  2436  00088E  161B               	andwf	___ftmul@sign,f,c
  2437  000890  8E0E               	bsf	___ftmul@f1+1,7,c
  2438  000892  8E11               	bsf	___ftmul@f2+1,7,c
  2439  000894  0EFF               	movlw	255
  2440  000896  1610               	andwf	___ftmul@f2,f,c
  2441  000898  0EFF               	movlw	255
  2442  00089A  1611               	andwf	___ftmul@f2+1,f,c
  2443  00089C  0E00               	movlw	0
  2444  00089E  1612               	andwf	___ftmul@f2+2,f,c
  2445  0008A0  0E00               	movlw	0
  2446  0008A2  6E16               	movwf	___ftmul@f3_as_product,c
  2447  0008A4  0E00               	movlw	0
  2448  0008A6  6E17               	movwf	___ftmul@f3_as_product+1,c
  2449  0008A8  0E00               	movlw	0
  2450  0008AA  6E18               	movwf	___ftmul@f3_as_product+2,c
  2451  0008AC  0E07               	movlw	7
  2452  0008AE  6E1A               	movwf	___ftmul@cntr,c
  2453  0008B0                     l963:
  2454  0008B0  A00D               	btfss	___ftmul@f1,0,c
  2455  0008B2  D006               	goto	l967
  2456  0008B4  5010               	movf	___ftmul@f2,w,c
  2457  0008B6  2616               	addwf	___ftmul@f3_as_product,f,c
  2458  0008B8  5011               	movf	___ftmul@f2+1,w,c
  2459  0008BA  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  2460  0008BC  5012               	movf	___ftmul@f2+2,w,c
  2461  0008BE  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  2462  0008C0                     l967:
  2463  0008C0  90D8               	bcf	status,0,c
  2464  0008C2  320F               	rrcf	___ftmul@f1+2,f,c
  2465  0008C4  320E               	rrcf	___ftmul@f1+1,f,c
  2466  0008C6  320D               	rrcf	___ftmul@f1,f,c
  2467  0008C8  90D8               	bcf	status,0,c
  2468  0008CA  3610               	rlcf	___ftmul@f2,f,c
  2469  0008CC  3611               	rlcf	___ftmul@f2+1,f,c
  2470  0008CE  3612               	rlcf	___ftmul@f2+2,f,c
  2471  0008D0  2E1A               	decfsz	___ftmul@cntr,f,c
  2472  0008D2  D7EE               	goto	l963
  2473  0008D4  0E09               	movlw	9
  2474  0008D6  6E1A               	movwf	___ftmul@cntr,c
  2475  0008D8                     l973:
  2476  0008D8  A00D               	btfss	___ftmul@f1,0,c
  2477  0008DA  D006               	goto	l977
  2478  0008DC  5010               	movf	___ftmul@f2,w,c
  2479  0008DE  2616               	addwf	___ftmul@f3_as_product,f,c
  2480  0008E0  5011               	movf	___ftmul@f2+1,w,c
  2481  0008E2  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  2482  0008E4  5012               	movf	___ftmul@f2+2,w,c
  2483  0008E6  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  2484  0008E8                     l977:
  2485  0008E8  90D8               	bcf	status,0,c
  2486  0008EA  320F               	rrcf	___ftmul@f1+2,f,c
  2487  0008EC  320E               	rrcf	___ftmul@f1+1,f,c
  2488  0008EE  320D               	rrcf	___ftmul@f1,f,c
  2489  0008F0  90D8               	bcf	status,0,c
  2490  0008F2  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  2491  0008F4  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  2492  0008F6  3216               	rrcf	___ftmul@f3_as_product,f,c
  2493  0008F8  2E1A               	decfsz	___ftmul@cntr,f,c
  2494  0008FA  D7EE               	goto	l973
  2495  0008FC  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2496  000900  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2497  000904  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2498  000908  C019  F004         	movff	___ftmul@exp,___ftpack@exp
  2499  00090C  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  2500  000910  EC91  F004         	call	___ftpack	;wreg free
  2501  000914  C001  F00D         	movff	?___ftpack,?___ftmul
  2502  000918  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  2503  00091C  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  2504  000920  0012               	return	
  2505  000922                     __end_of___ftmul:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodl	equ	0xFF3
  2512                           intcon2	equ	0xFF1
  2513                           wreg	equ	0xFE8
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function ___awtoft *****************
  2517 ;; Defined at:
  2518 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  c               2    8[COMRAM] int 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  sign            1   11[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  3    8[COMRAM] float 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, prodl, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2532 ;;      Params:         3       0       0       0       0       0       0
  2533 ;;      Locals:         1       0       0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0
  2535 ;;      Totals:         4       0       0       0       0       0       0
  2536 ;;Total ram usage:        4 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    1
  2539 ;; This function calls:
  2540 ;;		___ftpack
  2541 ;; This function is called by:
  2542 ;;		_EPWM1_LoadDutyValue
  2543 ;;		_EPWM2_LoadDutyValue
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text20
  2548  000C4E                     __ptext20:
  2549                           	opt stack 0
  2550  000C4E                     ___awtoft:
  2551                           	opt stack 27
  2552                           
  2553                           ;incstack = 0
  2554  000C4E  0E00               	movlw	0
  2555  000C50  6E0C               	movwf	___awtoft@sign,c
  2556  000C52  500A               	movf	___awtoft@c+1,w,c
  2557  000C54  0A80               	xorlw	128
  2558  000C56  6EF3               	movwf	prodl,c
  2559  000C58  0E80               	movlw	128
  2560  000C5A  5CF3               	subwf	prodl,w,c
  2561  000C5C  0E00               	movlw	0
  2562  000C5E  B4D8               	btfsc	status,2,c
  2563  000C60  5C09               	subwf	___awtoft@c,w,c
  2564  000C62  B0D8               	btfsc	status,0,c
  2565  000C64  D006               	goto	l993
  2566  000C66  6C09               	negf	___awtoft@c,c
  2567  000C68  1E0A               	comf	___awtoft@c+1,f,c
  2568  000C6A  B0D8               	btfsc	status,0,c
  2569  000C6C  2A0A               	incf	___awtoft@c+1,f,c
  2570  000C6E  0E01               	movlw	1
  2571  000C70  6E0C               	movwf	___awtoft@sign,c
  2572  000C72                     l993:
  2573  000C72  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2574  000C76  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2575  000C7A  6A03               	clrf	___ftpack@arg+2,c
  2576  000C7C  0E8E               	movlw	142
  2577  000C7E  6E04               	movwf	___ftpack@exp,c
  2578  000C80  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  2579  000C84  EC91  F004         	call	___ftpack	;wreg free
  2580  000C88  C001  F009         	movff	?___ftpack,?___awtoft
  2581  000C8C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2582  000C90  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2583  000C94  0012               	return	
  2584  000C96                     __end_of___awtoft:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodl	equ	0xFF3
  2591                           intcon2	equ	0xFF1
  2592                           wreg	equ	0xFE8
  2593                           status	equ	0xFD8
  2594                           
  2595 ;; *************** function ___ftpack *****************
  2596 ;; Defined at:
  2597 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  arg             3    0[COMRAM] unsigned um
  2600 ;;  exp             1    3[COMRAM] unsigned char 
  2601 ;;  sign            1    4[COMRAM] unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  3    0[COMRAM] float 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2613 ;;      Params:         5       0       0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0
  2615 ;;      Temps:          3       0       0       0       0       0       0
  2616 ;;      Totals:         8       0       0       0       0       0       0
  2617 ;;Total ram usage:        8 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		___awtoft
  2623 ;;		___ftmul
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text21
  2628  000922                     __ptext21:
  2629                           	opt stack 0
  2630  000922                     ___ftpack:
  2631                           	opt stack 27
  2632                           
  2633                           ;incstack = 0
  2634  000922  5004               	movf	___ftpack@exp,w,c
  2635  000924  B4D8               	btfsc	status,2,c
  2636  000926  D005               	goto	l907
  2637  000928  5001               	movf	___ftpack@arg,w,c
  2638  00092A  1002               	iorwf	___ftpack@arg+1,w,c
  2639  00092C  1003               	iorwf	___ftpack@arg+2,w,c
  2640  00092E  A4D8               	btfss	status,2,c
  2641  000930  D00C               	goto	l913
  2642  000932                     l907:
  2643  000932  0E00               	movlw	0
  2644  000934  6E01               	movwf	?___ftpack,c
  2645  000936  0E00               	movlw	0
  2646  000938  6E02               	movwf	?___ftpack+1,c
  2647  00093A  0E00               	movlw	0
  2648  00093C  6E03               	movwf	?___ftpack+2,c
  2649  00093E  0012               	return	
  2650  000940                     l911:
  2651  000940  2A04               	incf	___ftpack@exp,f,c
  2652  000942  90D8               	bcf	status,0,c
  2653  000944  3203               	rrcf	___ftpack@arg+2,f,c
  2654  000946  3202               	rrcf	___ftpack@arg+1,f,c
  2655  000948  3201               	rrcf	___ftpack@arg,f,c
  2656  00094A                     l913:
  2657  00094A  0E00               	movlw	0
  2658  00094C  1401               	andwf	___ftpack@arg,w,c
  2659  00094E  6E06               	movwf	??___ftpack& (0+255),c
  2660  000950  0E00               	movlw	0
  2661  000952  1402               	andwf	___ftpack@arg+1,w,c
  2662  000954  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2663  000956  0EFE               	movlw	254
  2664  000958  1403               	andwf	___ftpack@arg+2,w,c
  2665  00095A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2666  00095C  5006               	movf	??___ftpack,w,c
  2667  00095E  1007               	iorwf	??___ftpack+1,w,c
  2668  000960  1008               	iorwf	??___ftpack+2,w,c
  2669  000962  B4D8               	btfsc	status,2,c
  2670  000964  D00C               	goto	l919
  2671  000966  D7EC               	goto	l911
  2672  000968                     l915:
  2673  000968  2A04               	incf	___ftpack@exp,f,c
  2674  00096A  0E01               	movlw	1
  2675  00096C  2601               	addwf	___ftpack@arg,f,c
  2676  00096E  0E00               	movlw	0
  2677  000970  2202               	addwfc	___ftpack@arg+1,f,c
  2678  000972  0E00               	movlw	0
  2679  000974  2203               	addwfc	___ftpack@arg+2,f,c
  2680  000976  90D8               	bcf	status,0,c
  2681  000978  3203               	rrcf	___ftpack@arg+2,f,c
  2682  00097A  3202               	rrcf	___ftpack@arg+1,f,c
  2683  00097C  3201               	rrcf	___ftpack@arg,f,c
  2684  00097E                     l919:
  2685  00097E  0E00               	movlw	0
  2686  000980  1401               	andwf	___ftpack@arg,w,c
  2687  000982  6E06               	movwf	??___ftpack& (0+255),c
  2688  000984  0E00               	movlw	0
  2689  000986  1402               	andwf	___ftpack@arg+1,w,c
  2690  000988  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2691  00098A  0EFF               	movlw	255
  2692  00098C  1403               	andwf	___ftpack@arg+2,w,c
  2693  00098E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2694  000990  5006               	movf	??___ftpack,w,c
  2695  000992  1007               	iorwf	??___ftpack+1,w,c
  2696  000994  1008               	iorwf	??___ftpack+2,w,c
  2697  000996  B4D8               	btfsc	status,2,c
  2698  000998  D006               	goto	l923
  2699  00099A  D7E6               	goto	l915
  2700  00099C                     l921:
  2701  00099C  0604               	decf	___ftpack@exp,f,c
  2702  00099E  90D8               	bcf	status,0,c
  2703  0009A0  3601               	rlcf	___ftpack@arg,f,c
  2704  0009A2  3602               	rlcf	___ftpack@arg+1,f,c
  2705  0009A4  3603               	rlcf	___ftpack@arg+2,f,c
  2706  0009A6                     l923:
  2707  0009A6  AE02               	btfss	___ftpack@arg+1,7,c
  2708  0009A8  D7F9               	goto	l921
  2709  0009AA  A004               	btfss	___ftpack@exp,0,c
  2710  0009AC  9E02               	bcf	___ftpack@arg+1,7,c
  2711  0009AE  90D8               	bcf	status,0,c
  2712  0009B0  3204               	rrcf	___ftpack@exp,f,c
  2713  0009B2  5004               	movf	___ftpack@exp,w,c
  2714  0009B4  1203               	iorwf	___ftpack@arg+2,f,c
  2715  0009B6  5005               	movf	___ftpack@sign,w,c
  2716  0009B8  A4D8               	btfss	status,2,c
  2717  0009BA  8E03               	bsf	___ftpack@arg+2,7,c
  2718  0009BC  C001  F001         	movff	___ftpack@arg,?___ftpack
  2719  0009C0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2720  0009C4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2721  0009C8  0012               	return	
  2722  0009CA                     __end_of___ftpack:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodl	equ	0xFF3
  2729                           intcon2	equ	0xFF1
  2730                           wreg	equ	0xFE8
  2731                           status	equ	0xFD8
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodl	equ	0xFF3
  2737                           intcon2	equ	0xFF1
  2738                           wreg	equ	0xFE8
  2739                           status	equ	0xFD8
  2740                           
  2741                           	psect	rparam
  2742  0000                     tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           tblptrl	equ	0xFF6
  2745                           tablat	equ	0xFF5
  2746                           prodl	equ	0xFF3
  2747                           intcon2	equ	0xFF1
  2748                           wreg	equ	0xFE8
  2749                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_write@data	PTR unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Drive_Forward
    _LCD_write->_LCD_writeChar
    _LCD_write->_place_lcd_cursor
    _LCD_init->_place_lcd_cursor
    _Drive_Forward->_EPWM1_LoadDutyValue
    _Drive_Forward->_EPWM2_LoadDutyValue
    _Stop->_EPWM1_LoadDutyValue
    _Stop->_EPWM2_LoadDutyValue
    _EPWM2_LoadDutyValue->___fttol
    _EPWM1_LoadDutyValue->___fttol
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24278
                      _Drive_Forward
                   _EPWM1_Initialize
                   _EPWM2_Initialize
                     _EPWM_Port_Init
                           _LCD_init
                          _LCD_write
                               _Stop
                    _TMR2_Initialize
                    _TMR4_Initialize
                           _i2c_Init
                      _i2c_Port_Init
                    _lineSensor_init
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _lineSensor_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Port_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_write                                            6     4      2     526
                                              4 COMRAM     6     4      2
                      _LCD_writeChar
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0     363
                                              4 COMRAM     1     1      0
                         _Delay100ms
                   _place_lcd_cursor
 ---------------------------------------------------------------------------------
 (1) _place_lcd_cursor                                     4     3      1     333
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Delay100ms                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_Port_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Drive_Forward                                        4     2      2   15400
                                             48 COMRAM     4     2      2
                _EPWM1_LoadDutyValue
                _EPWM2_LoadDutyValue
                               _Stop
 ---------------------------------------------------------------------------------
 (1) _Stop                                                 0     0      0    7656
                _EPWM1_LoadDutyValue
                _EPWM2_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _EPWM2_LoadDutyValue                                  6     4      2    3828
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  6     4      2    3828
                                             42 COMRAM     6     4      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     251
                                             27 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    1790
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    1484
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1338
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Drive_Forward
     _EPWM1_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _EPWM2_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _Stop
       _EPWM1_LoadDutyValue
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       _EPWM2_LoadDutyValue
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _EPWM1_Initialize
   _EPWM2_Initialize
   _EPWM_Port_Init
   _LCD_init
     _Delay100ms
     _place_lcd_cursor
   _LCD_write
     _LCD_writeChar
     _place_lcd_cursor
   _Stop
     _EPWM1_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _EPWM2_LoadDutyValue
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _TMR2_Initialize
   _TMR4_Initialize
   _i2c_Init
   _i2c_Port_Init
   _lineSensor_init
   _place_lcd_cursor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      37       1       57.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      37       9        0.0%
DATA                 0      0      37      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri May 08 11:56:20 2015

__size_of_EPWM2_LoadDutyValue 0080                            u81 0842                ?_i2c_Port_Init 0001  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000                           l161 0BFE  
                         l911 0940                           l921 099C                           l913 094A  
                         l923 09A6                           l915 0968                           l907 0932  
                         l919 097E                           l943 0858                           l963 08B0  
                         l973 08D8                           l949 087E                           l967 08C0  
                         l993 0C72                           l977 08E8                  __CFG_CPB$OFF 000000  
                         u101 0868                           u151 074C                           u170 0784  
                         _PR2 000FBB                           u175 077C                           u407 0670  
                         _PR4 000F52                           u417 068C                  __CFG_CPD$OFF 000000  
                         u427 06B4                           u437 06DA                           u447 0700  
                         u457 0726                           u377 0D06                           u467 0C44  
                         u387 0638                           u477 0D62                           u397 0654  
                         u487 0CC2               _TMR2_Initialize 0E24                           wreg 000FE8  
    __end_of_EPWM2_Initialize 0D9A                    _Delay100ms 0D44                          l1003 0766  
                        l1021 07D2                          l1031 07FA                          l1033 0806  
                        l1025 07E2                          l1035 080A                          l1039 0820  
                        l1163 0CA4                          l1169 0CCE                          l1285 0A8C  
                        l1287 0AAC                          l1279 0A5A                          l1289 0AB0  
                        _ADON 007E10                          STR_1 0601                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _TMR2 000FBC                          _TMR4 000F53  
                        _TMR6 000F4C                          _WPUB 000F61                          _Stop 0DBE  
                        _main 0BB2                  ___ftpack@arg 0001                          _yPos 0035  
                ___ftpack@exp 0004                 __CFG_BORV$190 000000                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000         ??_EPWM1_LoadDutyValue 002D  
                ___ftmul@cntr 001A                  ___ftmul@sign 001B            __size_of_LCD_write 0084  
                ___fttol@exp1 002A                  ___fttol@lval 0026              __end_of_LCD_init 073C  
                       ?_Stop 0001                         ?_main 0001               __end_of___ftmul 0922  
             __end_of___fttol 0832                         _T2CON 000FBA                         _T4CON 000F51  
                       _T6CON 000F4A                         _PORTC 000F82                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000               _TMR4_Initialize 0DFA                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000        __size_of_LCD_writeChar 003A                __CFG_EBTRB$OFF 000000  
               ___awtoft@sign 000C            __CFG_MCLRE$EXTMCLR 000000                 ___ftpack@sign 0005  
                       tablat 000FF5       __end_of_lineSensor_init 0E3A               ??_Drive_Forward 0033  
                       status 000FD8                __CFG_HFOFST$ON 000000                __CFG_FOSC$HSHP 000000  
              __CFG_PBADEN$ON 000000               __initialization 0D9A                  __end_of_Stop 0DE2  
                __end_of_main 0C00              __end_of_i2c_Init 0DFA               ??_i2c_Port_Init 0001  
     __end_of_TMR2_Initialize 0E34       __size_of_EPWM_Port_Init 005E                        ??_Stop 0031  
                      ??_main 0035                 ___fttol@sign1 0025                 __activetblptr 000001  
                 ?_Delay100ms 0001             __end_of_LCD_write 0AD4                        _ADCON0 000FC2  
                      _ADCON2 000FC0                        _ADRESL 000FC3                        _CCPR2H 000F68  
                      _CCPR3H 000F5F                        _CCPR2L 000F67                        _CCPR3L 000F5E  
           place_lcd_cursor@x 0003             place_lcd_cursor@y 0001              __end_of___awtoft 0C96  
                      _ANSELA 000F38                        _ANSELB 000F39                        _ANSELD 000F3B  
                      _ANSELE 000F3C              __end_of___ftpack 09CA                        _GODONE 007E11  
              __CFG_WDTEN$OFF 000000                __CFG_XINST$OFF 000000                 _LCD_writeChar 0CD8  
                _CCPTMRS0bits 000F49                __CFG_STVREN$ON 000000                     ??___ftmul 0013  
                   ??___fttol 0020       __end_of_TMR4_Initialize 0E12         ___ftmul@f3_as_product 0016  
                __pdataCOMRAM 0037                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8           _EPWM2_LoadDutyValue 0AD4  
            ?_lineSensor_init 0001                    __accesstop 0060       __end_of__initialization 0DB0  
                   ?_LCD_init 0001                    ___awtoft@c 0009                ?_LCD_writeChar 0001  
   __size_of_place_lcd_cursor 004E                    ___ftmul@f1 000D                    ___ftmul@f2 0010  
           ?_EPWM1_Initialize 0001                    ___fttol@f1 001C                __pcstackCOMRAM 0001  
        ?_EPWM2_LoadDutyValue 002B           __size_of_Delay100ms 002C            ??_EPWM1_Initialize 0001  
            ?_TMR2_Initialize 0001             ?_EPWM2_Initialize 0001            ??_EPWM2_Initialize 0001  
                   ?_i2c_Init 0001               __CFG_PLLCFG$OFF 000000                    ??_LCD_init 0005  
          __CFG_CCP2MX$PORTC1 000000         ??_EPWM2_LoadDutyValue 002D            __CFG_CCP3MX$PORTB5 000000  
                     _CCP2CON 000F66                       _CCP3CON 000F5D                       _ECCP2AS 000F64  
                     _ECCP3AS 000F5B                _EPWM_Port_Init 0B54              ?_TMR4_Initialize 0001  
                   ?___awtoft 0009                     ?___ftpack 0001                       _PWM2CON 000F65  
                     _PWM3CON 000F5C                       _SSP2ADD 000F6E                       _SSP2BUF 000F6F  
                  ??_i2c_Init 0001   __end_of_EPWM1_LoadDutyValue 0A50            _whiteLineThreshold 0037  
             ??_LCD_writeChar 0001               __CFG_PWRTEN$OFF 000000                       __Hparam 0000  
                     __Lparam 0000        __end_of_EPWM_Port_Init 0BB2                       ___ftmul 0832  
                     ___fttol 073C                  __psmallconst 0600                       __pcinit 0D9A  
                  ??___awtoft 000C                    ??___ftpack 0006                       __ramtop 0600  
                     __ptext0 0BB2                       __ptext1 0E34                       __ptext2 0E12  
                     __ptext3 0DE2                       __ptext4 0DFA                       __ptext5 0E24  
                     __ptext6 0A50                       __ptext7 0CD8                       __ptext8 0608  
                     __ptext9 0C00                     _T2CONbits 000FBA                     _T4CONbits 000F51  
                ??_Delay100ms 0001          end_of_initialization 0DB0                     _LCD_write 0A50  
       __end_of_Drive_Forward 0CD8              _place_lcd_cursor 0C00               ?_EPWM_Port_Init 0001  
          __end_of_Delay100ms 0D70         __end_of_i2c_Port_Init 0E24            LCD_writeChar@lower 0003  
          LCD_writeChar@upper 0002                     _PORTAbits 000F80                     _PORTCbits 000F82  
                   _TRISAbits 000F92                     _TRISCbits 000F94                     _TRISDbits 000F95  
                  ?_LCD_write 0005             __size_of_LCD_init 0134                   ___ftmul@exp 0019  
               __pidataCOMRAM 0E3A      place_lcd_cursor@position 0004           start_initialization 0D9A  
   __size_of_EPWM1_Initialize 0032  EPWM1_LoadDutyValue@dutyValue 002B                    LCD_write@i 0009  
           __size_of_i2c_Init 0018     __size_of_EPWM2_Initialize 002A      __size_of_lineSensor_init 0006  
           __size_of___awtoft 0048             __size_of___ftpack 00A8                   __pbssCOMRAM 0035  
    __size_of_TMR2_Initialize 0010           __end_of__stringdata 0607                   ??_LCD_write 0007  
 __end_of_EPWM2_LoadDutyValue 0B54                 LCD_write@data 0005                      ?___ftmul 000D  
                    ?___fttol 001C              __CFG_PRICLKEN$ON 000000                   __smallconst 0600  
    __end_of_place_lcd_cursor 0C4E      __size_of_TMR4_Initialize 0018                   Delay100ms@i 0002  
                    _LATAbits 000F89                      _LATCbits 000F8B                      _LATDbits 000F8C  
                    _LCD_init 0608              ??_EPWM_Port_Init 0001         __end_of_LCD_writeChar 0D12  
                    _PIR1bits 000F9E                      _PIR5bits 000F7E  __size_of_EPWM1_LoadDutyValue 0086  
            __CFG_WDTPS$32768 000000             LCD_writeChar@data 0004                      _SSP2CON1 000F6C  
                    _SSP2CON2 000F6B                      _PSTR2CON 000F63                      _PSTR3CON 000F5A  
                    _SSP2STAT 000F6D                   __stringdata 0601             ??_lineSensor_init 0001  
            _EPWM1_Initialize 0D12                   _INTCON2bits 000FF1                      _i2c_Init 0DE2  
           ??_TMR2_Initialize 0001                      __Hrparam 0000              _EPWM2_Initialize 0D70  
                    __Lrparam 0000                  __Lsmallconst 0600            __CFG_BOREN$SBORDIS 000000  
           __CFG_P2BMX$PORTD2 000000              __size_of___ftmul 00F0              __size_of___fttol 00F6  
                    ___awtoft 0C4E                      ___ftpack 0922                    _ANSELCbits 000F3A  
                  _ANSELDbits 000F3B        __size_of_Drive_Forward 0042                      __ptext10 0D44  
                    __ptext11 0B54                      __ptext20 0C4E                      __ptext12 0D70  
                    __ptext21 0922                      __ptext13 0D12                      __ptext14 0C96  
                    __ptext15 0DBE                      __ptext16 0AD4                      __ptext17 09CA  
                    __ptext18 073C                      __ptext19 0832         Drive_Forward@distance 0034  
                _SSP2CON1bits 000F6C                  _SSP2CON2bits 000F6B                 __size_of_Stop 0024  
           ??_TMR4_Initialize 0001        __size_of_i2c_Port_Init 0012                 __size_of_main 004E  
          Drive_Forward@speed 0031  EPWM2_LoadDutyValue@dutyValue 002B                 _Drive_Forward 0C96  
               _i2c_Port_Init 0E12             __CFG_T3CMX$PORTC0 000000           _EPWM1_LoadDutyValue 09CA  
           ?_place_lcd_cursor 0001            ??_place_lcd_cursor 0002                ?_Drive_Forward 0031  
             _lineSensor_init 0E34      __end_of_EPWM1_Initialize 0D44          ?_EPWM1_LoadDutyValue 002B  
